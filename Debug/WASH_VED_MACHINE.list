
WASH_VED_MACHINE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003db4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08003e74  08003e74  00004e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fa4  08003fa4  0000507c  2**0
                  CONTENTS
  4 .ARM          00000000  08003fa4  08003fa4  0000507c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fa4  08003fa4  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa4  08003fa4  00004fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fa8  08003fa8  00004fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08003fac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000007c  08004028  0000507c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08004028  000052d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009143  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a4  00000000  00000000  0000e1e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  0000fb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000062c  00000000  00000000  000103a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011643  00000000  00000000  000109d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b31a  00000000  00000000  00022017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062ac3  00000000  00000000  0002d331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008fdf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022b8  00000000  00000000  0008fe38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000920f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e5c 	.word	0x08003e5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08003e5c 	.word	0x08003e5c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <Delay_us>:
#define DATA_HIGH() HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET)
#define DATA_LOW()  HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);


void Delay_us (int time)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<time; i++)
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	e00c      	b.n	8000430 <Delay_us+0x28>
	{
		for (int j=0; j<7; j++)
 8000416:	2300      	movs	r3, #0
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	e003      	b.n	8000424 <Delay_us+0x1c>
		{
			__asm__("nop");
 800041c:	46c0      	nop			@ (mov r8, r8)
		for (int j=0; j<7; j++)
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	3301      	adds	r3, #1
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	2b06      	cmp	r3, #6
 8000428:	ddf8      	ble.n	800041c <Delay_us+0x14>
	for (int i=0; i<time; i++)
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	3301      	adds	r3, #1
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fa      	ldr	r2, [r7, #12]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	429a      	cmp	r2, r3
 8000436:	dbee      	blt.n	8000416 <Delay_us+0xe>
		}
	}
}
 8000438:	46c0      	nop			@ (mov r8, r8)
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b004      	add	sp, #16
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <start>:

void start (void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0

	CLK_HIGH();
 8000448:	2380      	movs	r3, #128	@ 0x80
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	480c      	ldr	r0, [pc, #48]	@ (8000480 <start+0x3c>)
 800044e:	2201      	movs	r2, #1
 8000450:	0019      	movs	r1, r3
 8000452:	f001 fbd7 	bl	8001c04 <HAL_GPIO_WritePin>
	DATA_HIGH();
 8000456:	2380      	movs	r3, #128	@ 0x80
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	4809      	ldr	r0, [pc, #36]	@ (8000480 <start+0x3c>)
 800045c:	2201      	movs	r2, #1
 800045e:	0019      	movs	r1, r3
 8000460:	f001 fbd0 	bl	8001c04 <HAL_GPIO_WritePin>
	Delay_us (2);
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff ffcf 	bl	8000408 <Delay_us>
	DATA_LOW();
 800046a:	2380      	movs	r3, #128	@ 0x80
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	4804      	ldr	r0, [pc, #16]	@ (8000480 <start+0x3c>)
 8000470:	2200      	movs	r2, #0
 8000472:	0019      	movs	r1, r3
 8000474:	f001 fbc6 	bl	8001c04 <HAL_GPIO_WritePin>
}
 8000478:	46c0      	nop			@ (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	48000400 	.word	0x48000400

08000484 <stop>:

void stop (void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	CLK_LOW();
 8000488:	2380      	movs	r3, #128	@ 0x80
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	4812      	ldr	r0, [pc, #72]	@ (80004d8 <stop+0x54>)
 800048e:	2200      	movs	r2, #0
 8000490:	0019      	movs	r1, r3
 8000492:	f001 fbb7 	bl	8001c04 <HAL_GPIO_WritePin>
	Delay_us (2);
 8000496:	2002      	movs	r0, #2
 8000498:	f7ff ffb6 	bl	8000408 <Delay_us>
	DATA_LOW();
 800049c:	2380      	movs	r3, #128	@ 0x80
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	480d      	ldr	r0, [pc, #52]	@ (80004d8 <stop+0x54>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	0019      	movs	r1, r3
 80004a6:	f001 fbad 	bl	8001c04 <HAL_GPIO_WritePin>
	Delay_us (2);
 80004aa:	2002      	movs	r0, #2
 80004ac:	f7ff ffac 	bl	8000408 <Delay_us>
	CLK_HIGH();
 80004b0:	2380      	movs	r3, #128	@ 0x80
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	4808      	ldr	r0, [pc, #32]	@ (80004d8 <stop+0x54>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	0019      	movs	r1, r3
 80004ba:	f001 fba3 	bl	8001c04 <HAL_GPIO_WritePin>
	Delay_us (2);
 80004be:	2002      	movs	r0, #2
 80004c0:	f7ff ffa2 	bl	8000408 <Delay_us>
	DATA_HIGH();
 80004c4:	2380      	movs	r3, #128	@ 0x80
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	4803      	ldr	r0, [pc, #12]	@ (80004d8 <stop+0x54>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	0019      	movs	r1, r3
 80004ce:	f001 fb99 	bl	8001c04 <HAL_GPIO_WritePin>
}
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	48000400 	.word	0x48000400

080004dc <waitforAck>:

void waitforAck (void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	CLK_LOW();
 80004e0:	2380      	movs	r3, #128	@ 0x80
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	480d      	ldr	r0, [pc, #52]	@ (800051c <waitforAck+0x40>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	0019      	movs	r1, r3
 80004ea:	f001 fb8b 	bl	8001c04 <HAL_GPIO_WritePin>
	Delay_us (5); // After the falling edge of the eighth clock delay 5us
 80004ee:	2005      	movs	r0, #5
 80004f0:	f7ff ff8a 	bl	8000408 <Delay_us>
	              // ACK signals the beginning of judgment
//	while (dio);  // Check the state of the Data pin
	CLK_HIGH();
 80004f4:	2380      	movs	r3, #128	@ 0x80
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	4808      	ldr	r0, [pc, #32]	@ (800051c <waitforAck+0x40>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	0019      	movs	r1, r3
 80004fe:	f001 fb81 	bl	8001c04 <HAL_GPIO_WritePin>
	Delay_us (2);
 8000502:	2002      	movs	r0, #2
 8000504:	f7ff ff80 	bl	8000408 <Delay_us>
	CLK_LOW();
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	4803      	ldr	r0, [pc, #12]	@ (800051c <waitforAck+0x40>)
 800050e:	2200      	movs	r2, #0
 8000510:	0019      	movs	r1, r3
 8000512:	f001 fb77 	bl	8001c04 <HAL_GPIO_WritePin>
}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	48000400 	.word	0x48000400

08000520 <writeByte>:

void writeByte (uint8_t byte)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	0002      	movs	r2, r0
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	701a      	strb	r2, [r3, #0]
	int i;
	for (i = 0; i<8; i++)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e02f      	b.n	8000592 <writeByte+0x72>
	{
		CLK_LOW();
 8000532:	2380      	movs	r3, #128	@ 0x80
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	481b      	ldr	r0, [pc, #108]	@ (80005a4 <writeByte+0x84>)
 8000538:	2200      	movs	r2, #0
 800053a:	0019      	movs	r1, r3
 800053c:	f001 fb62 	bl	8001c04 <HAL_GPIO_WritePin>
		if (byte & 0x01) // low front
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2201      	movs	r2, #1
 8000546:	4013      	ands	r3, r2
 8000548:	d007      	beq.n	800055a <writeByte+0x3a>
		{
			DATA_HIGH();
 800054a:	2380      	movs	r3, #128	@ 0x80
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	4815      	ldr	r0, [pc, #84]	@ (80005a4 <writeByte+0x84>)
 8000550:	2201      	movs	r2, #1
 8000552:	0019      	movs	r1, r3
 8000554:	f001 fb56 	bl	8001c04 <HAL_GPIO_WritePin>
 8000558:	e006      	b.n	8000568 <writeByte+0x48>
		}
		else
		{
			DATA_LOW();
 800055a:	2380      	movs	r3, #128	@ 0x80
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4811      	ldr	r0, [pc, #68]	@ (80005a4 <writeByte+0x84>)
 8000560:	2200      	movs	r2, #0
 8000562:	0019      	movs	r1, r3
 8000564:	f001 fb4e 	bl	8001c04 <HAL_GPIO_WritePin>
		}
		Delay_us (3);
 8000568:	2003      	movs	r0, #3
 800056a:	f7ff ff4d 	bl	8000408 <Delay_us>
		byte = byte >> 1;
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	1dfa      	adds	r2, r7, #7
 8000572:	7812      	ldrb	r2, [r2, #0]
 8000574:	0852      	lsrs	r2, r2, #1
 8000576:	701a      	strb	r2, [r3, #0]
		CLK_HIGH();
 8000578:	2380      	movs	r3, #128	@ 0x80
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	4809      	ldr	r0, [pc, #36]	@ (80005a4 <writeByte+0x84>)
 800057e:	2201      	movs	r2, #1
 8000580:	0019      	movs	r1, r3
 8000582:	f001 fb3f 	bl	8001c04 <HAL_GPIO_WritePin>
		Delay_us (3);
 8000586:	2003      	movs	r0, #3
 8000588:	f7ff ff3e 	bl	8000408 <Delay_us>
	for (i = 0; i<8; i++)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3301      	adds	r3, #1
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2b07      	cmp	r3, #7
 8000596:	ddcc      	ble.n	8000532 <writeByte+0x12>
	}
}
 8000598:	46c0      	nop			@ (mov r8, r8)
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b004      	add	sp, #16
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	48000400 	.word	0x48000400

080005a8 <TM1637_WriteData>:

void TM1637_WriteData (uint8_t Addr, uint8_t *data, int size)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b087      	sub	sp, #28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60b9      	str	r1, [r7, #8]
 80005b0:	607a      	str	r2, [r7, #4]
 80005b2:	240f      	movs	r4, #15
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	1c02      	adds	r2, r0, #0
 80005b8:	701a      	strb	r2, [r3, #0]
	start();
 80005ba:	f7ff ff43 	bl	8000444 <start>
	writeByte(0x40);
 80005be:	2040      	movs	r0, #64	@ 0x40
 80005c0:	f7ff ffae 	bl	8000520 <writeByte>
	waitforAck();
 80005c4:	f7ff ff8a 	bl	80004dc <waitforAck>
	stop();
 80005c8:	f7ff ff5c 	bl	8000484 <stop>

	start();
 80005cc:	f7ff ff3a 	bl	8000444 <start>
	writeByte(Addr);
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	0018      	movs	r0, r3
 80005d6:	f7ff ffa3 	bl	8000520 <writeByte>
	waitforAck();
 80005da:	f7ff ff7f 	bl	80004dc <waitforAck>
	for (int i=0; i<size; i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	e00b      	b.n	80005fc <TM1637_WriteData+0x54>
	{
		writeByte(data[i]);
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	18d3      	adds	r3, r2, r3
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	0018      	movs	r0, r3
 80005ee:	f7ff ff97 	bl	8000520 <writeByte>
		waitforAck();
 80005f2:	f7ff ff73 	bl	80004dc <waitforAck>
	for (int i=0; i<size; i++)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	dbef      	blt.n	80005e4 <TM1637_WriteData+0x3c>
	}
	stop();
 8000604:	f7ff ff3e 	bl	8000484 <stop>

	start();
 8000608:	f7ff ff1c 	bl	8000444 <start>
	writeByte(0x8A);
 800060c:	208a      	movs	r0, #138	@ 0x8a
 800060e:	f7ff ff87 	bl	8000520 <writeByte>
	waitforAck();
 8000612:	f7ff ff63 	bl	80004dc <waitforAck>
	stop();
 8000616:	f7ff ff35 	bl	8000484 <stop>
}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b007      	add	sp, #28
 8000620:	bd90      	pop	{r4, r7, pc}
	...

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 fde0 	bl	80011ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f966 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 fa4e 	bl	8000ad0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000634:	f000 fa1c 	bl	8000a70 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000638:	f000 f9be 	bl	80009b8 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  printf("system start\n\r");
 800063c:	4b9e      	ldr	r3, [pc, #632]	@ (80008b8 <main+0x294>)
 800063e:	0018      	movs	r0, r3
 8000640:	f002 fd6e 	bl	8003120 <iprintf>
  //TM1637_Countdown_20Sec();
  state = 0;            // State variable to manage tasks
 8000644:	4b9d      	ldr	r3, [pc, #628]	@ (80008bc <main+0x298>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
  task_start_time = 0;
 800064a:	4b9d      	ldr	r3, [pc, #628]	@ (80008c0 <main+0x29c>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //StateMachine_Run();
	  switch (state)
 8000650:	4b9a      	ldr	r3, [pc, #616]	@ (80008bc <main+0x298>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b06      	cmp	r3, #6
 8000656:	d900      	bls.n	800065a <main+0x36>
 8000658:	e11f      	b.n	800089a <main+0x276>
 800065a:	009a      	lsls	r2, r3, #2
 800065c:	4b99      	ldr	r3, [pc, #612]	@ (80008c4 <main+0x2a0>)
 800065e:	18d3      	adds	r3, r2, r3
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	469f      	mov	pc, r3
	  {
		  case 0: // Display dashes until coin pulse is detected
			  DisplayDashes();
 8000664:	f000 fb80 	bl	8000d68 <DisplayDashes>
			  if(pulse_interrupt_Flag){
 8000668:	4b97      	ldr	r3, [pc, #604]	@ (80008c8 <main+0x2a4>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d100      	bne.n	8000674 <main+0x50>
 8000672:	e116      	b.n	80008a2 <main+0x27e>
				  if (coin_pulse == 1) // Check for single coin pulse
 8000674:	4b95      	ldr	r3, [pc, #596]	@ (80008cc <main+0x2a8>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d109      	bne.n	8000690 <main+0x6c>
				  {
					  state = 1; // Transition to state 1
 800067c:	4b8f      	ldr	r3, [pc, #572]	@ (80008bc <main+0x298>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
					  initial_display_done = 0; // Reset display flag
 8000682:	4b93      	ldr	r3, [pc, #588]	@ (80008d0 <main+0x2ac>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
					  coin_pulse = 0;
 8000688:	4b90      	ldr	r3, [pc, #576]	@ (80008cc <main+0x2a8>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
					  initial_display_done = 0; // Reset display flag
					  coin_pulse = 0;
				  }
			  }

			  break;
 800068e:	e108      	b.n	80008a2 <main+0x27e>
				  else if (coin_pulse == 2) // Check for two coin pulses
 8000690:	4b8e      	ldr	r3, [pc, #568]	@ (80008cc <main+0x2a8>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d000      	beq.n	800069a <main+0x76>
 8000698:	e103      	b.n	80008a2 <main+0x27e>
					  state = 2; // Transition to state 2
 800069a:	4b88      	ldr	r3, [pc, #544]	@ (80008bc <main+0x298>)
 800069c:	2202      	movs	r2, #2
 800069e:	701a      	strb	r2, [r3, #0]
					  initial_display_done = 0; // Reset display flag
 80006a0:	4b8b      	ldr	r3, [pc, #556]	@ (80008d0 <main+0x2ac>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
					  coin_pulse = 0;
 80006a6:	4b89      	ldr	r3, [pc, #548]	@ (80008cc <main+0x2a8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
			  break;
 80006ac:	e0f9      	b.n	80008a2 <main+0x27e>

		  case 1:

				  if (!initial_display_done)
 80006ae:	4b88      	ldr	r3, [pc, #544]	@ (80008d0 <main+0x2ac>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d109      	bne.n	80006ca <main+0xa6>
				  {
					  Display_fifty(); // Display "50"
 80006b6:	f000 fb1b 	bl	8000cf0 <Display_fifty>
					  task_start_time = HAL_GetTick();
 80006ba:	f000 fdf1 	bl	80012a0 <HAL_GetTick>
 80006be:	0002      	movs	r2, r0
 80006c0:	4b7f      	ldr	r3, [pc, #508]	@ (80008c0 <main+0x29c>)
 80006c2:	601a      	str	r2, [r3, #0]
					  initial_display_done = 1; // Mark initial display as done
 80006c4:	4b82      	ldr	r3, [pc, #520]	@ (80008d0 <main+0x2ac>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
				  }

				  if (HAL_GetTick() - task_start_time >= 2000)
 80006ca:	f000 fde9 	bl	80012a0 <HAL_GetTick>
 80006ce:	0002      	movs	r2, r0
 80006d0:	4b7b      	ldr	r3, [pc, #492]	@ (80008c0 <main+0x29c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	1ad2      	subs	r2, r2, r3
 80006d6:	23fa      	movs	r3, #250	@ 0xfa
 80006d8:	00db      	lsls	r3, r3, #3
 80006da:	429a      	cmp	r2, r3
 80006dc:	d200      	bcs.n	80006e0 <main+0xbc>
 80006de:	e0e2      	b.n	80008a6 <main+0x282>
				  {
					  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_SET); // Activate relay signal
 80006e0:	2380      	movs	r3, #128	@ 0x80
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	487b      	ldr	r0, [pc, #492]	@ (80008d4 <main+0x2b0>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	0019      	movs	r1, r3
 80006ea:	f001 fa8b 	bl	8001c04 <HAL_GPIO_WritePin>
					  if (HAL_GetTick() - task_start_time < 20000) // Check if 20 seconds haven't elapsed
 80006ee:	f000 fdd7 	bl	80012a0 <HAL_GetTick>
 80006f2:	0002      	movs	r2, r0
 80006f4:	4b72      	ldr	r3, [pc, #456]	@ (80008c0 <main+0x29c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	4a77      	ldr	r2, [pc, #476]	@ (80008d8 <main+0x2b4>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d802      	bhi.n	8000706 <main+0xe2>
					  {
						  TM1637_Countdown_20Sec();
 8000700:	f000 fa7a 	bl	8000bf8 <TM1637_Countdown_20Sec>
						  state = 0; // Return to initial state
						  coin_pulse = 0; // Reset coin pulse count
					  }

				  }
			  break;
 8000704:	e0cf      	b.n	80008a6 <main+0x282>
						  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_RESET); // Deactivate relay signal
 8000706:	2380      	movs	r3, #128	@ 0x80
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	4872      	ldr	r0, [pc, #456]	@ (80008d4 <main+0x2b0>)
 800070c:	2200      	movs	r2, #0
 800070e:	0019      	movs	r1, r3
 8000710:	f001 fa78 	bl	8001c04 <HAL_GPIO_WritePin>
						  printf("return to IDLE\n\r");
 8000714:	4b71      	ldr	r3, [pc, #452]	@ (80008dc <main+0x2b8>)
 8000716:	0018      	movs	r0, r3
 8000718:	f002 fd02 	bl	8003120 <iprintf>
						  state = 0; // Return to initial state
 800071c:	4b67      	ldr	r3, [pc, #412]	@ (80008bc <main+0x298>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
						  coin_pulse = 0; // Reset coin pulse count
 8000722:	4b6a      	ldr	r3, [pc, #424]	@ (80008cc <main+0x2a8>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
			  break;
 8000728:	e0bd      	b.n	80008a6 <main+0x282>

		  case 2:
			  if (!initial_display_done)
 800072a:	4b69      	ldr	r3, [pc, #420]	@ (80008d0 <main+0x2ac>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d109      	bne.n	8000746 <main+0x122>
			  {
				  Display_1dhiram();
 8000732:	f000 fafb 	bl	8000d2c <Display_1dhiram>
				  task_start_time = HAL_GetTick();
 8000736:	f000 fdb3 	bl	80012a0 <HAL_GetTick>
 800073a:	0002      	movs	r2, r0
 800073c:	4b60      	ldr	r3, [pc, #384]	@ (80008c0 <main+0x29c>)
 800073e:	601a      	str	r2, [r3, #0]
				  initial_display_done = 1;
 8000740:	4b63      	ldr	r3, [pc, #396]	@ (80008d0 <main+0x2ac>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
			  }
			  if (HAL_GetTick() - task_start_time >= 2000)
 8000746:	f000 fdab 	bl	80012a0 <HAL_GetTick>
 800074a:	0002      	movs	r2, r0
 800074c:	4b5c      	ldr	r3, [pc, #368]	@ (80008c0 <main+0x29c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	1ad2      	subs	r2, r2, r3
 8000752:	23fa      	movs	r3, #250	@ 0xfa
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	429a      	cmp	r2, r3
 8000758:	d200      	bcs.n	800075c <main+0x138>
 800075a:	e0a6      	b.n	80008aa <main+0x286>
			  {
				  state = 2;
 800075c:	4b57      	ldr	r3, [pc, #348]	@ (80008bc <main+0x298>)
 800075e:	2202      	movs	r2, #2
 8000760:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000762:	e0a2      	b.n	80008aa <main+0x286>

		  case 3:
			  if (HAL_GetTick() - task_start_time < 20000)
 8000764:	f000 fd9c 	bl	80012a0 <HAL_GetTick>
 8000768:	0002      	movs	r2, r0
 800076a:	4b55      	ldr	r3, [pc, #340]	@ (80008c0 <main+0x29c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	4a59      	ldr	r2, [pc, #356]	@ (80008d8 <main+0x2b4>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d802      	bhi.n	800077c <main+0x158>
			  {
				  TM1637_Countdown_20Sec();
 8000776:	f000 fa3f 	bl	8000bf8 <TM1637_Countdown_20Sec>
				  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_SET);
				  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_SET);
				  task_start_time = HAL_GetTick();
				  state = 4;
			  }
			  break;
 800077a:	e09b      	b.n	80008b4 <main+0x290>
				  printf("GPIO 3 5 6 enabled\n\r");
 800077c:	4b58      	ldr	r3, [pc, #352]	@ (80008e0 <main+0x2bc>)
 800077e:	0018      	movs	r0, r3
 8000780:	f002 fcce 	bl	8003120 <iprintf>
				  HAL_GPIO_WritePin(SIGNAL_3_GPIO_Port, SIGNAL_3_Pin, GPIO_PIN_SET);
 8000784:	2390      	movs	r3, #144	@ 0x90
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	2201      	movs	r2, #1
 800078a:	2104      	movs	r1, #4
 800078c:	0018      	movs	r0, r3
 800078e:	f001 fa39 	bl	8001c04 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_SET);
 8000792:	2390      	movs	r3, #144	@ 0x90
 8000794:	05db      	lsls	r3, r3, #23
 8000796:	2201      	movs	r2, #1
 8000798:	2110      	movs	r1, #16
 800079a:	0018      	movs	r0, r3
 800079c:	f001 fa32 	bl	8001c04 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_SET);
 80007a0:	2390      	movs	r3, #144	@ 0x90
 80007a2:	05db      	lsls	r3, r3, #23
 80007a4:	2201      	movs	r2, #1
 80007a6:	2140      	movs	r1, #64	@ 0x40
 80007a8:	0018      	movs	r0, r3
 80007aa:	f001 fa2b 	bl	8001c04 <HAL_GPIO_WritePin>
				  task_start_time = HAL_GetTick();
 80007ae:	f000 fd77 	bl	80012a0 <HAL_GetTick>
 80007b2:	0002      	movs	r2, r0
 80007b4:	4b42      	ldr	r3, [pc, #264]	@ (80008c0 <main+0x29c>)
 80007b6:	601a      	str	r2, [r3, #0]
				  state = 4;
 80007b8:	4b40      	ldr	r3, [pc, #256]	@ (80008bc <main+0x298>)
 80007ba:	2204      	movs	r2, #4
 80007bc:	701a      	strb	r2, [r3, #0]
			  break;
 80007be:	e079      	b.n	80008b4 <main+0x290>

		  case 4:
			  if (HAL_GetTick() - task_start_time >= 30000)
 80007c0:	f000 fd6e 	bl	80012a0 <HAL_GetTick>
 80007c4:	0002      	movs	r2, r0
 80007c6:	4b3e      	ldr	r3, [pc, #248]	@ (80008c0 <main+0x29c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	4a45      	ldr	r2, [pc, #276]	@ (80008e4 <main+0x2c0>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d96d      	bls.n	80008ae <main+0x28a>
			  {
				  printf("GPIO 3 5 6 disabled\n\r");
 80007d2:	4b45      	ldr	r3, [pc, #276]	@ (80008e8 <main+0x2c4>)
 80007d4:	0018      	movs	r0, r3
 80007d6:	f002 fca3 	bl	8003120 <iprintf>
				  HAL_GPIO_WritePin(SIGNAL_3_GPIO_Port, SIGNAL_3_Pin, GPIO_PIN_RESET);
 80007da:	2390      	movs	r3, #144	@ 0x90
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2200      	movs	r2, #0
 80007e0:	2104      	movs	r1, #4
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 fa0e 	bl	8001c04 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_RESET);
 80007e8:	2390      	movs	r3, #144	@ 0x90
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	2200      	movs	r2, #0
 80007ee:	2110      	movs	r1, #16
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 fa07 	bl	8001c04 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_RESET);
 80007f6:	2390      	movs	r3, #144	@ 0x90
 80007f8:	05db      	lsls	r3, r3, #23
 80007fa:	2200      	movs	r2, #0
 80007fc:	2140      	movs	r1, #64	@ 0x40
 80007fe:	0018      	movs	r0, r3
 8000800:	f001 fa00 	bl	8001c04 <HAL_GPIO_WritePin>
				  task_start_time = HAL_GetTick(); // Record the start time for the next state
 8000804:	f000 fd4c 	bl	80012a0 <HAL_GetTick>
 8000808:	0002      	movs	r2, r0
 800080a:	4b2d      	ldr	r3, [pc, #180]	@ (80008c0 <main+0x29c>)
 800080c:	601a      	str	r2, [r3, #0]
				  state = 5;
 800080e:	4b2b      	ldr	r3, [pc, #172]	@ (80008bc <main+0x298>)
 8000810:	2205      	movs	r2, #5
 8000812:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000814:	e04b      	b.n	80008ae <main+0x28a>

		  case 5: // Enable GPIO A & B for 5 seconds
			  printf("GPIO A & B enabled\n\r");
 8000816:	4b35      	ldr	r3, [pc, #212]	@ (80008ec <main+0x2c8>)
 8000818:	0018      	movs	r0, r3
 800081a:	f002 fc81 	bl	8003120 <iprintf>
			  HAL_GPIO_WritePin(SIGNAL_A_GPIO_Port, SIGNAL_A_Pin, GPIO_PIN_SET);
 800081e:	4b2d      	ldr	r3, [pc, #180]	@ (80008d4 <main+0x2b0>)
 8000820:	2201      	movs	r2, #1
 8000822:	2102      	movs	r1, #2
 8000824:	0018      	movs	r0, r3
 8000826:	f001 f9ed 	bl	8001c04 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SIGNAL_B_GPIO_Port, SIGNAL_B_Pin, GPIO_PIN_SET);
 800082a:	2380      	movs	r3, #128	@ 0x80
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	4829      	ldr	r0, [pc, #164]	@ (80008d4 <main+0x2b0>)
 8000830:	2201      	movs	r2, #1
 8000832:	0019      	movs	r1, r3
 8000834:	f001 f9e6 	bl	8001c04 <HAL_GPIO_WritePin>
			  HAL_Delay(5000);
 8000838:	4b2d      	ldr	r3, [pc, #180]	@ (80008f0 <main+0x2cc>)
 800083a:	0018      	movs	r0, r3
 800083c:	f000 fd3a 	bl	80012b4 <HAL_Delay>
			  printf("GPIO A & B disabled\n\r");
 8000840:	4b2c      	ldr	r3, [pc, #176]	@ (80008f4 <main+0x2d0>)
 8000842:	0018      	movs	r0, r3
 8000844:	f002 fc6c 	bl	8003120 <iprintf>
			  HAL_GPIO_WritePin(SIGNAL_A_GPIO_Port, SIGNAL_A_Pin, GPIO_PIN_RESET);
 8000848:	4b22      	ldr	r3, [pc, #136]	@ (80008d4 <main+0x2b0>)
 800084a:	2200      	movs	r2, #0
 800084c:	2102      	movs	r1, #2
 800084e:	0018      	movs	r0, r3
 8000850:	f001 f9d8 	bl	8001c04 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SIGNAL_B_GPIO_Port, SIGNAL_B_Pin, GPIO_PIN_RESET);
 8000854:	2380      	movs	r3, #128	@ 0x80
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	481e      	ldr	r0, [pc, #120]	@ (80008d4 <main+0x2b0>)
 800085a:	2200      	movs	r2, #0
 800085c:	0019      	movs	r1, r3
 800085e:	f001 f9d1 	bl	8001c04 <HAL_GPIO_WritePin>
			  task_start_time = HAL_GetTick(); // Record the start time for the next state
 8000862:	f000 fd1d 	bl	80012a0 <HAL_GetTick>
 8000866:	0002      	movs	r2, r0
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <main+0x29c>)
 800086a:	601a      	str	r2, [r3, #0]
			  state = 6;
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <main+0x298>)
 800086e:	2206      	movs	r2, #6
 8000870:	701a      	strb	r2, [r3, #0]
			  break;
 8000872:	e01f      	b.n	80008b4 <main+0x290>

		  case 6: // Clear display and wait for 2 minutes
			  TM1637_DisplayClear();
 8000874:	f000 faac 	bl	8000dd0 <TM1637_DisplayClear>
			  if (HAL_GetTick() - task_start_time >= 90000) // Wait for 2 minutes
 8000878:	f000 fd12 	bl	80012a0 <HAL_GetTick>
 800087c:	0002      	movs	r2, r0
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <main+0x29c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	4a1c      	ldr	r2, [pc, #112]	@ (80008f8 <main+0x2d4>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d913      	bls.n	80008b2 <main+0x28e>
			  {
				  printf("return to IDLE\n\r");
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <main+0x2b8>)
 800088c:	0018      	movs	r0, r3
 800088e:	f002 fc47 	bl	8003120 <iprintf>
				  state = 0; // Return to the initial state
 8000892:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <main+0x298>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000898:	e00b      	b.n	80008b2 <main+0x28e>

		  default:
			  state = 0; // Fallback to the initial state
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <main+0x298>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
			  break;
 80008a0:	e008      	b.n	80008b4 <main+0x290>
			  break;
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	e6d4      	b.n	8000650 <main+0x2c>
			  break;
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	e6d2      	b.n	8000650 <main+0x2c>
			  break;
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	e6d0      	b.n	8000650 <main+0x2c>
			  break;
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	e6ce      	b.n	8000650 <main+0x2c>
			  break;
 80008b2:	46c0      	nop			@ (mov r8, r8)
	  switch (state)
 80008b4:	e6cc      	b.n	8000650 <main+0x2c>
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	08003e74 	.word	0x08003e74
 80008bc:	2000016c 	.word	0x2000016c
 80008c0:	20000170 	.word	0x20000170
 80008c4:	08003f1c 	.word	0x08003f1c
 80008c8:	20000161 	.word	0x20000161
 80008cc:	20000174 	.word	0x20000174
 80008d0:	20000160 	.word	0x20000160
 80008d4:	48000400 	.word	0x48000400
 80008d8:	00004e1f 	.word	0x00004e1f
 80008dc:	08003e84 	.word	0x08003e84
 80008e0:	08003e98 	.word	0x08003e98
 80008e4:	0000752f 	.word	0x0000752f
 80008e8:	08003eb0 	.word	0x08003eb0
 80008ec:	08003ec8 	.word	0x08003ec8
 80008f0:	00001388 	.word	0x00001388
 80008f4:	08003ee0 	.word	0x08003ee0
 80008f8:	00015f8f 	.word	0x00015f8f

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b095      	sub	sp, #84	@ 0x54
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	2420      	movs	r4, #32
 8000904:	193b      	adds	r3, r7, r4
 8000906:	0018      	movs	r0, r3
 8000908:	2330      	movs	r3, #48	@ 0x30
 800090a:	001a      	movs	r2, r3
 800090c:	2100      	movs	r1, #0
 800090e:	f002 fc63 	bl	80031d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000912:	2310      	movs	r3, #16
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	0018      	movs	r0, r3
 8000918:	2310      	movs	r3, #16
 800091a:	001a      	movs	r2, r3
 800091c:	2100      	movs	r1, #0
 800091e:	f002 fc5b 	bl	80031d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000922:	003b      	movs	r3, r7
 8000924:	0018      	movs	r0, r3
 8000926:	2310      	movs	r3, #16
 8000928:	001a      	movs	r2, r3
 800092a:	2100      	movs	r1, #0
 800092c:	f002 fc54 	bl	80031d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000930:	0021      	movs	r1, r4
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2212      	movs	r2, #18
 8000936:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2201      	movs	r2, #1
 800093c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2201      	movs	r2, #1
 8000942:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2210      	movs	r2, #16
 8000948:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2210      	movs	r2, #16
 800094e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000956:	187b      	adds	r3, r7, r1
 8000958:	0018      	movs	r0, r3
 800095a:	f001 f98d 	bl	8001c78 <HAL_RCC_OscConfig>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000962:	f000 fa91 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000966:	2110      	movs	r1, #16
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2207      	movs	r2, #7
 800096c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2100      	movs	r1, #0
 8000984:	0018      	movs	r0, r3
 8000986:	f001 fc91 	bl	80022ac <HAL_RCC_ClockConfig>
 800098a:	1e03      	subs	r3, r0, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800098e:	f000 fa7b 	bl	8000e88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000992:	003b      	movs	r3, r7
 8000994:	2201      	movs	r2, #1
 8000996:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000998:	003b      	movs	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800099e:	003b      	movs	r3, r7
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 fdc7 	bl	8002534 <HAL_RCCEx_PeriphCLKConfig>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80009aa:	f000 fa6d 	bl	8000e88 <Error_Handler>
  }
}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b015      	add	sp, #84	@ 0x54
 80009b4:	bd90      	pop	{r4, r7, pc}
	...

080009b8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	0018      	movs	r0, r3
 80009c2:	230c      	movs	r3, #12
 80009c4:	001a      	movs	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f002 fc06 	bl	80031d8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80009cc:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <MX_ADC_Init+0xb0>)
 80009ce:	4a27      	ldr	r2, [pc, #156]	@ (8000a6c <MX_ADC_Init+0xb4>)
 80009d0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009d2:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <MX_ADC_Init+0xb0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80009d8:	4b23      	ldr	r3, [pc, #140]	@ (8000a68 <MX_ADC_Init+0xb0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009de:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <MX_ADC_Init+0xb0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80009e4:	4b20      	ldr	r3, [pc, #128]	@ (8000a68 <MX_ADC_Init+0xb0>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <MX_ADC_Init+0xb0>)
 80009ec:	2204      	movs	r2, #4
 80009ee:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a68 <MX_ADC_Init+0xb0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <MX_ADC_Init+0xb0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <MX_ADC_Init+0xb0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <MX_ADC_Init+0xb0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <MX_ADC_Init+0xb0>)
 8000a0a:	22c2      	movs	r2, #194	@ 0xc2
 8000a0c:	32ff      	adds	r2, #255	@ 0xff
 8000a0e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a10:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <MX_ADC_Init+0xb0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000a16:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_ADC_Init+0xb0>)
 8000a18:	2224      	movs	r2, #36	@ 0x24
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <MX_ADC_Init+0xb0>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a24:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <MX_ADC_Init+0xb0>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 fc68 	bl	80012fc <HAL_ADC_Init>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 fa2a 	bl	8000e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2208      	movs	r2, #8
 8000a38:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2280      	movs	r2, #128	@ 0x80
 8000a3e:	0152      	lsls	r2, r2, #5
 8000a40:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2280      	movs	r2, #128	@ 0x80
 8000a46:	0552      	lsls	r2, r2, #21
 8000a48:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a4a:	1d3a      	adds	r2, r7, #4
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_ADC_Init+0xb0>)
 8000a4e:	0011      	movs	r1, r2
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 fd93 	bl	800157c <HAL_ADC_ConfigChannel>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000a5a:	f000 fa15 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b004      	add	sp, #16
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	20000098 	.word	0x20000098
 8000a6c:	40012400 	.word	0x40012400

08000a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a74:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a76:	4a15      	ldr	r2, [pc, #84]	@ (8000acc <MX_USART1_UART_Init+0x5c>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a7c:	22e1      	movs	r2, #225	@ 0xe1
 8000a7e:	0252      	lsls	r2, r2, #9
 8000a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ab2:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <MX_USART1_UART_Init+0x58>)
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f001 fe0b 	bl	80026d0 <HAL_UART_Init>
 8000aba:	1e03      	subs	r3, r0, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000abe:	f000 f9e3 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200000d8 	.word	0x200000d8
 8000acc:	40013800 	.word	0x40013800

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b089      	sub	sp, #36	@ 0x24
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	240c      	movs	r4, #12
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	0018      	movs	r0, r3
 8000adc:	2314      	movs	r3, #20
 8000ade:	001a      	movs	r2, r3
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	f002 fb79 	bl	80031d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b40      	ldr	r3, [pc, #256]	@ (8000be8 <MX_GPIO_Init+0x118>)
 8000ae8:	695a      	ldr	r2, [r3, #20]
 8000aea:	4b3f      	ldr	r3, [pc, #252]	@ (8000be8 <MX_GPIO_Init+0x118>)
 8000aec:	2180      	movs	r1, #128	@ 0x80
 8000aee:	0289      	lsls	r1, r1, #10
 8000af0:	430a      	orrs	r2, r1
 8000af2:	615a      	str	r2, [r3, #20]
 8000af4:	4b3c      	ldr	r3, [pc, #240]	@ (8000be8 <MX_GPIO_Init+0x118>)
 8000af6:	695a      	ldr	r2, [r3, #20]
 8000af8:	2380      	movs	r3, #128	@ 0x80
 8000afa:	029b      	lsls	r3, r3, #10
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b39      	ldr	r3, [pc, #228]	@ (8000be8 <MX_GPIO_Init+0x118>)
 8000b04:	695a      	ldr	r2, [r3, #20]
 8000b06:	4b38      	ldr	r3, [pc, #224]	@ (8000be8 <MX_GPIO_Init+0x118>)
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	02c9      	lsls	r1, r1, #11
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	615a      	str	r2, [r3, #20]
 8000b10:	4b35      	ldr	r3, [pc, #212]	@ (8000be8 <MX_GPIO_Init+0x118>)
 8000b12:	695a      	ldr	r2, [r3, #20]
 8000b14:	2380      	movs	r3, #128	@ 0x80
 8000b16:	02db      	lsls	r3, r3, #11
 8000b18:	4013      	ands	r3, r2
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIGNAL_1_Pin|SIGNAL_2_Pin|SIGNAL_3_Pin|SIGNAL_4_Pin
 8000b1e:	2390      	movs	r3, #144	@ 0x90
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	2200      	movs	r2, #0
 8000b24:	21ff      	movs	r1, #255	@ 0xff
 8000b26:	0018      	movs	r0, r3
 8000b28:	f001 f86c 	bl	8001c04 <HAL_GPIO_WritePin>
                          |SIGNAL_5_Pin|SIGNAL_6_Pin|SIGNAL_7_Pin|SIGNAL_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIGNAL_A_Pin|SIGNAL_B_Pin|REL_SIG_1_Pin|CLK_Pin
 8000b2c:	492f      	ldr	r1, [pc, #188]	@ (8000bec <MX_GPIO_Init+0x11c>)
 8000b2e:	4b30      	ldr	r3, [pc, #192]	@ (8000bf0 <MX_GPIO_Init+0x120>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	0018      	movs	r0, r3
 8000b34:	f001 f866 	bl	8001c04 <HAL_GPIO_WritePin>
                          |DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SIGNAL_1_Pin SIGNAL_2_Pin SIGNAL_3_Pin SIGNAL_4_Pin
                           SIGNAL_5_Pin SIGNAL_6_Pin SIGNAL_7_Pin SIGNAL_8_Pin */
  GPIO_InitStruct.Pin = SIGNAL_1_Pin|SIGNAL_2_Pin|SIGNAL_3_Pin|SIGNAL_4_Pin
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	22ff      	movs	r2, #255	@ 0xff
 8000b3c:	601a      	str	r2, [r3, #0]
                          |SIGNAL_5_Pin|SIGNAL_6_Pin|SIGNAL_7_Pin|SIGNAL_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	2201      	movs	r2, #1
 8000b42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	193a      	adds	r2, r7, r4
 8000b52:	2390      	movs	r3, #144	@ 0x90
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	0011      	movs	r1, r2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 fee3 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGNAL_A_Pin SIGNAL_B_Pin REL_SIG_1_Pin */
  GPIO_InitStruct.Pin = SIGNAL_A_Pin|SIGNAL_B_Pin|REL_SIG_1_Pin;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	4a24      	ldr	r2, [pc, #144]	@ (8000bf4 <MX_GPIO_Init+0x124>)
 8000b62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	2201      	movs	r2, #1
 8000b68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf0 <MX_GPIO_Init+0x120>)
 8000b7a:	0019      	movs	r1, r3
 8000b7c:	0010      	movs	r0, r2
 8000b7e:	f000 fed1 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : COIN_Pin */
  GPIO_InitStruct.Pin = COIN_Pin;
 8000b82:	0021      	movs	r1, r4
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2280      	movs	r2, #128	@ 0x80
 8000b88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2288      	movs	r2, #136	@ 0x88
 8000b8e:	0352      	lsls	r2, r2, #13
 8000b90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2201      	movs	r2, #1
 8000b96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(COIN_GPIO_Port, &GPIO_InitStruct);
 8000b98:	000c      	movs	r4, r1
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	4a14      	ldr	r2, [pc, #80]	@ (8000bf0 <MX_GPIO_Init+0x120>)
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	0010      	movs	r0, r2
 8000ba2:	f000 febf 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DATA_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin;
 8000ba6:	0021      	movs	r1, r4
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	22c0      	movs	r2, #192	@ 0xc0
 8000bac:	0092      	lsls	r2, r2, #2
 8000bae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf0 <MX_GPIO_Init+0x120>)
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	0010      	movs	r0, r2
 8000bca:	f000 feab 	bl	8001924 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2007      	movs	r0, #7
 8000bd4:	f000 fe74 	bl	80018c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000bd8:	2007      	movs	r0, #7
 8000bda:	f000 fe86 	bl	80018ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bde:	46c0      	nop			@ (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b009      	add	sp, #36	@ 0x24
 8000be4:	bd90      	pop	{r4, r7, pc}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	40021000 	.word	0x40021000
 8000bec:	00000f02 	.word	0x00000f02
 8000bf0:	48000400 	.word	0x48000400
 8000bf4:	00000c02 	.word	0x00000c02

08000bf8 <TM1637_Countdown_20Sec>:

/* USER CODE BEGIN 4 */

void TM1637_Countdown_20Sec(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
	static bool colon_state = false;
	static int countdown_seconds = 20;
	static uint32_t last_update_time = 0;
	uint8_t display_data[4] = {0x00, 0x00, 0x00, 0x00};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
    if ((current_time_ms - last_update_time) >= 1000)
 8000c04:	4b34      	ldr	r3, [pc, #208]	@ (8000cd8 <TM1637_Countdown_20Sec+0xe0>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b34      	ldr	r3, [pc, #208]	@ (8000cdc <TM1637_Countdown_20Sec+0xe4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	1ad2      	subs	r2, r2, r3
 8000c0e:	23fa      	movs	r3, #250	@ 0xfa
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d35b      	bcc.n	8000cce <TM1637_Countdown_20Sec+0xd6>
    {
        last_update_time = current_time_ms;
 8000c16:	4b30      	ldr	r3, [pc, #192]	@ (8000cd8 <TM1637_Countdown_20Sec+0xe0>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	4b30      	ldr	r3, [pc, #192]	@ (8000cdc <TM1637_Countdown_20Sec+0xe4>)
 8000c1c:	601a      	str	r2, [r3, #0]
        colon_state = !colon_state;
 8000c1e:	4b30      	ldr	r3, [pc, #192]	@ (8000ce0 <TM1637_Countdown_20Sec+0xe8>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	1e5a      	subs	r2, r3, #1
 8000c24:	4193      	sbcs	r3, r2
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4053      	eors	r3, r2
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	1c1a      	adds	r2, r3, #0
 8000c30:	2301      	movs	r3, #1
 8000c32:	4013      	ands	r3, r2
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce0 <TM1637_Countdown_20Sec+0xe8>)
 8000c38:	701a      	strb	r2, [r3, #0]

        display_data[0] = digit_map[0];
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce4 <TM1637_Countdown_20Sec+0xec>)
 8000c3c:	781a      	ldrb	r2, [r3, #0]
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	701a      	strb	r2, [r3, #0]
		display_data[1] = digit_map[0];
 8000c42:	4b28      	ldr	r3, [pc, #160]	@ (8000ce4 <TM1637_Countdown_20Sec+0xec>)
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	705a      	strb	r2, [r3, #1]
        display_data[2] = digit_map[(countdown_seconds / 10)];
 8000c4a:	4b27      	ldr	r3, [pc, #156]	@ (8000ce8 <TM1637_Countdown_20Sec+0xf0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	210a      	movs	r1, #10
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff faed 	bl	8000230 <__divsi3>
 8000c56:	0003      	movs	r3, r0
 8000c58:	001a      	movs	r2, r3
 8000c5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <TM1637_Countdown_20Sec+0xec>)
 8000c5c:	5c9a      	ldrb	r2, [r3, r2]
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	709a      	strb	r2, [r3, #2]
        display_data[3] = digit_map[(countdown_seconds % 10)];
 8000c62:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <TM1637_Countdown_20Sec+0xf0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	210a      	movs	r1, #10
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff fbc7 	bl	80003fc <__aeabi_idivmod>
 8000c6e:	000b      	movs	r3, r1
 8000c70:	001a      	movs	r2, r3
 8000c72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <TM1637_Countdown_20Sec+0xec>)
 8000c74:	5c9a      	ldrb	r2, [r3, r2]
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	70da      	strb	r2, [r3, #3]

        if (colon_state)
 8000c7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <TM1637_Countdown_20Sec+0xe8>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d008      	beq.n	8000c94 <TM1637_Countdown_20Sec+0x9c>
        {
			display_data[1] |= 0x80;
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	785b      	ldrb	r3, [r3, #1]
 8000c86:	2280      	movs	r2, #128	@ 0x80
 8000c88:	4252      	negs	r2, r2
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	705a      	strb	r2, [r3, #1]
 8000c92:	e003      	b.n	8000c9c <TM1637_Countdown_20Sec+0xa4>
		} else
		{
			display_data[1] |= 0x00;
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	785a      	ldrb	r2, [r3, #1]
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	705a      	strb	r2, [r3, #1]
		}
        TM1637_WriteData(0xC0, display_data, 4);
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2204      	movs	r2, #4
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	20c0      	movs	r0, #192	@ 0xc0
 8000ca4:	f7ff fc80 	bl	80005a8 <TM1637_WriteData>
        printf("Countdown: %02d seconds\n", countdown_seconds);
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <TM1637_Countdown_20Sec+0xf0>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <TM1637_Countdown_20Sec+0xf4>)
 8000cae:	0011      	movs	r1, r2
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f002 fa35 	bl	8003120 <iprintf>
        countdown_seconds--;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <TM1637_Countdown_20Sec+0xf0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	1e5a      	subs	r2, r3, #1
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <TM1637_Countdown_20Sec+0xf0>)
 8000cbe:	601a      	str	r2, [r3, #0]
        if (countdown_seconds < 0) {
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <TM1637_Countdown_20Sec+0xf0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	da02      	bge.n	8000cce <TM1637_Countdown_20Sec+0xd6>
            countdown_seconds = 20;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <TM1637_Countdown_20Sec+0xf0>)
 8000cca:	2214      	movs	r2, #20
 8000ccc:	601a      	str	r2, [r3, #0]
        }
    }
}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	20000164 	.word	0x20000164
 8000cdc:	20000178 	.word	0x20000178
 8000ce0:	2000017c 	.word	0x2000017c
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000010 	.word	0x20000010
 8000cec:	08003ef8 	.word	0x08003ef8

08000cf0 <Display_fifty>:

void Display_fifty(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
	uint8_t data[4] = {0x00, digit_map[5], digit_map[0], digit_map[10]};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <Display_fifty+0x38>)
 8000cfe:	795a      	ldrb	r2, [r3, #5]
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	705a      	strb	r2, [r3, #1]
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <Display_fifty+0x38>)
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	709a      	strb	r2, [r3, #2]
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <Display_fifty+0x38>)
 8000d0e:	7a9a      	ldrb	r2, [r3, #10]
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	70da      	strb	r2, [r3, #3]
	TM1637_WriteData(0xC0, data, 4);
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2204      	movs	r2, #4
 8000d18:	0019      	movs	r1, r3
 8000d1a:	20c0      	movs	r0, #192	@ 0xc0
 8000d1c:	f7ff fc44 	bl	80005a8 <TM1637_WriteData>
}
 8000d20:	46c0      	nop			@ (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000000 	.word	0x20000000

08000d2c <Display_1dhiram>:

void Display_1dhiram(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
	uint8_t data[4] = {0x00, 0x00, digit_map[1], digit_map[11]};
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	705a      	strb	r2, [r3, #1]
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <Display_1dhiram+0x38>)
 8000d40:	785a      	ldrb	r2, [r3, #1]
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	709a      	strb	r2, [r3, #2]
 8000d46:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <Display_1dhiram+0x38>)
 8000d48:	7ada      	ldrb	r2, [r3, #11]
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	70da      	strb	r2, [r3, #3]
	TM1637_WriteData(0xC0, data, 4);
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2204      	movs	r2, #4
 8000d52:	0019      	movs	r1, r3
 8000d54:	20c0      	movs	r0, #192	@ 0xc0
 8000d56:	f7ff fc27 	bl	80005a8 <TM1637_WriteData>
}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	20000000 	.word	0x20000000

08000d68 <DisplayDashes>:
	uint8_t data[4] = {0x00, 0x00, digit_map[2], digit_map[11]};
	TM1637_WriteData(0xC0, data, 4);
}

void DisplayDashes(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
    uint8_t data[4] = {digit_map[12],digit_map[12], digit_map[12], digit_map[12]};
 8000d6e:	4b17      	ldr	r3, [pc, #92]	@ (8000dcc <DisplayDashes+0x64>)
 8000d70:	7b1a      	ldrb	r2, [r3, #12]
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	701a      	strb	r2, [r3, #0]
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <DisplayDashes+0x64>)
 8000d78:	7b1a      	ldrb	r2, [r3, #12]
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	705a      	strb	r2, [r3, #1]
 8000d7e:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <DisplayDashes+0x64>)
 8000d80:	7b1a      	ldrb	r2, [r3, #12]
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	709a      	strb	r2, [r3, #2]
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <DisplayDashes+0x64>)
 8000d88:	7b1a      	ldrb	r2, [r3, #12]
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	70da      	strb	r2, [r3, #3]
    TM1637_WriteData(0xC0, data, 4);
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2204      	movs	r2, #4
 8000d92:	0019      	movs	r1, r3
 8000d94:	20c0      	movs	r0, #192	@ 0xc0
 8000d96:	f7ff fc07 	bl	80005a8 <TM1637_WriteData>
    //printf("Display Dashes\n\r");
    HAL_GPIO_WritePin(SIGNAL_4_GPIO_Port, SIGNAL_4_Pin, GPIO_PIN_SET);
 8000d9a:	2390      	movs	r3, #144	@ 0x90
 8000d9c:	05db      	lsls	r3, r3, #23
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2108      	movs	r1, #8
 8000da2:	0018      	movs	r0, r3
 8000da4:	f000 ff2e 	bl	8001c04 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_SET);
 8000da8:	2390      	movs	r3, #144	@ 0x90
 8000daa:	05db      	lsls	r3, r3, #23
 8000dac:	2201      	movs	r2, #1
 8000dae:	2110      	movs	r1, #16
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 ff27 	bl	8001c04 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SIGNAL_6_GPIO_Port, SIGNAL_6_Pin, GPIO_PIN_SET);
 8000db6:	2390      	movs	r3, #144	@ 0x90
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2120      	movs	r1, #32
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 ff20 	bl	8001c04 <HAL_GPIO_WritePin>
}
 8000dc4:	46c0      	nop			@ (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000000 	.word	0x20000000

08000dd0 <TM1637_DisplayClear>:

void TM1637_DisplayClear(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	uint8_t data[4] = {0x00, 0x00, 0x00, 0x00};
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
	TM1637_WriteData(0xC0, data, 4);
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2204      	movs	r2, #4
 8000de0:	0019      	movs	r1, r3
 8000de2:	20c0      	movs	r0, #192	@ 0xc0
 8000de4:	f7ff fbe0 	bl	80005a8 <TM1637_WriteData>
}
 8000de8:	46c0      	nop			@ (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <__io_putchar>:

#ifdef __GNUC__
#define UART_printf   int __io_putchar(int ch)
UART_printf
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000df8:	2301      	movs	r3, #1
 8000dfa:	425b      	negs	r3, r3
 8000dfc:	1d39      	adds	r1, r7, #4
 8000dfe:	4804      	ldr	r0, [pc, #16]	@ (8000e10 <__io_putchar+0x20>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	f001 fcb9 	bl	8002778 <HAL_UART_Transmit>
	return ch;
 8000e06:	687b      	ldr	r3, [r7, #4]
}
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b002      	add	sp, #8
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200000d8 	.word	0x200000d8

08000e14 <HAL_GPIO_EXTI_Callback>:
#endif



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	1dbb      	adds	r3, r7, #6
 8000e1e:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == COIN_Pin)
 8000e20:	1dbb      	adds	r3, r7, #6
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	2b80      	cmp	r3, #128	@ 0x80
 8000e26:	d123      	bne.n	8000e70 <HAL_GPIO_EXTI_Callback+0x5c>
    {
    	pulse_interrupt_Flag = 1;
 8000e28:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <HAL_GPIO_EXTI_Callback+0x64>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
        coin_pulse_count++;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <HAL_GPIO_EXTI_Callback+0x68>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <HAL_GPIO_EXTI_Callback+0x68>)
 8000e36:	601a      	str	r2, [r3, #0]
        printf("%lu\n\r", coin_pulse_count);
 8000e38:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <HAL_GPIO_EXTI_Callback+0x68>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f002 f96d 	bl	8003120 <iprintf>
        if(coin_pulse_count == 1){
 8000e46:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <HAL_GPIO_EXTI_Callback+0x68>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d106      	bne.n	8000e5c <HAL_GPIO_EXTI_Callback+0x48>
        	coin_pulse = 1;
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0x70>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
        	coin_pulse_count = 0;
 8000e54:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <HAL_GPIO_EXTI_Callback+0x68>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
        {
        	coin_pulse = 2;
        	coin_pulse_count = 0;
        }
    }
}
 8000e5a:	e009      	b.n	8000e70 <HAL_GPIO_EXTI_Callback+0x5c>
        else if(coin_pulse_count == 2)
 8000e5c:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <HAL_GPIO_EXTI_Callback+0x68>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d105      	bne.n	8000e70 <HAL_GPIO_EXTI_Callback+0x5c>
        	coin_pulse = 2;
 8000e64:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0x70>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	701a      	strb	r2, [r3, #0]
        	coin_pulse_count = 0;
 8000e6a:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <HAL_GPIO_EXTI_Callback+0x68>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b002      	add	sp, #8
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000161 	.word	0x20000161
 8000e7c:	20000168 	.word	0x20000168
 8000e80:	08003f14 	.word	0x08003f14
 8000e84:	20000174 	.word	0x20000174

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	46c0      	nop			@ (mov r8, r8)
 8000e92:	e7fd      	b.n	8000e90 <Error_Handler+0x8>

08000e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <HAL_MspInit+0x44>)
 8000e9c:	699a      	ldr	r2, [r3, #24]
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <HAL_MspInit+0x44>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	619a      	str	r2, [r3, #24]
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <HAL_MspInit+0x44>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4013      	ands	r3, r2
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <HAL_MspInit+0x44>)
 8000eb4:	69da      	ldr	r2, [r3, #28]
 8000eb6:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <HAL_MspInit+0x44>)
 8000eb8:	2180      	movs	r1, #128	@ 0x80
 8000eba:	0549      	lsls	r1, r1, #21
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	61da      	str	r2, [r3, #28]
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <HAL_MspInit+0x44>)
 8000ec2:	69da      	ldr	r2, [r3, #28]
 8000ec4:	2380      	movs	r3, #128	@ 0x80
 8000ec6:	055b      	lsls	r3, r3, #21
 8000ec8:	4013      	ands	r3, r2
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b08b      	sub	sp, #44	@ 0x2c
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	2414      	movs	r4, #20
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	0018      	movs	r0, r3
 8000eea:	2314      	movs	r3, #20
 8000eec:	001a      	movs	r2, r3
 8000eee:	2100      	movs	r1, #0
 8000ef0:	f002 f972 	bl	80031d8 <memset>
  if(hadc->Instance==ADC1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a18      	ldr	r2, [pc, #96]	@ (8000f5c <HAL_ADC_MspInit+0x80>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d12a      	bne.n	8000f54 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000efe:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <HAL_ADC_MspInit+0x84>)
 8000f00:	699a      	ldr	r2, [r3, #24]
 8000f02:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <HAL_ADC_MspInit+0x84>)
 8000f04:	2180      	movs	r1, #128	@ 0x80
 8000f06:	0089      	lsls	r1, r1, #2
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	619a      	str	r2, [r3, #24]
 8000f0c:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <HAL_ADC_MspInit+0x84>)
 8000f0e:	699a      	ldr	r2, [r3, #24]
 8000f10:	2380      	movs	r3, #128	@ 0x80
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <HAL_ADC_MspInit+0x84>)
 8000f1c:	695a      	ldr	r2, [r3, #20]
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <HAL_ADC_MspInit+0x84>)
 8000f20:	2180      	movs	r1, #128	@ 0x80
 8000f22:	02c9      	lsls	r1, r1, #11
 8000f24:	430a      	orrs	r2, r1
 8000f26:	615a      	str	r2, [r3, #20]
 8000f28:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <HAL_ADC_MspInit+0x84>)
 8000f2a:	695a      	ldr	r2, [r3, #20]
 8000f2c:	2380      	movs	r3, #128	@ 0x80
 8000f2e:	02db      	lsls	r3, r3, #11
 8000f30:	4013      	ands	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = ADC_ADJ_Pin;
 8000f36:	193b      	adds	r3, r7, r4
 8000f38:	2201      	movs	r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3c:	193b      	adds	r3, r7, r4
 8000f3e:	2203      	movs	r2, #3
 8000f40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	193b      	adds	r3, r7, r4
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_ADJ_GPIO_Port, &GPIO_InitStruct);
 8000f48:	193b      	adds	r3, r7, r4
 8000f4a:	4a06      	ldr	r2, [pc, #24]	@ (8000f64 <HAL_ADC_MspInit+0x88>)
 8000f4c:	0019      	movs	r1, r3
 8000f4e:	0010      	movs	r0, r2
 8000f50:	f000 fce8 	bl	8001924 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f54:	46c0      	nop			@ (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b00b      	add	sp, #44	@ 0x2c
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	40012400 	.word	0x40012400
 8000f60:	40021000 	.word	0x40021000
 8000f64:	48000400 	.word	0x48000400

08000f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b08b      	sub	sp, #44	@ 0x2c
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	2414      	movs	r4, #20
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	0018      	movs	r0, r3
 8000f76:	2314      	movs	r3, #20
 8000f78:	001a      	movs	r2, r3
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	f002 f92c 	bl	80031d8 <memset>
  if(huart->Instance==USART1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a1d      	ldr	r2, [pc, #116]	@ (8000ffc <HAL_UART_MspInit+0x94>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d133      	bne.n	8000ff2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <HAL_UART_MspInit+0x98>)
 8000f8c:	699a      	ldr	r2, [r3, #24]
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <HAL_UART_MspInit+0x98>)
 8000f90:	2180      	movs	r1, #128	@ 0x80
 8000f92:	01c9      	lsls	r1, r1, #7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	619a      	str	r2, [r3, #24]
 8000f98:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <HAL_UART_MspInit+0x98>)
 8000f9a:	699a      	ldr	r2, [r3, #24]
 8000f9c:	2380      	movs	r3, #128	@ 0x80
 8000f9e:	01db      	lsls	r3, r3, #7
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <HAL_UART_MspInit+0x98>)
 8000fa8:	695a      	ldr	r2, [r3, #20]
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <HAL_UART_MspInit+0x98>)
 8000fac:	2180      	movs	r1, #128	@ 0x80
 8000fae:	0289      	lsls	r1, r1, #10
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	615a      	str	r2, [r3, #20]
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_UART_MspInit+0x98>)
 8000fb6:	695a      	ldr	r2, [r3, #20]
 8000fb8:	2380      	movs	r3, #128	@ 0x80
 8000fba:	029b      	lsls	r3, r3, #10
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	22c0      	movs	r2, #192	@ 0xc0
 8000fc6:	00d2      	lsls	r2, r2, #3
 8000fc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	0021      	movs	r1, r4
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2202      	movs	r2, #2
 8000fd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	187a      	adds	r2, r7, r1
 8000fe6:	2390      	movs	r3, #144	@ 0x90
 8000fe8:	05db      	lsls	r3, r3, #23
 8000fea:	0011      	movs	r1, r2
 8000fec:	0018      	movs	r0, r3
 8000fee:	f000 fc99 	bl	8001924 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b00b      	add	sp, #44	@ 0x2c
 8000ff8:	bd90      	pop	{r4, r7, pc}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	40013800 	.word	0x40013800
 8001000:	40021000 	.word	0x40021000

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	e7fd      	b.n	8001008 <NMI_Handler+0x4>

0800100c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001010:	46c0      	nop			@ (mov r8, r8)
 8001012:	e7fd      	b.n	8001010 <HardFault_Handler+0x4>

08001014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001018:	46c0      	nop			@ (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102c:	f000 f926 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  current_time_ms++;
 8001030:	4b03      	ldr	r3, [pc, #12]	@ (8001040 <SysTick_Handler+0x18>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	4b02      	ldr	r3, [pc, #8]	@ (8001040 <SysTick_Handler+0x18>)
 8001038:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800103a:	46c0      	nop			@ (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000164 	.word	0x20000164

08001044 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COIN_Pin);
 8001048:	2080      	movs	r0, #128	@ 0x80
 800104a:	f000 fdf9 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e00a      	b.n	800107c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001066:	e000      	b.n	800106a <_read+0x16>
 8001068:	bf00      	nop
 800106a:	0001      	movs	r1, r0
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	60ba      	str	r2, [r7, #8]
 8001072:	b2ca      	uxtb	r2, r1
 8001074:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbf0      	blt.n	8001066 <_read+0x12>
  }

  return len;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b006      	add	sp, #24
 800108c:	bd80      	pop	{r7, pc}

0800108e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e009      	b.n	80010b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	60ba      	str	r2, [r7, #8]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff fea1 	bl	8000df0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	3301      	adds	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dbf1      	blt.n	80010a0 <_write+0x12>
  }
  return len;
 80010bc:	687b      	ldr	r3, [r7, #4]
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b006      	add	sp, #24
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_close>:

int _close(int file)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	425b      	negs	r3, r3
}
 80010d2:	0018      	movs	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b002      	add	sp, #8
 80010d8:	bd80      	pop	{r7, pc}

080010da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	2280      	movs	r2, #128	@ 0x80
 80010e8:	0192      	lsls	r2, r2, #6
 80010ea:	605a      	str	r2, [r3, #4]
  return 0;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_isatty>:

int _isatty(int file)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}

08001108 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001114:	2300      	movs	r3, #0
}
 8001116:	0018      	movs	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	b004      	add	sp, #16
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001128:	4a14      	ldr	r2, [pc, #80]	@ (800117c <_sbrk+0x5c>)
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <_sbrk+0x60>)
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001134:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <_sbrk+0x64>)
 800113e:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <_sbrk+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	18d3      	adds	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	429a      	cmp	r2, r3
 800114e:	d207      	bcs.n	8001160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001150:	f002 f898 	bl	8003284 <__errno>
 8001154:	0003      	movs	r3, r0
 8001156:	220c      	movs	r2, #12
 8001158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115a:	2301      	movs	r3, #1
 800115c:	425b      	negs	r3, r3
 800115e:	e009      	b.n	8001174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001166:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	18d2      	adds	r2, r2, r3
 800116e:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <_sbrk+0x64>)
 8001170:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b006      	add	sp, #24
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20002000 	.word	0x20002000
 8001180:	00000400 	.word	0x00000400
 8001184:	20000180 	.word	0x20000180
 8001188:	200002d8 	.word	0x200002d8

0800118c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001198:	480d      	ldr	r0, [pc, #52]	@ (80011d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800119a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800119c:	f7ff fff6 	bl	800118c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a0:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011a2:	490d      	ldr	r1, [pc, #52]	@ (80011d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a4:	4a0d      	ldr	r2, [pc, #52]	@ (80011dc <LoopForever+0xe>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b8:	4c0a      	ldr	r4, [pc, #40]	@ (80011e4 <LoopForever+0x16>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011c6:	f002 f863 	bl	8003290 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ca:	f7ff fa2b 	bl	8000624 <main>

080011ce <LoopForever>:

LoopForever:
    b LoopForever
 80011ce:	e7fe      	b.n	80011ce <LoopForever>
  ldr   r0, =_estack
 80011d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80011dc:	08003fac 	.word	0x08003fac
  ldr r2, =_sbss
 80011e0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80011e4:	200002d4 	.word	0x200002d4

080011e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC1_IRQHandler>
	...

080011ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <HAL_Init+0x24>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_Init+0x24>)
 80011f6:	2110      	movs	r1, #16
 80011f8:	430a      	orrs	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f000 f809 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001202:	f7ff fe47 	bl	8000e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <HAL_InitTick+0x5c>)
 800121e:	681c      	ldr	r4, [r3, #0]
 8001220:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <HAL_InitTick+0x60>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	0019      	movs	r1, r3
 8001226:	23fa      	movs	r3, #250	@ 0xfa
 8001228:	0098      	lsls	r0, r3, #2
 800122a:	f7fe ff77 	bl	800011c <__udivsi3>
 800122e:	0003      	movs	r3, r0
 8001230:	0019      	movs	r1, r3
 8001232:	0020      	movs	r0, r4
 8001234:	f7fe ff72 	bl	800011c <__udivsi3>
 8001238:	0003      	movs	r3, r0
 800123a:	0018      	movs	r0, r3
 800123c:	f000 fb65 	bl	800190a <HAL_SYSTICK_Config>
 8001240:	1e03      	subs	r3, r0, #0
 8001242:	d001      	beq.n	8001248 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e00f      	b.n	8001268 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d80b      	bhi.n	8001266 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	2301      	movs	r3, #1
 8001252:	425b      	negs	r3, r3
 8001254:	2200      	movs	r2, #0
 8001256:	0018      	movs	r0, r3
 8001258:	f000 fb32 	bl	80018c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_InitTick+0x64>)
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e000      	b.n	8001268 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
}
 8001268:	0018      	movs	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	b003      	add	sp, #12
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	20000014 	.word	0x20000014
 8001274:	2000001c 	.word	0x2000001c
 8001278:	20000018 	.word	0x20000018

0800127c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001280:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <HAL_IncTick+0x1c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	001a      	movs	r2, r3
 8001286:	4b05      	ldr	r3, [pc, #20]	@ (800129c <HAL_IncTick+0x20>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	18d2      	adds	r2, r2, r3
 800128c:	4b03      	ldr	r3, [pc, #12]	@ (800129c <HAL_IncTick+0x20>)
 800128e:	601a      	str	r2, [r3, #0]
}
 8001290:	46c0      	nop			@ (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	2000001c 	.word	0x2000001c
 800129c:	20000184 	.word	0x20000184

080012a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b02      	ldr	r3, [pc, #8]	@ (80012b0 <HAL_GetTick+0x10>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	0018      	movs	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			@ (mov r8, r8)
 80012b0:	20000184 	.word	0x20000184

080012b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff fff0 	bl	80012a0 <HAL_GetTick>
 80012c0:	0003      	movs	r3, r0
 80012c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	d005      	beq.n	80012da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <HAL_Delay+0x44>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	001a      	movs	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	189b      	adds	r3, r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	f7ff ffe0 	bl	80012a0 <HAL_GetTick>
 80012e0:	0002      	movs	r2, r0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d8f7      	bhi.n	80012dc <HAL_Delay+0x28>
  {
  }
}
 80012ec:	46c0      	nop			@ (mov r8, r8)
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b004      	add	sp, #16
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	2000001c 	.word	0x2000001c

080012fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001304:	230f      	movs	r3, #15
 8001306:	18fb      	adds	r3, r7, r3
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e125      	b.n	8001566 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10a      	bne.n	8001338 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2234      	movs	r2, #52	@ 0x34
 800132c:	2100      	movs	r1, #0
 800132e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	0018      	movs	r0, r3
 8001334:	f7ff fdd2 	bl	8000edc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800133c:	2210      	movs	r2, #16
 800133e:	4013      	ands	r3, r2
 8001340:	d000      	beq.n	8001344 <HAL_ADC_Init+0x48>
 8001342:	e103      	b.n	800154c <HAL_ADC_Init+0x250>
 8001344:	230f      	movs	r3, #15
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d000      	beq.n	8001350 <HAL_ADC_Init+0x54>
 800134e:	e0fd      	b.n	800154c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2204      	movs	r2, #4
 8001358:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800135a:	d000      	beq.n	800135e <HAL_ADC_Init+0x62>
 800135c:	e0f6      	b.n	800154c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001362:	4a83      	ldr	r2, [pc, #524]	@ (8001570 <HAL_ADC_Init+0x274>)
 8001364:	4013      	ands	r3, r2
 8001366:	2202      	movs	r2, #2
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2203      	movs	r2, #3
 8001376:	4013      	ands	r3, r2
 8001378:	2b01      	cmp	r3, #1
 800137a:	d112      	bne.n	80013a2 <HAL_ADC_Init+0xa6>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2201      	movs	r2, #1
 8001384:	4013      	ands	r3, r2
 8001386:	2b01      	cmp	r3, #1
 8001388:	d009      	beq.n	800139e <HAL_ADC_Init+0xa2>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	2380      	movs	r3, #128	@ 0x80
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	401a      	ands	r2, r3
 8001396:	2380      	movs	r3, #128	@ 0x80
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	429a      	cmp	r2, r3
 800139c:	d101      	bne.n	80013a2 <HAL_ADC_Init+0xa6>
 800139e:	2301      	movs	r3, #1
 80013a0:	e000      	b.n	80013a4 <HAL_ADC_Init+0xa8>
 80013a2:	2300      	movs	r3, #0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d116      	bne.n	80013d6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2218      	movs	r2, #24
 80013b0:	4393      	bics	r3, r2
 80013b2:	0019      	movs	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	0899      	lsrs	r1, r3, #2
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4964      	ldr	r1, [pc, #400]	@ (8001574 <HAL_ADC_Init+0x278>)
 80013e2:	400a      	ands	r2, r1
 80013e4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7e1b      	ldrb	r3, [r3, #24]
 80013ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7e5b      	ldrb	r3, [r3, #25]
 80013f0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7e9b      	ldrb	r3, [r3, #26]
 80013f8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80013fa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001400:	2b01      	cmp	r3, #1
 8001402:	d002      	beq.n	800140a <HAL_ADC_Init+0x10e>
 8001404:	2380      	movs	r3, #128	@ 0x80
 8001406:	015b      	lsls	r3, r3, #5
 8001408:	e000      	b.n	800140c <HAL_ADC_Init+0x110>
 800140a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800140c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001412:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d101      	bne.n	8001420 <HAL_ADC_Init+0x124>
 800141c:	2304      	movs	r3, #4
 800141e:	e000      	b.n	8001422 <HAL_ADC_Init+0x126>
 8001420:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001422:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2124      	movs	r1, #36	@ 0x24
 8001428:	5c5b      	ldrb	r3, [r3, r1]
 800142a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800142c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	4313      	orrs	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7edb      	ldrb	r3, [r3, #27]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d115      	bne.n	8001468 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7e9b      	ldrb	r3, [r3, #26]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d105      	bne.n	8001450 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	2280      	movs	r2, #128	@ 0x80
 8001448:	0252      	lsls	r2, r2, #9
 800144a:	4313      	orrs	r3, r2
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	e00b      	b.n	8001468 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001454:	2220      	movs	r2, #32
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001460:	2201      	movs	r2, #1
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69da      	ldr	r2, [r3, #28]
 800146c:	23c2      	movs	r3, #194	@ 0xc2
 800146e:	33ff      	adds	r3, #255	@ 0xff
 8001470:	429a      	cmp	r2, r3
 8001472:	d007      	beq.n	8001484 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800147c:	4313      	orrs	r3, r2
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	4313      	orrs	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68d9      	ldr	r1, [r3, #12]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	430a      	orrs	r2, r1
 8001492:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	055b      	lsls	r3, r3, #21
 800149c:	429a      	cmp	r2, r3
 800149e:	d01b      	beq.n	80014d8 <HAL_ADC_Init+0x1dc>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d017      	beq.n	80014d8 <HAL_ADC_Init+0x1dc>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d013      	beq.n	80014d8 <HAL_ADC_Init+0x1dc>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d00f      	beq.n	80014d8 <HAL_ADC_Init+0x1dc>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d00b      	beq.n	80014d8 <HAL_ADC_Init+0x1dc>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	d007      	beq.n	80014d8 <HAL_ADC_Init+0x1dc>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014cc:	2b06      	cmp	r3, #6
 80014ce:	d003      	beq.n	80014d8 <HAL_ADC_Init+0x1dc>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d4:	2b07      	cmp	r3, #7
 80014d6:	d112      	bne.n	80014fe <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2107      	movs	r1, #7
 80014e4:	438a      	bics	r2, r1
 80014e6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6959      	ldr	r1, [r3, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f2:	2207      	movs	r2, #7
 80014f4:	401a      	ands	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4a1c      	ldr	r2, [pc, #112]	@ (8001578 <HAL_ADC_Init+0x27c>)
 8001506:	4013      	ands	r3, r2
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	429a      	cmp	r2, r3
 800150c:	d10b      	bne.n	8001526 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001518:	2203      	movs	r2, #3
 800151a:	4393      	bics	r3, r2
 800151c:	2201      	movs	r2, #1
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001524:	e01c      	b.n	8001560 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800152a:	2212      	movs	r2, #18
 800152c:	4393      	bics	r3, r2
 800152e:	2210      	movs	r2, #16
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800153a:	2201      	movs	r2, #1
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001542:	230f      	movs	r3, #15
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800154a:	e009      	b.n	8001560 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001550:	2210      	movs	r2, #16
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001558:	230f      	movs	r3, #15
 800155a:	18fb      	adds	r3, r7, r3
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001560:	230f      	movs	r3, #15
 8001562:	18fb      	adds	r3, r7, r3
 8001564:	781b      	ldrb	r3, [r3, #0]
}
 8001566:	0018      	movs	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	b004      	add	sp, #16
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	fffffefd 	.word	0xfffffefd
 8001574:	fffe0219 	.word	0xfffe0219
 8001578:	833fffe7 	.word	0x833fffe7

0800157c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001586:	230f      	movs	r3, #15
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001596:	2380      	movs	r3, #128	@ 0x80
 8001598:	055b      	lsls	r3, r3, #21
 800159a:	429a      	cmp	r2, r3
 800159c:	d011      	beq.n	80015c2 <HAL_ADC_ConfigChannel+0x46>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d00d      	beq.n	80015c2 <HAL_ADC_ConfigChannel+0x46>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d009      	beq.n	80015c2 <HAL_ADC_ConfigChannel+0x46>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d005      	beq.n	80015c2 <HAL_ADC_ConfigChannel+0x46>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d001      	beq.n	80015c2 <HAL_ADC_ConfigChannel+0x46>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2234      	movs	r2, #52	@ 0x34
 80015c6:	5c9b      	ldrb	r3, [r3, r2]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x54>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e0bb      	b.n	8001748 <HAL_ADC_ConfigChannel+0x1cc>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2234      	movs	r2, #52	@ 0x34
 80015d4:	2101      	movs	r1, #1
 80015d6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2204      	movs	r2, #4
 80015e0:	4013      	ands	r3, r2
 80015e2:	d000      	beq.n	80015e6 <HAL_ADC_ConfigChannel+0x6a>
 80015e4:	e09f      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4a59      	ldr	r2, [pc, #356]	@ (8001750 <HAL_ADC_ConfigChannel+0x1d4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d100      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x76>
 80015f0:	e077      	b.n	80016e2 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2201      	movs	r2, #1
 80015fe:	409a      	lsls	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	055b      	lsls	r3, r3, #21
 8001610:	429a      	cmp	r2, r3
 8001612:	d037      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x108>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001618:	2b01      	cmp	r3, #1
 800161a:	d033      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x108>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001620:	2b02      	cmp	r3, #2
 8001622:	d02f      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x108>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001628:	2b03      	cmp	r3, #3
 800162a:	d02b      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x108>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001630:	2b04      	cmp	r3, #4
 8001632:	d027      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x108>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001638:	2b05      	cmp	r3, #5
 800163a:	d023      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x108>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001640:	2b06      	cmp	r3, #6
 8001642:	d01f      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x108>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001648:	2b07      	cmp	r3, #7
 800164a:	d01b      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	2107      	movs	r1, #7
 8001658:	400b      	ands	r3, r1
 800165a:	429a      	cmp	r2, r3
 800165c:	d012      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	695a      	ldr	r2, [r3, #20]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2107      	movs	r1, #7
 800166a:	438a      	bics	r2, r1
 800166c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6959      	ldr	r1, [r3, #20]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2207      	movs	r2, #7
 800167a:	401a      	ands	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b10      	cmp	r3, #16
 800168a:	d003      	beq.n	8001694 <HAL_ADC_ConfigChannel+0x118>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b11      	cmp	r3, #17
 8001692:	d152      	bne.n	800173a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001694:	4b2f      	ldr	r3, [pc, #188]	@ (8001754 <HAL_ADC_ConfigChannel+0x1d8>)
 8001696:	6819      	ldr	r1, [r3, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b10      	cmp	r3, #16
 800169e:	d102      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x12a>
 80016a0:	2380      	movs	r3, #128	@ 0x80
 80016a2:	041b      	lsls	r3, r3, #16
 80016a4:	e001      	b.n	80016aa <HAL_ADC_ConfigChannel+0x12e>
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	03db      	lsls	r3, r3, #15
 80016aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001754 <HAL_ADC_ConfigChannel+0x1d8>)
 80016ac:	430b      	orrs	r3, r1
 80016ae:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b10      	cmp	r3, #16
 80016b6:	d140      	bne.n	800173a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016b8:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <HAL_ADC_ConfigChannel+0x1dc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4927      	ldr	r1, [pc, #156]	@ (800175c <HAL_ADC_ConfigChannel+0x1e0>)
 80016be:	0018      	movs	r0, r3
 80016c0:	f7fe fd2c 	bl	800011c <__udivsi3>
 80016c4:	0003      	movs	r3, r0
 80016c6:	001a      	movs	r2, r3
 80016c8:	0013      	movs	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	189b      	adds	r3, r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016d2:	e002      	b.n	80016da <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f9      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x158>
 80016e0:	e02b      	b.n	800173a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	4099      	lsls	r1, r3
 80016f0:	000b      	movs	r3, r1
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	400a      	ands	r2, r1
 80016fa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b10      	cmp	r3, #16
 8001702:	d003      	beq.n	800170c <HAL_ADC_ConfigChannel+0x190>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b11      	cmp	r3, #17
 800170a:	d116      	bne.n	800173a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_ADC_ConfigChannel+0x1d8>)
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b10      	cmp	r3, #16
 8001716:	d101      	bne.n	800171c <HAL_ADC_ConfigChannel+0x1a0>
 8001718:	4a11      	ldr	r2, [pc, #68]	@ (8001760 <HAL_ADC_ConfigChannel+0x1e4>)
 800171a:	e000      	b.n	800171e <HAL_ADC_ConfigChannel+0x1a2>
 800171c:	4a11      	ldr	r2, [pc, #68]	@ (8001764 <HAL_ADC_ConfigChannel+0x1e8>)
 800171e:	4b0d      	ldr	r3, [pc, #52]	@ (8001754 <HAL_ADC_ConfigChannel+0x1d8>)
 8001720:	400a      	ands	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	e009      	b.n	800173a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800172a:	2220      	movs	r2, #32
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001732:	230f      	movs	r3, #15
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2234      	movs	r2, #52	@ 0x34
 800173e:	2100      	movs	r1, #0
 8001740:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001742:	230f      	movs	r3, #15
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	781b      	ldrb	r3, [r3, #0]
}
 8001748:	0018      	movs	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	b004      	add	sp, #16
 800174e:	bd80      	pop	{r7, pc}
 8001750:	00001001 	.word	0x00001001
 8001754:	40012708 	.word	0x40012708
 8001758:	20000014 	.word	0x20000014
 800175c:	000f4240 	.word	0x000f4240
 8001760:	ff7fffff 	.word	0xff7fffff
 8001764:	ffbfffff 	.word	0xffbfffff

08001768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	0002      	movs	r2, r0
 8001770:	1dfb      	adds	r3, r7, #7
 8001772:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001774:	1dfb      	adds	r3, r7, #7
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b7f      	cmp	r3, #127	@ 0x7f
 800177a:	d809      	bhi.n	8001790 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177c:	1dfb      	adds	r3, r7, #7
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	001a      	movs	r2, r3
 8001782:	231f      	movs	r3, #31
 8001784:	401a      	ands	r2, r3
 8001786:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <__NVIC_EnableIRQ+0x30>)
 8001788:	2101      	movs	r1, #1
 800178a:	4091      	lsls	r1, r2
 800178c:	000a      	movs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]
  }
}
 8001790:	46c0      	nop			@ (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b002      	add	sp, #8
 8001796:	bd80      	pop	{r7, pc}
 8001798:	e000e100 	.word	0xe000e100

0800179c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	0002      	movs	r2, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	1dfb      	adds	r3, r7, #7
 80017a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017aa:	1dfb      	adds	r3, r7, #7
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80017b0:	d828      	bhi.n	8001804 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001870 <__NVIC_SetPriority+0xd4>)
 80017b4:	1dfb      	adds	r3, r7, #7
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	089b      	lsrs	r3, r3, #2
 80017bc:	33c0      	adds	r3, #192	@ 0xc0
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	589b      	ldr	r3, [r3, r2]
 80017c2:	1dfa      	adds	r2, r7, #7
 80017c4:	7812      	ldrb	r2, [r2, #0]
 80017c6:	0011      	movs	r1, r2
 80017c8:	2203      	movs	r2, #3
 80017ca:	400a      	ands	r2, r1
 80017cc:	00d2      	lsls	r2, r2, #3
 80017ce:	21ff      	movs	r1, #255	@ 0xff
 80017d0:	4091      	lsls	r1, r2
 80017d2:	000a      	movs	r2, r1
 80017d4:	43d2      	mvns	r2, r2
 80017d6:	401a      	ands	r2, r3
 80017d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	019b      	lsls	r3, r3, #6
 80017de:	22ff      	movs	r2, #255	@ 0xff
 80017e0:	401a      	ands	r2, r3
 80017e2:	1dfb      	adds	r3, r7, #7
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	0018      	movs	r0, r3
 80017e8:	2303      	movs	r3, #3
 80017ea:	4003      	ands	r3, r0
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017f0:	481f      	ldr	r0, [pc, #124]	@ (8001870 <__NVIC_SetPriority+0xd4>)
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	430a      	orrs	r2, r1
 80017fc:	33c0      	adds	r3, #192	@ 0xc0
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001802:	e031      	b.n	8001868 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001804:	4a1b      	ldr	r2, [pc, #108]	@ (8001874 <__NVIC_SetPriority+0xd8>)
 8001806:	1dfb      	adds	r3, r7, #7
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	0019      	movs	r1, r3
 800180c:	230f      	movs	r3, #15
 800180e:	400b      	ands	r3, r1
 8001810:	3b08      	subs	r3, #8
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	3306      	adds	r3, #6
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	18d3      	adds	r3, r2, r3
 800181a:	3304      	adds	r3, #4
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	1dfa      	adds	r2, r7, #7
 8001820:	7812      	ldrb	r2, [r2, #0]
 8001822:	0011      	movs	r1, r2
 8001824:	2203      	movs	r2, #3
 8001826:	400a      	ands	r2, r1
 8001828:	00d2      	lsls	r2, r2, #3
 800182a:	21ff      	movs	r1, #255	@ 0xff
 800182c:	4091      	lsls	r1, r2
 800182e:	000a      	movs	r2, r1
 8001830:	43d2      	mvns	r2, r2
 8001832:	401a      	ands	r2, r3
 8001834:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	019b      	lsls	r3, r3, #6
 800183a:	22ff      	movs	r2, #255	@ 0xff
 800183c:	401a      	ands	r2, r3
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	0018      	movs	r0, r3
 8001844:	2303      	movs	r3, #3
 8001846:	4003      	ands	r3, r0
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800184c:	4809      	ldr	r0, [pc, #36]	@ (8001874 <__NVIC_SetPriority+0xd8>)
 800184e:	1dfb      	adds	r3, r7, #7
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	001c      	movs	r4, r3
 8001854:	230f      	movs	r3, #15
 8001856:	4023      	ands	r3, r4
 8001858:	3b08      	subs	r3, #8
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	430a      	orrs	r2, r1
 800185e:	3306      	adds	r3, #6
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	18c3      	adds	r3, r0, r3
 8001864:	3304      	adds	r3, #4
 8001866:	601a      	str	r2, [r3, #0]
}
 8001868:	46c0      	nop			@ (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b003      	add	sp, #12
 800186e:	bd90      	pop	{r4, r7, pc}
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	1e5a      	subs	r2, r3, #1
 8001884:	2380      	movs	r3, #128	@ 0x80
 8001886:	045b      	lsls	r3, r3, #17
 8001888:	429a      	cmp	r2, r3
 800188a:	d301      	bcc.n	8001890 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188c:	2301      	movs	r3, #1
 800188e:	e010      	b.n	80018b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001890:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <SysTick_Config+0x44>)
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	3a01      	subs	r2, #1
 8001896:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001898:	2301      	movs	r3, #1
 800189a:	425b      	negs	r3, r3
 800189c:	2103      	movs	r1, #3
 800189e:	0018      	movs	r0, r3
 80018a0:	f7ff ff7c 	bl	800179c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <SysTick_Config+0x44>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018aa:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <SysTick_Config+0x44>)
 80018ac:	2207      	movs	r2, #7
 80018ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	e000e010 	.word	0xe000e010

080018c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	210f      	movs	r1, #15
 80018cc:	187b      	adds	r3, r7, r1
 80018ce:	1c02      	adds	r2, r0, #0
 80018d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	0011      	movs	r1, r2
 80018dc:	0018      	movs	r0, r3
 80018de:	f7ff ff5d 	bl	800179c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b004      	add	sp, #16
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	0002      	movs	r2, r0
 80018f2:	1dfb      	adds	r3, r7, #7
 80018f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b25b      	sxtb	r3, r3
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff ff33 	bl	8001768 <__NVIC_EnableIRQ>
}
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	b002      	add	sp, #8
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff ffaf 	bl	8001878 <SysTick_Config>
 800191a:	0003      	movs	r3, r0
}
 800191c:	0018      	movs	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	b002      	add	sp, #8
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001932:	e14f      	b.n	8001bd4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4091      	lsls	r1, r2
 800193e:	000a      	movs	r2, r1
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d100      	bne.n	800194c <HAL_GPIO_Init+0x28>
 800194a:	e140      	b.n	8001bce <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2203      	movs	r2, #3
 8001952:	4013      	ands	r3, r2
 8001954:	2b01      	cmp	r3, #1
 8001956:	d005      	beq.n	8001964 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2203      	movs	r2, #3
 800195e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001960:	2b02      	cmp	r3, #2
 8001962:	d130      	bne.n	80019c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	409a      	lsls	r2, r3
 8001972:	0013      	movs	r3, r2
 8001974:	43da      	mvns	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	409a      	lsls	r2, r3
 8001986:	0013      	movs	r3, r2
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800199a:	2201      	movs	r2, #1
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
 80019a0:	0013      	movs	r3, r2
 80019a2:	43da      	mvns	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	2201      	movs	r2, #1
 80019b2:	401a      	ands	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	409a      	lsls	r2, r3
 80019b8:	0013      	movs	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2203      	movs	r2, #3
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d017      	beq.n	8001a02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	409a      	lsls	r2, r3
 80019e0:	0013      	movs	r3, r2
 80019e2:	43da      	mvns	r2, r3
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	409a      	lsls	r2, r3
 80019f4:	0013      	movs	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2203      	movs	r2, #3
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d123      	bne.n	8001a56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	08da      	lsrs	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3208      	adds	r2, #8
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	58d3      	ldr	r3, [r2, r3]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	2207      	movs	r2, #7
 8001a20:	4013      	ands	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	220f      	movs	r2, #15
 8001a26:	409a      	lsls	r2, r3
 8001a28:	0013      	movs	r3, r2
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2107      	movs	r1, #7
 8001a3a:	400b      	ands	r3, r1
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	0013      	movs	r3, r2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	08da      	lsrs	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3208      	adds	r2, #8
 8001a50:	0092      	lsls	r2, r2, #2
 8001a52:	6939      	ldr	r1, [r7, #16]
 8001a54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	2203      	movs	r2, #3
 8001a62:	409a      	lsls	r2, r3
 8001a64:	0013      	movs	r3, r2
 8001a66:	43da      	mvns	r2, r3
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2203      	movs	r2, #3
 8001a74:	401a      	ands	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	0013      	movs	r3, r2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	23c0      	movs	r3, #192	@ 0xc0
 8001a90:	029b      	lsls	r3, r3, #10
 8001a92:	4013      	ands	r3, r2
 8001a94:	d100      	bne.n	8001a98 <HAL_GPIO_Init+0x174>
 8001a96:	e09a      	b.n	8001bce <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a98:	4b54      	ldr	r3, [pc, #336]	@ (8001bec <HAL_GPIO_Init+0x2c8>)
 8001a9a:	699a      	ldr	r2, [r3, #24]
 8001a9c:	4b53      	ldr	r3, [pc, #332]	@ (8001bec <HAL_GPIO_Init+0x2c8>)
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	619a      	str	r2, [r3, #24]
 8001aa4:	4b51      	ldr	r3, [pc, #324]	@ (8001bec <HAL_GPIO_Init+0x2c8>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4013      	ands	r3, r2
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ab0:	4a4f      	ldr	r2, [pc, #316]	@ (8001bf0 <HAL_GPIO_Init+0x2cc>)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	589b      	ldr	r3, [r3, r2]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	0013      	movs	r3, r2
 8001acc:	43da      	mvns	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	2390      	movs	r3, #144	@ 0x90
 8001ad8:	05db      	lsls	r3, r3, #23
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d013      	beq.n	8001b06 <HAL_GPIO_Init+0x1e2>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a44      	ldr	r2, [pc, #272]	@ (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00d      	beq.n	8001b02 <HAL_GPIO_Init+0x1de>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a43      	ldr	r2, [pc, #268]	@ (8001bf8 <HAL_GPIO_Init+0x2d4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d007      	beq.n	8001afe <HAL_GPIO_Init+0x1da>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a42      	ldr	r2, [pc, #264]	@ (8001bfc <HAL_GPIO_Init+0x2d8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_GPIO_Init+0x1d6>
 8001af6:	2303      	movs	r3, #3
 8001af8:	e006      	b.n	8001b08 <HAL_GPIO_Init+0x1e4>
 8001afa:	2305      	movs	r3, #5
 8001afc:	e004      	b.n	8001b08 <HAL_GPIO_Init+0x1e4>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e002      	b.n	8001b08 <HAL_GPIO_Init+0x1e4>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_GPIO_Init+0x1e4>
 8001b06:	2300      	movs	r3, #0
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	2103      	movs	r1, #3
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	0092      	lsls	r2, r2, #2
 8001b10:	4093      	lsls	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b18:	4935      	ldr	r1, [pc, #212]	@ (8001bf0 <HAL_GPIO_Init+0x2cc>)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b26:	4b36      	ldr	r3, [pc, #216]	@ (8001c00 <HAL_GPIO_Init+0x2dc>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	035b      	lsls	r3, r3, #13
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c00 <HAL_GPIO_Init+0x2dc>)
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b50:	4b2b      	ldr	r3, [pc, #172]	@ (8001c00 <HAL_GPIO_Init+0x2dc>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	43da      	mvns	r2, r3
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	039b      	lsls	r3, r3, #14
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b74:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <HAL_GPIO_Init+0x2dc>)
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001b7a:	4b21      	ldr	r3, [pc, #132]	@ (8001c00 <HAL_GPIO_Init+0x2dc>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	43da      	mvns	r2, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	029b      	lsls	r3, r3, #10
 8001b92:	4013      	ands	r3, r2
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b9e:	4b18      	ldr	r3, [pc, #96]	@ (8001c00 <HAL_GPIO_Init+0x2dc>)
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001ba4:	4b16      	ldr	r3, [pc, #88]	@ (8001c00 <HAL_GPIO_Init+0x2dc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	43da      	mvns	r2, r3
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	2380      	movs	r3, #128	@ 0x80
 8001bba:	025b      	lsls	r3, r3, #9
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c00 <HAL_GPIO_Init+0x2dc>)
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	40da      	lsrs	r2, r3
 8001bdc:	1e13      	subs	r3, r2, #0
 8001bde:	d000      	beq.n	8001be2 <HAL_GPIO_Init+0x2be>
 8001be0:	e6a8      	b.n	8001934 <HAL_GPIO_Init+0x10>
  } 
}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	46c0      	nop			@ (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b006      	add	sp, #24
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	48000400 	.word	0x48000400
 8001bf8:	48000800 	.word	0x48000800
 8001bfc:	48000c00 	.word	0x48000c00
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	0008      	movs	r0, r1
 8001c0e:	0011      	movs	r1, r2
 8001c10:	1cbb      	adds	r3, r7, #2
 8001c12:	1c02      	adds	r2, r0, #0
 8001c14:	801a      	strh	r2, [r3, #0]
 8001c16:	1c7b      	adds	r3, r7, #1
 8001c18:	1c0a      	adds	r2, r1, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c1c:	1c7b      	adds	r3, r7, #1
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d004      	beq.n	8001c2e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c24:	1cbb      	adds	r3, r7, #2
 8001c26:	881a      	ldrh	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c2c:	e003      	b.n	8001c36 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c2e:	1cbb      	adds	r3, r7, #2
 8001c30:	881a      	ldrh	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b002      	add	sp, #8
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	0002      	movs	r2, r0
 8001c48:	1dbb      	adds	r3, r7, #6
 8001c4a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c4c:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	1dba      	adds	r2, r7, #6
 8001c52:	8812      	ldrh	r2, [r2, #0]
 8001c54:	4013      	ands	r3, r2
 8001c56:	d008      	beq.n	8001c6a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001c5a:	1dba      	adds	r2, r7, #6
 8001c5c:	8812      	ldrh	r2, [r2, #0]
 8001c5e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c60:	1dbb      	adds	r3, r7, #6
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7ff f8d5 	bl	8000e14 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c6a:	46c0      	nop			@ (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b002      	add	sp, #8
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			@ (mov r8, r8)
 8001c74:	40010400 	.word	0x40010400

08001c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e301      	b.n	800228e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4013      	ands	r3, r2
 8001c92:	d100      	bne.n	8001c96 <HAL_RCC_OscConfig+0x1e>
 8001c94:	e08d      	b.n	8001db2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c96:	4bc3      	ldr	r3, [pc, #780]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d00e      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca2:	4bc0      	ldr	r3, [pc, #768]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d116      	bne.n	8001cdc <HAL_RCC_OscConfig+0x64>
 8001cae:	4bbd      	ldr	r3, [pc, #756]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	2380      	movs	r3, #128	@ 0x80
 8001cb4:	025b      	lsls	r3, r3, #9
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	2380      	movs	r3, #128	@ 0x80
 8001cba:	025b      	lsls	r3, r3, #9
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d10d      	bne.n	8001cdc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	4bb8      	ldr	r3, [pc, #736]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2380      	movs	r3, #128	@ 0x80
 8001cc6:	029b      	lsls	r3, r3, #10
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d100      	bne.n	8001cce <HAL_RCC_OscConfig+0x56>
 8001ccc:	e070      	b.n	8001db0 <HAL_RCC_OscConfig+0x138>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d000      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x60>
 8001cd6:	e06b      	b.n	8001db0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e2d8      	b.n	800228e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d107      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x7c>
 8001ce4:	4baf      	ldr	r3, [pc, #700]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4bae      	ldr	r3, [pc, #696]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001cea:	2180      	movs	r1, #128	@ 0x80
 8001cec:	0249      	lsls	r1, r1, #9
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e02f      	b.n	8001d54 <HAL_RCC_OscConfig+0xdc>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10c      	bne.n	8001d16 <HAL_RCC_OscConfig+0x9e>
 8001cfc:	4ba9      	ldr	r3, [pc, #676]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4ba8      	ldr	r3, [pc, #672]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d02:	49a9      	ldr	r1, [pc, #676]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	4ba6      	ldr	r3, [pc, #664]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4ba5      	ldr	r3, [pc, #660]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d0e:	49a7      	ldr	r1, [pc, #668]	@ (8001fac <HAL_RCC_OscConfig+0x334>)
 8001d10:	400a      	ands	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	e01e      	b.n	8001d54 <HAL_RCC_OscConfig+0xdc>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	d10e      	bne.n	8001d3c <HAL_RCC_OscConfig+0xc4>
 8001d1e:	4ba1      	ldr	r3, [pc, #644]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4ba0      	ldr	r3, [pc, #640]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d24:	2180      	movs	r1, #128	@ 0x80
 8001d26:	02c9      	lsls	r1, r1, #11
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	4b9d      	ldr	r3, [pc, #628]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b9c      	ldr	r3, [pc, #624]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d32:	2180      	movs	r1, #128	@ 0x80
 8001d34:	0249      	lsls	r1, r1, #9
 8001d36:	430a      	orrs	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0xdc>
 8001d3c:	4b99      	ldr	r3, [pc, #612]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b98      	ldr	r3, [pc, #608]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d42:	4999      	ldr	r1, [pc, #612]	@ (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001d44:	400a      	ands	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	4b96      	ldr	r3, [pc, #600]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b95      	ldr	r3, [pc, #596]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d4e:	4997      	ldr	r1, [pc, #604]	@ (8001fac <HAL_RCC_OscConfig+0x334>)
 8001d50:	400a      	ands	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d014      	beq.n	8001d86 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7ff faa0 	bl	80012a0 <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d66:	f7ff fa9b 	bl	80012a0 <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b64      	cmp	r3, #100	@ 0x64
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e28a      	b.n	800228e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d78:	4b8a      	ldr	r3, [pc, #552]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	@ 0x80
 8001d7e:	029b      	lsls	r3, r3, #10
 8001d80:	4013      	ands	r3, r2
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0xee>
 8001d84:	e015      	b.n	8001db2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7ff fa8b 	bl	80012a0 <HAL_GetTick>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d90:	f7ff fa86 	bl	80012a0 <HAL_GetTick>
 8001d94:	0002      	movs	r2, r0
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	@ 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e275      	b.n	800228e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	4b80      	ldr	r3, [pc, #512]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	2380      	movs	r3, #128	@ 0x80
 8001da8:	029b      	lsls	r3, r3, #10
 8001daa:	4013      	ands	r3, r2
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x118>
 8001dae:	e000      	b.n	8001db2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2202      	movs	r2, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	d100      	bne.n	8001dbe <HAL_RCC_OscConfig+0x146>
 8001dbc:	e069      	b.n	8001e92 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dbe:	4b79      	ldr	r3, [pc, #484]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d00b      	beq.n	8001de0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dc8:	4b76      	ldr	r3, [pc, #472]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	220c      	movs	r2, #12
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d11c      	bne.n	8001e0e <HAL_RCC_OscConfig+0x196>
 8001dd4:	4b73      	ldr	r3, [pc, #460]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	2380      	movs	r3, #128	@ 0x80
 8001dda:	025b      	lsls	r3, r3, #9
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d116      	bne.n	8001e0e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de0:	4b70      	ldr	r3, [pc, #448]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2202      	movs	r2, #2
 8001de6:	4013      	ands	r3, r2
 8001de8:	d005      	beq.n	8001df6 <HAL_RCC_OscConfig+0x17e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e24b      	b.n	800228e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df6:	4b6b      	ldr	r3, [pc, #428]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	22f8      	movs	r2, #248	@ 0xf8
 8001dfc:	4393      	bics	r3, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	00da      	lsls	r2, r3, #3
 8001e06:	4b67      	ldr	r3, [pc, #412]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0c:	e041      	b.n	8001e92 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d024      	beq.n	8001e60 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e16:	4b63      	ldr	r3, [pc, #396]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b62      	ldr	r3, [pc, #392]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7ff fa3d 	bl	80012a0 <HAL_GetTick>
 8001e26:	0003      	movs	r3, r0
 8001e28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fa38 	bl	80012a0 <HAL_GetTick>
 8001e30:	0002      	movs	r2, r0
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e227      	b.n	800228e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3e:	4b59      	ldr	r3, [pc, #356]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2202      	movs	r2, #2
 8001e44:	4013      	ands	r3, r2
 8001e46:	d0f1      	beq.n	8001e2c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e48:	4b56      	ldr	r3, [pc, #344]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	22f8      	movs	r2, #248	@ 0xf8
 8001e4e:	4393      	bics	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00da      	lsls	r2, r3, #3
 8001e58:	4b52      	ldr	r3, [pc, #328]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e018      	b.n	8001e92 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e60:	4b50      	ldr	r3, [pc, #320]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b4f      	ldr	r3, [pc, #316]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e66:	2101      	movs	r1, #1
 8001e68:	438a      	bics	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fa18 	bl	80012a0 <HAL_GetTick>
 8001e70:	0003      	movs	r3, r0
 8001e72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e76:	f7ff fa13 	bl	80012a0 <HAL_GetTick>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e202      	b.n	800228e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e88:	4b46      	ldr	r3, [pc, #280]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d1f1      	bne.n	8001e76 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2208      	movs	r2, #8
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d036      	beq.n	8001f0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d019      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea4:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001ea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	430a      	orrs	r2, r1
 8001eae:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb0:	f7ff f9f6 	bl	80012a0 <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eba:	f7ff f9f1 	bl	80012a0 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e1e0      	b.n	800228e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ecc:	4b35      	ldr	r3, [pc, #212]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d0f1      	beq.n	8001eba <HAL_RCC_OscConfig+0x242>
 8001ed6:	e018      	b.n	8001f0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed8:	4b32      	ldr	r3, [pc, #200]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001eda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001edc:	4b31      	ldr	r3, [pc, #196]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001ede:	2101      	movs	r1, #1
 8001ee0:	438a      	bics	r2, r1
 8001ee2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f9dc 	bl	80012a0 <HAL_GetTick>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eee:	f7ff f9d7 	bl	80012a0 <HAL_GetTick>
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e1c6      	b.n	800228e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f00:	4b28      	ldr	r3, [pc, #160]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f04:	2202      	movs	r2, #2
 8001f06:	4013      	ands	r3, r2
 8001f08:	d1f1      	bne.n	8001eee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2204      	movs	r2, #4
 8001f10:	4013      	ands	r3, r2
 8001f12:	d100      	bne.n	8001f16 <HAL_RCC_OscConfig+0x29e>
 8001f14:	e0b4      	b.n	8002080 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f16:	201f      	movs	r0, #31
 8001f18:	183b      	adds	r3, r7, r0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1e:	4b21      	ldr	r3, [pc, #132]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001f20:	69da      	ldr	r2, [r3, #28]
 8001f22:	2380      	movs	r3, #128	@ 0x80
 8001f24:	055b      	lsls	r3, r3, #21
 8001f26:	4013      	ands	r3, r2
 8001f28:	d110      	bne.n	8001f4c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001f2c:	69da      	ldr	r2, [r3, #28]
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001f30:	2180      	movs	r1, #128	@ 0x80
 8001f32:	0549      	lsls	r1, r1, #21
 8001f34:	430a      	orrs	r2, r1
 8001f36:	61da      	str	r2, [r3, #28]
 8001f38:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001f3a:	69da      	ldr	r2, [r3, #28]
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	055b      	lsls	r3, r3, #21
 8001f40:	4013      	ands	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f46:	183b      	adds	r3, r7, r0
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4c:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <HAL_RCC_OscConfig+0x338>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	@ 0x80
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4013      	ands	r3, r2
 8001f56:	d11a      	bne.n	8001f8e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f58:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <HAL_RCC_OscConfig+0x338>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <HAL_RCC_OscConfig+0x338>)
 8001f5e:	2180      	movs	r1, #128	@ 0x80
 8001f60:	0049      	lsls	r1, r1, #1
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f66:	f7ff f99b 	bl	80012a0 <HAL_GetTick>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f70:	f7ff f996 	bl	80012a0 <HAL_GetTick>
 8001f74:	0002      	movs	r2, r0
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	@ 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e185      	b.n	800228e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <HAL_RCC_OscConfig+0x338>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	2380      	movs	r3, #128	@ 0x80
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d10e      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x33c>
 8001f96:	4b03      	ldr	r3, [pc, #12]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001f98:	6a1a      	ldr	r2, [r3, #32]
 8001f9a:	4b02      	ldr	r3, [pc, #8]	@ (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	621a      	str	r2, [r3, #32]
 8001fa2:	e035      	b.n	8002010 <HAL_RCC_OscConfig+0x398>
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	fffeffff 	.word	0xfffeffff
 8001fac:	fffbffff 	.word	0xfffbffff
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10c      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x35e>
 8001fbc:	4bb6      	ldr	r3, [pc, #728]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8001fbe:	6a1a      	ldr	r2, [r3, #32]
 8001fc0:	4bb5      	ldr	r3, [pc, #724]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	621a      	str	r2, [r3, #32]
 8001fc8:	4bb3      	ldr	r3, [pc, #716]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8001fca:	6a1a      	ldr	r2, [r3, #32]
 8001fcc:	4bb2      	ldr	r3, [pc, #712]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8001fce:	2104      	movs	r1, #4
 8001fd0:	438a      	bics	r2, r1
 8001fd2:	621a      	str	r2, [r3, #32]
 8001fd4:	e01c      	b.n	8002010 <HAL_RCC_OscConfig+0x398>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b05      	cmp	r3, #5
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x380>
 8001fde:	4bae      	ldr	r3, [pc, #696]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8001fe0:	6a1a      	ldr	r2, [r3, #32]
 8001fe2:	4bad      	ldr	r3, [pc, #692]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	621a      	str	r2, [r3, #32]
 8001fea:	4bab      	ldr	r3, [pc, #684]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8001fec:	6a1a      	ldr	r2, [r3, #32]
 8001fee:	4baa      	ldr	r3, [pc, #680]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	621a      	str	r2, [r3, #32]
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0x398>
 8001ff8:	4ba7      	ldr	r3, [pc, #668]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8001ffa:	6a1a      	ldr	r2, [r3, #32]
 8001ffc:	4ba6      	ldr	r3, [pc, #664]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8001ffe:	2101      	movs	r1, #1
 8002000:	438a      	bics	r2, r1
 8002002:	621a      	str	r2, [r3, #32]
 8002004:	4ba4      	ldr	r3, [pc, #656]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8002006:	6a1a      	ldr	r2, [r3, #32]
 8002008:	4ba3      	ldr	r3, [pc, #652]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 800200a:	2104      	movs	r1, #4
 800200c:	438a      	bics	r2, r1
 800200e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d014      	beq.n	8002042 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002018:	f7ff f942 	bl	80012a0 <HAL_GetTick>
 800201c:	0003      	movs	r3, r0
 800201e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002020:	e009      	b.n	8002036 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f7ff f93d 	bl	80012a0 <HAL_GetTick>
 8002026:	0002      	movs	r2, r0
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	4a9b      	ldr	r2, [pc, #620]	@ (800229c <HAL_RCC_OscConfig+0x624>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e12b      	b.n	800228e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002036:	4b98      	ldr	r3, [pc, #608]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	2202      	movs	r2, #2
 800203c:	4013      	ands	r3, r2
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x3aa>
 8002040:	e013      	b.n	800206a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002042:	f7ff f92d 	bl	80012a0 <HAL_GetTick>
 8002046:	0003      	movs	r3, r0
 8002048:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204a:	e009      	b.n	8002060 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204c:	f7ff f928 	bl	80012a0 <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	4a91      	ldr	r2, [pc, #580]	@ (800229c <HAL_RCC_OscConfig+0x624>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e116      	b.n	800228e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002060:	4b8d      	ldr	r3, [pc, #564]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	2202      	movs	r2, #2
 8002066:	4013      	ands	r3, r2
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800206a:	231f      	movs	r3, #31
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d105      	bne.n	8002080 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002074:	4b88      	ldr	r3, [pc, #544]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8002076:	69da      	ldr	r2, [r3, #28]
 8002078:	4b87      	ldr	r3, [pc, #540]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 800207a:	4989      	ldr	r1, [pc, #548]	@ (80022a0 <HAL_RCC_OscConfig+0x628>)
 800207c:	400a      	ands	r2, r1
 800207e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2210      	movs	r2, #16
 8002086:	4013      	ands	r3, r2
 8002088:	d063      	beq.n	8002152 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d12a      	bne.n	80020e8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002092:	4b81      	ldr	r3, [pc, #516]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8002094:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002096:	4b80      	ldr	r3, [pc, #512]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8002098:	2104      	movs	r1, #4
 800209a:	430a      	orrs	r2, r1
 800209c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800209e:	4b7e      	ldr	r3, [pc, #504]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 80020a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 80020a4:	2101      	movs	r1, #1
 80020a6:	430a      	orrs	r2, r1
 80020a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020aa:	f7ff f8f9 	bl	80012a0 <HAL_GetTick>
 80020ae:	0003      	movs	r3, r0
 80020b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020b4:	f7ff f8f4 	bl	80012a0 <HAL_GetTick>
 80020b8:	0002      	movs	r2, r0
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e0e3      	b.n	800228e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020c6:	4b74      	ldr	r3, [pc, #464]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 80020c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ca:	2202      	movs	r2, #2
 80020cc:	4013      	ands	r3, r2
 80020ce:	d0f1      	beq.n	80020b4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020d0:	4b71      	ldr	r3, [pc, #452]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 80020d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d4:	22f8      	movs	r2, #248	@ 0xf8
 80020d6:	4393      	bics	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	00da      	lsls	r2, r3, #3
 80020e0:	4b6d      	ldr	r3, [pc, #436]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 80020e2:	430a      	orrs	r2, r1
 80020e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80020e6:	e034      	b.n	8002152 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	3305      	adds	r3, #5
 80020ee:	d111      	bne.n	8002114 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020f0:	4b69      	ldr	r3, [pc, #420]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 80020f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020f4:	4b68      	ldr	r3, [pc, #416]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 80020f6:	2104      	movs	r1, #4
 80020f8:	438a      	bics	r2, r1
 80020fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020fc:	4b66      	ldr	r3, [pc, #408]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 80020fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002100:	22f8      	movs	r2, #248	@ 0xf8
 8002102:	4393      	bics	r3, r2
 8002104:	0019      	movs	r1, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	00da      	lsls	r2, r3, #3
 800210c:	4b62      	ldr	r3, [pc, #392]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 800210e:	430a      	orrs	r2, r1
 8002110:	635a      	str	r2, [r3, #52]	@ 0x34
 8002112:	e01e      	b.n	8002152 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002114:	4b60      	ldr	r3, [pc, #384]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8002116:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002118:	4b5f      	ldr	r3, [pc, #380]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 800211a:	2104      	movs	r1, #4
 800211c:	430a      	orrs	r2, r1
 800211e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002120:	4b5d      	ldr	r3, [pc, #372]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8002122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002124:	4b5c      	ldr	r3, [pc, #368]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8002126:	2101      	movs	r1, #1
 8002128:	438a      	bics	r2, r1
 800212a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212c:	f7ff f8b8 	bl	80012a0 <HAL_GetTick>
 8002130:	0003      	movs	r3, r0
 8002132:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002136:	f7ff f8b3 	bl	80012a0 <HAL_GetTick>
 800213a:	0002      	movs	r2, r0
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e0a2      	b.n	800228e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002148:	4b53      	ldr	r3, [pc, #332]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 800214a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214c:	2202      	movs	r2, #2
 800214e:	4013      	ands	r3, r2
 8002150:	d1f1      	bne.n	8002136 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d100      	bne.n	800215c <HAL_RCC_OscConfig+0x4e4>
 800215a:	e097      	b.n	800228c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800215c:	4b4e      	ldr	r3, [pc, #312]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	220c      	movs	r2, #12
 8002162:	4013      	ands	r3, r2
 8002164:	2b08      	cmp	r3, #8
 8002166:	d100      	bne.n	800216a <HAL_RCC_OscConfig+0x4f2>
 8002168:	e06b      	b.n	8002242 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d14c      	bne.n	800220c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002172:	4b49      	ldr	r3, [pc, #292]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4b48      	ldr	r3, [pc, #288]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8002178:	494a      	ldr	r1, [pc, #296]	@ (80022a4 <HAL_RCC_OscConfig+0x62c>)
 800217a:	400a      	ands	r2, r1
 800217c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7ff f88f 	bl	80012a0 <HAL_GetTick>
 8002182:	0003      	movs	r3, r0
 8002184:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002188:	f7ff f88a 	bl	80012a0 <HAL_GetTick>
 800218c:	0002      	movs	r2, r0
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e079      	b.n	800228e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219a:	4b3f      	ldr	r3, [pc, #252]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	2380      	movs	r3, #128	@ 0x80
 80021a0:	049b      	lsls	r3, r3, #18
 80021a2:	4013      	ands	r3, r2
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 80021a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021aa:	220f      	movs	r2, #15
 80021ac:	4393      	bics	r3, r2
 80021ae:	0019      	movs	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021b4:	4b38      	ldr	r3, [pc, #224]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 80021b6:	430a      	orrs	r2, r1
 80021b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021ba:	4b37      	ldr	r3, [pc, #220]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4a3a      	ldr	r2, [pc, #232]	@ (80022a8 <HAL_RCC_OscConfig+0x630>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	0019      	movs	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	431a      	orrs	r2, r3
 80021ce:	4b32      	ldr	r3, [pc, #200]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 80021d0:	430a      	orrs	r2, r1
 80021d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d4:	4b30      	ldr	r3, [pc, #192]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 80021da:	2180      	movs	r1, #128	@ 0x80
 80021dc:	0449      	lsls	r1, r1, #17
 80021de:	430a      	orrs	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7ff f85d 	bl	80012a0 <HAL_GetTick>
 80021e6:	0003      	movs	r3, r0
 80021e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ec:	f7ff f858 	bl	80012a0 <HAL_GetTick>
 80021f0:	0002      	movs	r2, r0
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e047      	b.n	800228e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021fe:	4b26      	ldr	r3, [pc, #152]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	2380      	movs	r3, #128	@ 0x80
 8002204:	049b      	lsls	r3, r3, #18
 8002206:	4013      	ands	r3, r2
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x574>
 800220a:	e03f      	b.n	800228c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220c:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b21      	ldr	r3, [pc, #132]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8002212:	4924      	ldr	r1, [pc, #144]	@ (80022a4 <HAL_RCC_OscConfig+0x62c>)
 8002214:	400a      	ands	r2, r1
 8002216:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff f842 	bl	80012a0 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002222:	f7ff f83d 	bl	80012a0 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e02c      	b.n	800228e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002234:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2380      	movs	r3, #128	@ 0x80
 800223a:	049b      	lsls	r3, r3, #18
 800223c:	4013      	ands	r3, r2
 800223e:	d1f0      	bne.n	8002222 <HAL_RCC_OscConfig+0x5aa>
 8002240:	e024      	b.n	800228c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e01f      	b.n	800228e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800224e:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002254:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <HAL_RCC_OscConfig+0x620>)
 8002256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002258:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	2380      	movs	r3, #128	@ 0x80
 800225e:	025b      	lsls	r3, r3, #9
 8002260:	401a      	ands	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002266:	429a      	cmp	r2, r3
 8002268:	d10e      	bne.n	8002288 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	220f      	movs	r2, #15
 800226e:	401a      	ands	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d107      	bne.n	8002288 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	23f0      	movs	r3, #240	@ 0xf0
 800227c:	039b      	lsls	r3, r3, #14
 800227e:	401a      	ands	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	0018      	movs	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	b008      	add	sp, #32
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			@ (mov r8, r8)
 8002298:	40021000 	.word	0x40021000
 800229c:	00001388 	.word	0x00001388
 80022a0:	efffffff 	.word	0xefffffff
 80022a4:	feffffff 	.word	0xfeffffff
 80022a8:	ffc2ffff 	.word	0xffc2ffff

080022ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0b3      	b.n	8002428 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b5b      	ldr	r3, [pc, #364]	@ (8002430 <HAL_RCC_ClockConfig+0x184>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2201      	movs	r2, #1
 80022c6:	4013      	ands	r3, r2
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d911      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b58      	ldr	r3, [pc, #352]	@ (8002430 <HAL_RCC_ClockConfig+0x184>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2201      	movs	r2, #1
 80022d4:	4393      	bics	r3, r2
 80022d6:	0019      	movs	r1, r3
 80022d8:	4b55      	ldr	r3, [pc, #340]	@ (8002430 <HAL_RCC_ClockConfig+0x184>)
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e0:	4b53      	ldr	r3, [pc, #332]	@ (8002430 <HAL_RCC_ClockConfig+0x184>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2201      	movs	r2, #1
 80022e6:	4013      	ands	r3, r2
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e09a      	b.n	8002428 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2202      	movs	r2, #2
 80022f8:	4013      	ands	r3, r2
 80022fa:	d015      	beq.n	8002328 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2204      	movs	r2, #4
 8002302:	4013      	ands	r3, r2
 8002304:	d006      	beq.n	8002314 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002306:	4b4b      	ldr	r3, [pc, #300]	@ (8002434 <HAL_RCC_ClockConfig+0x188>)
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	4b4a      	ldr	r3, [pc, #296]	@ (8002434 <HAL_RCC_ClockConfig+0x188>)
 800230c:	21e0      	movs	r1, #224	@ 0xe0
 800230e:	00c9      	lsls	r1, r1, #3
 8002310:	430a      	orrs	r2, r1
 8002312:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002314:	4b47      	ldr	r3, [pc, #284]	@ (8002434 <HAL_RCC_ClockConfig+0x188>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	22f0      	movs	r2, #240	@ 0xf0
 800231a:	4393      	bics	r3, r2
 800231c:	0019      	movs	r1, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	4b44      	ldr	r3, [pc, #272]	@ (8002434 <HAL_RCC_ClockConfig+0x188>)
 8002324:	430a      	orrs	r2, r1
 8002326:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2201      	movs	r2, #1
 800232e:	4013      	ands	r3, r2
 8002330:	d040      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d107      	bne.n	800234a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	4b3e      	ldr	r3, [pc, #248]	@ (8002434 <HAL_RCC_ClockConfig+0x188>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	2380      	movs	r3, #128	@ 0x80
 8002340:	029b      	lsls	r3, r3, #10
 8002342:	4013      	ands	r3, r2
 8002344:	d114      	bne.n	8002370 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e06e      	b.n	8002428 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d107      	bne.n	8002362 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002352:	4b38      	ldr	r3, [pc, #224]	@ (8002434 <HAL_RCC_ClockConfig+0x188>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	@ 0x80
 8002358:	049b      	lsls	r3, r3, #18
 800235a:	4013      	ands	r3, r2
 800235c:	d108      	bne.n	8002370 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e062      	b.n	8002428 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002362:	4b34      	ldr	r3, [pc, #208]	@ (8002434 <HAL_RCC_ClockConfig+0x188>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2202      	movs	r2, #2
 8002368:	4013      	ands	r3, r2
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e05b      	b.n	8002428 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002370:	4b30      	ldr	r3, [pc, #192]	@ (8002434 <HAL_RCC_ClockConfig+0x188>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2203      	movs	r2, #3
 8002376:	4393      	bics	r3, r2
 8002378:	0019      	movs	r1, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	4b2d      	ldr	r3, [pc, #180]	@ (8002434 <HAL_RCC_ClockConfig+0x188>)
 8002380:	430a      	orrs	r2, r1
 8002382:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002384:	f7fe ff8c 	bl	80012a0 <HAL_GetTick>
 8002388:	0003      	movs	r3, r0
 800238a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238c:	e009      	b.n	80023a2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800238e:	f7fe ff87 	bl	80012a0 <HAL_GetTick>
 8002392:	0002      	movs	r2, r0
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	4a27      	ldr	r2, [pc, #156]	@ (8002438 <HAL_RCC_ClockConfig+0x18c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e042      	b.n	8002428 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	4b24      	ldr	r3, [pc, #144]	@ (8002434 <HAL_RCC_ClockConfig+0x188>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	220c      	movs	r2, #12
 80023a8:	401a      	ands	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d1ec      	bne.n	800238e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002430 <HAL_RCC_ClockConfig+0x184>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2201      	movs	r2, #1
 80023ba:	4013      	ands	r3, r2
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d211      	bcs.n	80023e6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002430 <HAL_RCC_ClockConfig+0x184>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2201      	movs	r2, #1
 80023c8:	4393      	bics	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	4b18      	ldr	r3, [pc, #96]	@ (8002430 <HAL_RCC_ClockConfig+0x184>)
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d4:	4b16      	ldr	r3, [pc, #88]	@ (8002430 <HAL_RCC_ClockConfig+0x184>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2201      	movs	r2, #1
 80023da:	4013      	ands	r3, r2
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d001      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e020      	b.n	8002428 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2204      	movs	r2, #4
 80023ec:	4013      	ands	r3, r2
 80023ee:	d009      	beq.n	8002404 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023f0:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <HAL_RCC_ClockConfig+0x188>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a11      	ldr	r2, [pc, #68]	@ (800243c <HAL_RCC_ClockConfig+0x190>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	0019      	movs	r1, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002434 <HAL_RCC_ClockConfig+0x188>)
 8002400:	430a      	orrs	r2, r1
 8002402:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002404:	f000 f820 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8002408:	0001      	movs	r1, r0
 800240a:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <HAL_RCC_ClockConfig+0x188>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	091b      	lsrs	r3, r3, #4
 8002410:	220f      	movs	r2, #15
 8002412:	4013      	ands	r3, r2
 8002414:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <HAL_RCC_ClockConfig+0x194>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	000a      	movs	r2, r1
 800241a:	40da      	lsrs	r2, r3
 800241c:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <HAL_RCC_ClockConfig+0x198>)
 800241e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002420:	2003      	movs	r0, #3
 8002422:	f7fe fef7 	bl	8001214 <HAL_InitTick>
  
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	b004      	add	sp, #16
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40022000 	.word	0x40022000
 8002434:	40021000 	.word	0x40021000
 8002438:	00001388 	.word	0x00001388
 800243c:	fffff8ff 	.word	0xfffff8ff
 8002440:	08003f38 	.word	0x08003f38
 8002444:	20000014 	.word	0x20000014

08002448 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002462:	4b20      	ldr	r3, [pc, #128]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	220c      	movs	r2, #12
 800246c:	4013      	ands	r3, r2
 800246e:	2b04      	cmp	r3, #4
 8002470:	d002      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0x30>
 8002472:	2b08      	cmp	r3, #8
 8002474:	d003      	beq.n	800247e <HAL_RCC_GetSysClockFreq+0x36>
 8002476:	e02c      	b.n	80024d2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002478:	4b1b      	ldr	r3, [pc, #108]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800247a:	613b      	str	r3, [r7, #16]
      break;
 800247c:	e02c      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	0c9b      	lsrs	r3, r3, #18
 8002482:	220f      	movs	r2, #15
 8002484:	4013      	ands	r3, r2
 8002486:	4a19      	ldr	r2, [pc, #100]	@ (80024ec <HAL_RCC_GetSysClockFreq+0xa4>)
 8002488:	5cd3      	ldrb	r3, [r2, r3]
 800248a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800248c:	4b15      	ldr	r3, [pc, #84]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800248e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002490:	220f      	movs	r2, #15
 8002492:	4013      	ands	r3, r2
 8002494:	4a16      	ldr	r2, [pc, #88]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002496:	5cd3      	ldrb	r3, [r2, r3]
 8002498:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	2380      	movs	r3, #128	@ 0x80
 800249e:	025b      	lsls	r3, r3, #9
 80024a0:	4013      	ands	r3, r2
 80024a2:	d009      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	4810      	ldr	r0, [pc, #64]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024a8:	f7fd fe38 	bl	800011c <__udivsi3>
 80024ac:	0003      	movs	r3, r0
 80024ae:	001a      	movs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4353      	muls	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	e009      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	000a      	movs	r2, r1
 80024bc:	0152      	lsls	r2, r2, #5
 80024be:	1a52      	subs	r2, r2, r1
 80024c0:	0193      	lsls	r3, r2, #6
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	185b      	adds	r3, r3, r1
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	613b      	str	r3, [r7, #16]
      break;
 80024d0:	e002      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024d2:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024d4:	613b      	str	r3, [r7, #16]
      break;
 80024d6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024d8:	693b      	ldr	r3, [r7, #16]
}
 80024da:	0018      	movs	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	b006      	add	sp, #24
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	40021000 	.word	0x40021000
 80024e8:	007a1200 	.word	0x007a1200
 80024ec:	08003f50 	.word	0x08003f50
 80024f0:	08003f60 	.word	0x08003f60

080024f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f8:	4b02      	ldr	r3, [pc, #8]	@ (8002504 <HAL_RCC_GetHCLKFreq+0x10>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	20000014 	.word	0x20000014

08002508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800250c:	f7ff fff2 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002510:	0001      	movs	r1, r0
 8002512:	4b06      	ldr	r3, [pc, #24]	@ (800252c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	0a1b      	lsrs	r3, r3, #8
 8002518:	2207      	movs	r2, #7
 800251a:	4013      	ands	r3, r2
 800251c:	4a04      	ldr	r2, [pc, #16]	@ (8002530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800251e:	5cd3      	ldrb	r3, [r2, r3]
 8002520:	40d9      	lsrs	r1, r3
 8002522:	000b      	movs	r3, r1
}    
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	40021000 	.word	0x40021000
 8002530:	08003f48 	.word	0x08003f48

08002534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	2380      	movs	r3, #128	@ 0x80
 800254a:	025b      	lsls	r3, r3, #9
 800254c:	4013      	ands	r3, r2
 800254e:	d100      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002550:	e08e      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002552:	2017      	movs	r0, #23
 8002554:	183b      	adds	r3, r7, r0
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255a:	4b57      	ldr	r3, [pc, #348]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	2380      	movs	r3, #128	@ 0x80
 8002560:	055b      	lsls	r3, r3, #21
 8002562:	4013      	ands	r3, r2
 8002564:	d110      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	4b54      	ldr	r3, [pc, #336]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002568:	69da      	ldr	r2, [r3, #28]
 800256a:	4b53      	ldr	r3, [pc, #332]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800256c:	2180      	movs	r1, #128	@ 0x80
 800256e:	0549      	lsls	r1, r1, #21
 8002570:	430a      	orrs	r2, r1
 8002572:	61da      	str	r2, [r3, #28]
 8002574:	4b50      	ldr	r3, [pc, #320]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002576:	69da      	ldr	r2, [r3, #28]
 8002578:	2380      	movs	r3, #128	@ 0x80
 800257a:	055b      	lsls	r3, r3, #21
 800257c:	4013      	ands	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002582:	183b      	adds	r3, r7, r0
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	4b4c      	ldr	r3, [pc, #304]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4013      	ands	r3, r2
 8002592:	d11a      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002594:	4b49      	ldr	r3, [pc, #292]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b48      	ldr	r3, [pc, #288]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800259a:	2180      	movs	r1, #128	@ 0x80
 800259c:	0049      	lsls	r1, r1, #1
 800259e:	430a      	orrs	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a2:	f7fe fe7d 	bl	80012a0 <HAL_GetTick>
 80025a6:	0003      	movs	r3, r0
 80025a8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025aa:	e008      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ac:	f7fe fe78 	bl	80012a0 <HAL_GetTick>
 80025b0:	0002      	movs	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	@ 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e077      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025be:	4b3f      	ldr	r3, [pc, #252]	@ (80026bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	2380      	movs	r3, #128	@ 0x80
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4013      	ands	r3, r2
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025ca:	4b3b      	ldr	r3, [pc, #236]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025cc:	6a1a      	ldr	r2, [r3, #32]
 80025ce:	23c0      	movs	r3, #192	@ 0xc0
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4013      	ands	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d034      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	23c0      	movs	r3, #192	@ 0xc0
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4013      	ands	r3, r2
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d02c      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025ec:	4b32      	ldr	r3, [pc, #200]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4a33      	ldr	r2, [pc, #204]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025f6:	4b30      	ldr	r3, [pc, #192]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025f8:	6a1a      	ldr	r2, [r3, #32]
 80025fa:	4b2f      	ldr	r3, [pc, #188]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025fc:	2180      	movs	r1, #128	@ 0x80
 80025fe:	0249      	lsls	r1, r1, #9
 8002600:	430a      	orrs	r2, r1
 8002602:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002604:	4b2c      	ldr	r3, [pc, #176]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002606:	6a1a      	ldr	r2, [r3, #32]
 8002608:	4b2b      	ldr	r3, [pc, #172]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800260a:	492e      	ldr	r1, [pc, #184]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800260c:	400a      	ands	r2, r1
 800260e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002610:	4b29      	ldr	r3, [pc, #164]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	4013      	ands	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7fe fe3f 	bl	80012a0 <HAL_GetTick>
 8002622:	0003      	movs	r3, r0
 8002624:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	e009      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7fe fe3a 	bl	80012a0 <HAL_GetTick>
 800262c:	0002      	movs	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	4a25      	ldr	r2, [pc, #148]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e038      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263c:	4b1e      	ldr	r3, [pc, #120]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	2202      	movs	r2, #2
 8002642:	4013      	ands	r3, r2
 8002644:	d0f0      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002646:	4b1c      	ldr	r3, [pc, #112]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	4a1d      	ldr	r2, [pc, #116]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800264c:	4013      	ands	r3, r2
 800264e:	0019      	movs	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	4b18      	ldr	r3, [pc, #96]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002656:	430a      	orrs	r2, r1
 8002658:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800265a:	2317      	movs	r3, #23
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d105      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002664:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002666:	69da      	ldr	r2, [r3, #28]
 8002668:	4b13      	ldr	r3, [pc, #76]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800266a:	4918      	ldr	r1, [pc, #96]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800266c:	400a      	ands	r2, r1
 800266e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	4013      	ands	r3, r2
 8002678:	d009      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800267a:	4b0f      	ldr	r3, [pc, #60]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	2203      	movs	r2, #3
 8002680:	4393      	bics	r3, r2
 8002682:	0019      	movs	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800268a:	430a      	orrs	r2, r1
 800268c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2220      	movs	r2, #32
 8002694:	4013      	ands	r3, r2
 8002696:	d009      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002698:	4b07      	ldr	r3, [pc, #28]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269c:	2210      	movs	r2, #16
 800269e:	4393      	bics	r3, r2
 80026a0:	0019      	movs	r1, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	4b04      	ldr	r3, [pc, #16]	@ (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026a8:	430a      	orrs	r2, r1
 80026aa:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	0018      	movs	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b006      	add	sp, #24
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40007000 	.word	0x40007000
 80026c0:	fffffcff 	.word	0xfffffcff
 80026c4:	fffeffff 	.word	0xfffeffff
 80026c8:	00001388 	.word	0x00001388
 80026cc:	efffffff 	.word	0xefffffff

080026d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e044      	b.n	800276c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d107      	bne.n	80026fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2278      	movs	r2, #120	@ 0x78
 80026ee:	2100      	movs	r1, #0
 80026f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7fe fc37 	bl	8000f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2224      	movs	r2, #36	@ 0x24
 80026fe:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2101      	movs	r1, #1
 800270c:	438a      	bics	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	0018      	movs	r0, r3
 800271c:	f000 fa0c 	bl	8002b38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	0018      	movs	r0, r3
 8002724:	f000 f8c8 	bl	80028b8 <UART_SetConfig>
 8002728:	0003      	movs	r3, r0
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e01c      	b.n	800276c <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	490d      	ldr	r1, [pc, #52]	@ (8002774 <HAL_UART_Init+0xa4>)
 800273e:	400a      	ands	r2, r1
 8002740:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2108      	movs	r1, #8
 800274e:	438a      	bics	r2, r1
 8002750:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2101      	movs	r1, #1
 800275e:	430a      	orrs	r2, r1
 8002760:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	0018      	movs	r0, r3
 8002766:	f000 fa9b 	bl	8002ca0 <UART_CheckIdleState>
 800276a:	0003      	movs	r3, r0
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b002      	add	sp, #8
 8002772:	bd80      	pop	{r7, pc}
 8002774:	fffff7ff 	.word	0xfffff7ff

08002778 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	@ 0x28
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	1dbb      	adds	r3, r7, #6
 8002786:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800278c:	2b20      	cmp	r3, #32
 800278e:	d000      	beq.n	8002792 <HAL_UART_Transmit+0x1a>
 8002790:	e08c      	b.n	80028ac <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_UART_Transmit+0x28>
 8002798:	1dbb      	adds	r3, r7, #6
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e084      	b.n	80028ae <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	015b      	lsls	r3, r3, #5
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d109      	bne.n	80027c4 <HAL_UART_Transmit+0x4c>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2201      	movs	r2, #1
 80027bc:	4013      	ands	r3, r2
 80027be:	d001      	beq.n	80027c4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e074      	b.n	80028ae <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2284      	movs	r2, #132	@ 0x84
 80027c8:	2100      	movs	r1, #0
 80027ca:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2221      	movs	r2, #33	@ 0x21
 80027d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027d2:	f7fe fd65 	bl	80012a0 <HAL_GetTick>
 80027d6:	0003      	movs	r3, r0
 80027d8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1dba      	adds	r2, r7, #6
 80027de:	2150      	movs	r1, #80	@ 0x50
 80027e0:	8812      	ldrh	r2, [r2, #0]
 80027e2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1dba      	adds	r2, r7, #6
 80027e8:	2152      	movs	r1, #82	@ 0x52
 80027ea:	8812      	ldrh	r2, [r2, #0]
 80027ec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	2380      	movs	r3, #128	@ 0x80
 80027f4:	015b      	lsls	r3, r3, #5
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d108      	bne.n	800280c <HAL_UART_Transmit+0x94>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d104      	bne.n	800280c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	e003      	b.n	8002814 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002814:	e02f      	b.n	8002876 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	0013      	movs	r3, r2
 8002820:	2200      	movs	r2, #0
 8002822:	2180      	movs	r1, #128	@ 0x80
 8002824:	f000 fae4 	bl	8002df0 <UART_WaitOnFlagUntilTimeout>
 8002828:	1e03      	subs	r3, r0, #0
 800282a:	d004      	beq.n	8002836 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e03b      	b.n	80028ae <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10b      	bne.n	8002854 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	881a      	ldrh	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	05d2      	lsls	r2, r2, #23
 8002846:	0dd2      	lsrs	r2, r2, #23
 8002848:	b292      	uxth	r2, r2
 800284a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	3302      	adds	r3, #2
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	e007      	b.n	8002864 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	781a      	ldrb	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3301      	adds	r3, #1
 8002862:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2252      	movs	r2, #82	@ 0x52
 8002868:	5a9b      	ldrh	r3, [r3, r2]
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b299      	uxth	r1, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2252      	movs	r2, #82	@ 0x52
 8002874:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2252      	movs	r2, #82	@ 0x52
 800287a:	5a9b      	ldrh	r3, [r3, r2]
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1c9      	bne.n	8002816 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	0013      	movs	r3, r2
 800288c:	2200      	movs	r2, #0
 800288e:	2140      	movs	r1, #64	@ 0x40
 8002890:	f000 faae 	bl	8002df0 <UART_WaitOnFlagUntilTimeout>
 8002894:	1e03      	subs	r3, r0, #0
 8002896:	d004      	beq.n	80028a2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e005      	b.n	80028ae <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2220      	movs	r2, #32
 80028a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e000      	b.n	80028ae <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
  }
}
 80028ae:	0018      	movs	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b008      	add	sp, #32
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028c0:	231e      	movs	r3, #30
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a8d      	ldr	r2, [pc, #564]	@ (8002b1c <UART_SetConfig+0x264>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	0019      	movs	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a88      	ldr	r2, [pc, #544]	@ (8002b20 <UART_SetConfig+0x268>)
 80028fe:	4013      	ands	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	4313      	orrs	r3, r2
 800291c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4a7f      	ldr	r2, [pc, #508]	@ (8002b24 <UART_SetConfig+0x26c>)
 8002926:	4013      	ands	r3, r2
 8002928:	0019      	movs	r1, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	430a      	orrs	r2, r1
 8002932:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a7b      	ldr	r2, [pc, #492]	@ (8002b28 <UART_SetConfig+0x270>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d127      	bne.n	800298e <UART_SetConfig+0xd6>
 800293e:	4b7b      	ldr	r3, [pc, #492]	@ (8002b2c <UART_SetConfig+0x274>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	2203      	movs	r2, #3
 8002944:	4013      	ands	r3, r2
 8002946:	2b03      	cmp	r3, #3
 8002948:	d00d      	beq.n	8002966 <UART_SetConfig+0xae>
 800294a:	d81b      	bhi.n	8002984 <UART_SetConfig+0xcc>
 800294c:	2b02      	cmp	r3, #2
 800294e:	d014      	beq.n	800297a <UART_SetConfig+0xc2>
 8002950:	d818      	bhi.n	8002984 <UART_SetConfig+0xcc>
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <UART_SetConfig+0xa4>
 8002956:	2b01      	cmp	r3, #1
 8002958:	d00a      	beq.n	8002970 <UART_SetConfig+0xb8>
 800295a:	e013      	b.n	8002984 <UART_SetConfig+0xcc>
 800295c:	231f      	movs	r3, #31
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	e021      	b.n	80029aa <UART_SetConfig+0xf2>
 8002966:	231f      	movs	r3, #31
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	2202      	movs	r2, #2
 800296c:	701a      	strb	r2, [r3, #0]
 800296e:	e01c      	b.n	80029aa <UART_SetConfig+0xf2>
 8002970:	231f      	movs	r3, #31
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	2204      	movs	r2, #4
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	e017      	b.n	80029aa <UART_SetConfig+0xf2>
 800297a:	231f      	movs	r3, #31
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	2208      	movs	r2, #8
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	e012      	b.n	80029aa <UART_SetConfig+0xf2>
 8002984:	231f      	movs	r3, #31
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	2210      	movs	r2, #16
 800298a:	701a      	strb	r2, [r3, #0]
 800298c:	e00d      	b.n	80029aa <UART_SetConfig+0xf2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a67      	ldr	r2, [pc, #412]	@ (8002b30 <UART_SetConfig+0x278>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d104      	bne.n	80029a2 <UART_SetConfig+0xea>
 8002998:	231f      	movs	r3, #31
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	e003      	b.n	80029aa <UART_SetConfig+0xf2>
 80029a2:	231f      	movs	r3, #31
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	2210      	movs	r2, #16
 80029a8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	2380      	movs	r3, #128	@ 0x80
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d15c      	bne.n	8002a70 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80029b6:	231f      	movs	r3, #31
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d015      	beq.n	80029ec <UART_SetConfig+0x134>
 80029c0:	dc18      	bgt.n	80029f4 <UART_SetConfig+0x13c>
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d00d      	beq.n	80029e2 <UART_SetConfig+0x12a>
 80029c6:	dc15      	bgt.n	80029f4 <UART_SetConfig+0x13c>
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <UART_SetConfig+0x11a>
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d005      	beq.n	80029dc <UART_SetConfig+0x124>
 80029d0:	e010      	b.n	80029f4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029d2:	f7ff fd99 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 80029d6:	0003      	movs	r3, r0
 80029d8:	61bb      	str	r3, [r7, #24]
        break;
 80029da:	e012      	b.n	8002a02 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029dc:	4b55      	ldr	r3, [pc, #340]	@ (8002b34 <UART_SetConfig+0x27c>)
 80029de:	61bb      	str	r3, [r7, #24]
        break;
 80029e0:	e00f      	b.n	8002a02 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029e2:	f7ff fd31 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 80029e6:	0003      	movs	r3, r0
 80029e8:	61bb      	str	r3, [r7, #24]
        break;
 80029ea:	e00a      	b.n	8002a02 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029ec:	2380      	movs	r3, #128	@ 0x80
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	61bb      	str	r3, [r7, #24]
        break;
 80029f2:	e006      	b.n	8002a02 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029f8:	231e      	movs	r3, #30
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	2201      	movs	r2, #1
 80029fe:	701a      	strb	r2, [r3, #0]
        break;
 8002a00:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d100      	bne.n	8002a0a <UART_SetConfig+0x152>
 8002a08:	e07a      	b.n	8002b00 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	005a      	lsls	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	085b      	lsrs	r3, r3, #1
 8002a14:	18d2      	adds	r2, r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	0010      	movs	r0, r2
 8002a1e:	f7fd fb7d 	bl	800011c <__udivsi3>
 8002a22:	0003      	movs	r3, r0
 8002a24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b0f      	cmp	r3, #15
 8002a2a:	d91c      	bls.n	8002a66 <UART_SetConfig+0x1ae>
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	2380      	movs	r3, #128	@ 0x80
 8002a30:	025b      	lsls	r3, r3, #9
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d217      	bcs.n	8002a66 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	200e      	movs	r0, #14
 8002a3c:	183b      	adds	r3, r7, r0
 8002a3e:	210f      	movs	r1, #15
 8002a40:	438a      	bics	r2, r1
 8002a42:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2207      	movs	r2, #7
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	b299      	uxth	r1, r3
 8002a50:	183b      	adds	r3, r7, r0
 8002a52:	183a      	adds	r2, r7, r0
 8002a54:	8812      	ldrh	r2, [r2, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	183a      	adds	r2, r7, r0
 8002a60:	8812      	ldrh	r2, [r2, #0]
 8002a62:	60da      	str	r2, [r3, #12]
 8002a64:	e04c      	b.n	8002b00 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002a66:	231e      	movs	r3, #30
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]
 8002a6e:	e047      	b.n	8002b00 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a70:	231f      	movs	r3, #31
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d015      	beq.n	8002aa6 <UART_SetConfig+0x1ee>
 8002a7a:	dc18      	bgt.n	8002aae <UART_SetConfig+0x1f6>
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d00d      	beq.n	8002a9c <UART_SetConfig+0x1e4>
 8002a80:	dc15      	bgt.n	8002aae <UART_SetConfig+0x1f6>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <UART_SetConfig+0x1d4>
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d005      	beq.n	8002a96 <UART_SetConfig+0x1de>
 8002a8a:	e010      	b.n	8002aae <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a8c:	f7ff fd3c 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8002a90:	0003      	movs	r3, r0
 8002a92:	61bb      	str	r3, [r7, #24]
        break;
 8002a94:	e012      	b.n	8002abc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a96:	4b27      	ldr	r3, [pc, #156]	@ (8002b34 <UART_SetConfig+0x27c>)
 8002a98:	61bb      	str	r3, [r7, #24]
        break;
 8002a9a:	e00f      	b.n	8002abc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a9c:	f7ff fcd4 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	61bb      	str	r3, [r7, #24]
        break;
 8002aa4:	e00a      	b.n	8002abc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aa6:	2380      	movs	r3, #128	@ 0x80
 8002aa8:	021b      	lsls	r3, r3, #8
 8002aaa:	61bb      	str	r3, [r7, #24]
        break;
 8002aac:	e006      	b.n	8002abc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ab2:	231e      	movs	r3, #30
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
        break;
 8002aba:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d01e      	beq.n	8002b00 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	085a      	lsrs	r2, r3, #1
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	18d2      	adds	r2, r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	0010      	movs	r0, r2
 8002ad4:	f7fd fb22 	bl	800011c <__udivsi3>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	2b0f      	cmp	r3, #15
 8002ae0:	d90a      	bls.n	8002af8 <UART_SetConfig+0x240>
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	025b      	lsls	r3, r3, #9
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d205      	bcs.n	8002af8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	e003      	b.n	8002b00 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002af8:	231e      	movs	r3, #30
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002b0c:	231e      	movs	r3, #30
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	781b      	ldrb	r3, [r3, #0]
}
 8002b12:	0018      	movs	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b008      	add	sp, #32
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			@ (mov r8, r8)
 8002b1c:	ffff69f3 	.word	0xffff69f3
 8002b20:	ffffcfff 	.word	0xffffcfff
 8002b24:	fffff4ff 	.word	0xfffff4ff
 8002b28:	40013800 	.word	0x40013800
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40004400 	.word	0x40004400
 8002b34:	007a1200 	.word	0x007a1200

08002b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	2208      	movs	r2, #8
 8002b46:	4013      	ands	r3, r2
 8002b48:	d00b      	beq.n	8002b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4a4a      	ldr	r2, [pc, #296]	@ (8002c7c <UART_AdvFeatureConfig+0x144>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	0019      	movs	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	2201      	movs	r2, #1
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d00b      	beq.n	8002b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a43      	ldr	r2, [pc, #268]	@ (8002c80 <UART_AdvFeatureConfig+0x148>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	0019      	movs	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	2202      	movs	r2, #2
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d00b      	beq.n	8002ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a3b      	ldr	r2, [pc, #236]	@ (8002c84 <UART_AdvFeatureConfig+0x14c>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	2204      	movs	r2, #4
 8002bac:	4013      	ands	r3, r2
 8002bae:	d00b      	beq.n	8002bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4a34      	ldr	r2, [pc, #208]	@ (8002c88 <UART_AdvFeatureConfig+0x150>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	0019      	movs	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	2210      	movs	r2, #16
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d00b      	beq.n	8002bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	4a2c      	ldr	r2, [pc, #176]	@ (8002c8c <UART_AdvFeatureConfig+0x154>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	2220      	movs	r2, #32
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d00b      	beq.n	8002c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	4a25      	ldr	r2, [pc, #148]	@ (8002c90 <UART_AdvFeatureConfig+0x158>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	0019      	movs	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	2240      	movs	r2, #64	@ 0x40
 8002c12:	4013      	ands	r3, r2
 8002c14:	d01d      	beq.n	8002c52 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c94 <UART_AdvFeatureConfig+0x15c>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c32:	2380      	movs	r3, #128	@ 0x80
 8002c34:	035b      	lsls	r3, r3, #13
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d10b      	bne.n	8002c52 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4a15      	ldr	r2, [pc, #84]	@ (8002c98 <UART_AdvFeatureConfig+0x160>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	0019      	movs	r1, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	2280      	movs	r2, #128	@ 0x80
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d00b      	beq.n	8002c74 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4a0e      	ldr	r2, [pc, #56]	@ (8002c9c <UART_AdvFeatureConfig+0x164>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	0019      	movs	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]
  }
}
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	ffff7fff 	.word	0xffff7fff
 8002c80:	fffdffff 	.word	0xfffdffff
 8002c84:	fffeffff 	.word	0xfffeffff
 8002c88:	fffbffff 	.word	0xfffbffff
 8002c8c:	ffffefff 	.word	0xffffefff
 8002c90:	ffffdfff 	.word	0xffffdfff
 8002c94:	ffefffff 	.word	0xffefffff
 8002c98:	ff9fffff 	.word	0xff9fffff
 8002c9c:	fff7ffff 	.word	0xfff7ffff

08002ca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b092      	sub	sp, #72	@ 0x48
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2284      	movs	r2, #132	@ 0x84
 8002cac:	2100      	movs	r1, #0
 8002cae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cb0:	f7fe faf6 	bl	80012a0 <HAL_GetTick>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2208      	movs	r2, #8
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d12c      	bne.n	8002d20 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cc8:	2280      	movs	r2, #128	@ 0x80
 8002cca:	0391      	lsls	r1, r2, #14
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	4a46      	ldr	r2, [pc, #280]	@ (8002de8 <UART_CheckIdleState+0x148>)
 8002cd0:	9200      	str	r2, [sp, #0]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f000 f88c 	bl	8002df0 <UART_WaitOnFlagUntilTimeout>
 8002cd8:	1e03      	subs	r3, r0, #0
 8002cda:	d021      	beq.n	8002d20 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cec:	f383 8810 	msr	PRIMASK, r3
}
 8002cf0:	46c0      	nop			@ (mov r8, r8)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2180      	movs	r1, #128	@ 0x80
 8002cfe:	438a      	bics	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2278      	movs	r2, #120	@ 0x78
 8002d18:	2100      	movs	r1, #0
 8002d1a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e05f      	b.n	8002de0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2204      	movs	r2, #4
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d146      	bne.n	8002dbc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d30:	2280      	movs	r2, #128	@ 0x80
 8002d32:	03d1      	lsls	r1, r2, #15
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	4a2c      	ldr	r2, [pc, #176]	@ (8002de8 <UART_CheckIdleState+0x148>)
 8002d38:	9200      	str	r2, [sp, #0]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f000 f858 	bl	8002df0 <UART_WaitOnFlagUntilTimeout>
 8002d40:	1e03      	subs	r3, r0, #0
 8002d42:	d03b      	beq.n	8002dbc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d44:	f3ef 8310 	mrs	r3, PRIMASK
 8002d48:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d4e:	2301      	movs	r3, #1
 8002d50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f383 8810 	msr	PRIMASK, r3
}
 8002d58:	46c0      	nop			@ (mov r8, r8)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4921      	ldr	r1, [pc, #132]	@ (8002dec <UART_CheckIdleState+0x14c>)
 8002d66:	400a      	ands	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f383 8810 	msr	PRIMASK, r3
}
 8002d74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d76:	f3ef 8310 	mrs	r3, PRIMASK
 8002d7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d7c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d80:	2301      	movs	r3, #1
 8002d82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f383 8810 	msr	PRIMASK, r3
}
 8002d8a:	46c0      	nop			@ (mov r8, r8)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2101      	movs	r1, #1
 8002d98:	438a      	bics	r2, r1
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	f383 8810 	msr	PRIMASK, r3
}
 8002da6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2280      	movs	r2, #128	@ 0x80
 8002dac:	2120      	movs	r1, #32
 8002dae:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2278      	movs	r2, #120	@ 0x78
 8002db4:	2100      	movs	r1, #0
 8002db6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e011      	b.n	8002de0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2280      	movs	r2, #128	@ 0x80
 8002dc6:	2120      	movs	r1, #32
 8002dc8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2278      	movs	r2, #120	@ 0x78
 8002dda:	2100      	movs	r1, #0
 8002ddc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b010      	add	sp, #64	@ 0x40
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	01ffffff 	.word	0x01ffffff
 8002dec:	fffffedf 	.word	0xfffffedf

08002df0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	1dfb      	adds	r3, r7, #7
 8002dfe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e00:	e051      	b.n	8002ea6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	3301      	adds	r3, #1
 8002e06:	d04e      	beq.n	8002ea6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e08:	f7fe fa4a 	bl	80012a0 <HAL_GetTick>
 8002e0c:	0002      	movs	r2, r0
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d302      	bcc.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e051      	b.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2204      	movs	r2, #4
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d03b      	beq.n	8002ea6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b80      	cmp	r3, #128	@ 0x80
 8002e32:	d038      	beq.n	8002ea6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b40      	cmp	r3, #64	@ 0x40
 8002e38:	d035      	beq.n	8002ea6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	2208      	movs	r2, #8
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d111      	bne.n	8002e6c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	0018      	movs	r0, r3
 8002e54:	f000 f83c 	bl	8002ed0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2284      	movs	r2, #132	@ 0x84
 8002e5c:	2108      	movs	r1, #8
 8002e5e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2278      	movs	r2, #120	@ 0x78
 8002e64:	2100      	movs	r1, #0
 8002e66:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e02c      	b.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	69da      	ldr	r2, [r3, #28]
 8002e72:	2380      	movs	r3, #128	@ 0x80
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	401a      	ands	r2, r3
 8002e78:	2380      	movs	r3, #128	@ 0x80
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d112      	bne.n	8002ea6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2280      	movs	r2, #128	@ 0x80
 8002e86:	0112      	lsls	r2, r2, #4
 8002e88:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 f81f 	bl	8002ed0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2284      	movs	r2, #132	@ 0x84
 8002e96:	2120      	movs	r1, #32
 8002e98:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2278      	movs	r2, #120	@ 0x78
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e00f      	b.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	425a      	negs	r2, r3
 8002eb6:	4153      	adcs	r3, r2
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	001a      	movs	r2, r3
 8002ebc:	1dfb      	adds	r3, r7, #7
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d09e      	beq.n	8002e02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b004      	add	sp, #16
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08e      	sub	sp, #56	@ 0x38
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8002edc:	617b      	str	r3, [r7, #20]
  return(result);
 8002ede:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f383 8810 	msr	PRIMASK, r3
}
 8002eec:	46c0      	nop			@ (mov r8, r8)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4926      	ldr	r1, [pc, #152]	@ (8002f94 <UART_EndRxTransfer+0xc4>)
 8002efa:	400a      	ands	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f383 8810 	msr	PRIMASK, r3
}
 8002f08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0e:	623b      	str	r3, [r7, #32]
  return(result);
 8002f10:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f12:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f14:	2301      	movs	r3, #1
 8002f16:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	f383 8810 	msr	PRIMASK, r3
}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	438a      	bics	r2, r1
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f36:	f383 8810 	msr	PRIMASK, r3
}
 8002f3a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d118      	bne.n	8002f76 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f44:	f3ef 8310 	mrs	r3, PRIMASK
 8002f48:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f4e:	2301      	movs	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f383 8810 	msr	PRIMASK, r3
}
 8002f58:	46c0      	nop			@ (mov r8, r8)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2110      	movs	r1, #16
 8002f66:	438a      	bics	r2, r1
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f383 8810 	msr	PRIMASK, r3
}
 8002f74:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2280      	movs	r2, #128	@ 0x80
 8002f7a:	2120      	movs	r1, #32
 8002f7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b00e      	add	sp, #56	@ 0x38
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	fffffedf 	.word	0xfffffedf

08002f98 <std>:
 8002f98:	2300      	movs	r3, #0
 8002f9a:	b510      	push	{r4, lr}
 8002f9c:	0004      	movs	r4, r0
 8002f9e:	6003      	str	r3, [r0, #0]
 8002fa0:	6043      	str	r3, [r0, #4]
 8002fa2:	6083      	str	r3, [r0, #8]
 8002fa4:	8181      	strh	r1, [r0, #12]
 8002fa6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002fa8:	81c2      	strh	r2, [r0, #14]
 8002faa:	6103      	str	r3, [r0, #16]
 8002fac:	6143      	str	r3, [r0, #20]
 8002fae:	6183      	str	r3, [r0, #24]
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	305c      	adds	r0, #92	@ 0x5c
 8002fb6:	f000 f90f 	bl	80031d8 <memset>
 8002fba:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe8 <std+0x50>)
 8002fbc:	6224      	str	r4, [r4, #32]
 8002fbe:	6263      	str	r3, [r4, #36]	@ 0x24
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fec <std+0x54>)
 8002fc2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff0 <std+0x58>)
 8002fc6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff4 <std+0x5c>)
 8002fca:	6323      	str	r3, [r4, #48]	@ 0x30
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff8 <std+0x60>)
 8002fce:	429c      	cmp	r4, r3
 8002fd0:	d005      	beq.n	8002fde <std+0x46>
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <std+0x64>)
 8002fd4:	429c      	cmp	r4, r3
 8002fd6:	d002      	beq.n	8002fde <std+0x46>
 8002fd8:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <std+0x68>)
 8002fda:	429c      	cmp	r4, r3
 8002fdc:	d103      	bne.n	8002fe6 <std+0x4e>
 8002fde:	0020      	movs	r0, r4
 8002fe0:	3058      	adds	r0, #88	@ 0x58
 8002fe2:	f000 f979 	bl	80032d8 <__retarget_lock_init_recursive>
 8002fe6:	bd10      	pop	{r4, pc}
 8002fe8:	08003141 	.word	0x08003141
 8002fec:	08003169 	.word	0x08003169
 8002ff0:	080031a1 	.word	0x080031a1
 8002ff4:	080031cd 	.word	0x080031cd
 8002ff8:	20000188 	.word	0x20000188
 8002ffc:	200001f0 	.word	0x200001f0
 8003000:	20000258 	.word	0x20000258

08003004 <stdio_exit_handler>:
 8003004:	b510      	push	{r4, lr}
 8003006:	4a03      	ldr	r2, [pc, #12]	@ (8003014 <stdio_exit_handler+0x10>)
 8003008:	4903      	ldr	r1, [pc, #12]	@ (8003018 <stdio_exit_handler+0x14>)
 800300a:	4804      	ldr	r0, [pc, #16]	@ (800301c <stdio_exit_handler+0x18>)
 800300c:	f000 f86c 	bl	80030e8 <_fwalk_sglue>
 8003010:	bd10      	pop	{r4, pc}
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	20000020 	.word	0x20000020
 8003018:	08003b69 	.word	0x08003b69
 800301c:	20000030 	.word	0x20000030

08003020 <cleanup_stdio>:
 8003020:	6841      	ldr	r1, [r0, #4]
 8003022:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <cleanup_stdio+0x30>)
 8003024:	b510      	push	{r4, lr}
 8003026:	0004      	movs	r4, r0
 8003028:	4299      	cmp	r1, r3
 800302a:	d001      	beq.n	8003030 <cleanup_stdio+0x10>
 800302c:	f000 fd9c 	bl	8003b68 <_fflush_r>
 8003030:	68a1      	ldr	r1, [r4, #8]
 8003032:	4b08      	ldr	r3, [pc, #32]	@ (8003054 <cleanup_stdio+0x34>)
 8003034:	4299      	cmp	r1, r3
 8003036:	d002      	beq.n	800303e <cleanup_stdio+0x1e>
 8003038:	0020      	movs	r0, r4
 800303a:	f000 fd95 	bl	8003b68 <_fflush_r>
 800303e:	68e1      	ldr	r1, [r4, #12]
 8003040:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <cleanup_stdio+0x38>)
 8003042:	4299      	cmp	r1, r3
 8003044:	d002      	beq.n	800304c <cleanup_stdio+0x2c>
 8003046:	0020      	movs	r0, r4
 8003048:	f000 fd8e 	bl	8003b68 <_fflush_r>
 800304c:	bd10      	pop	{r4, pc}
 800304e:	46c0      	nop			@ (mov r8, r8)
 8003050:	20000188 	.word	0x20000188
 8003054:	200001f0 	.word	0x200001f0
 8003058:	20000258 	.word	0x20000258

0800305c <global_stdio_init.part.0>:
 800305c:	b510      	push	{r4, lr}
 800305e:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <global_stdio_init.part.0+0x28>)
 8003060:	4a09      	ldr	r2, [pc, #36]	@ (8003088 <global_stdio_init.part.0+0x2c>)
 8003062:	2104      	movs	r1, #4
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	4809      	ldr	r0, [pc, #36]	@ (800308c <global_stdio_init.part.0+0x30>)
 8003068:	2200      	movs	r2, #0
 800306a:	f7ff ff95 	bl	8002f98 <std>
 800306e:	2201      	movs	r2, #1
 8003070:	2109      	movs	r1, #9
 8003072:	4807      	ldr	r0, [pc, #28]	@ (8003090 <global_stdio_init.part.0+0x34>)
 8003074:	f7ff ff90 	bl	8002f98 <std>
 8003078:	2202      	movs	r2, #2
 800307a:	2112      	movs	r1, #18
 800307c:	4805      	ldr	r0, [pc, #20]	@ (8003094 <global_stdio_init.part.0+0x38>)
 800307e:	f7ff ff8b 	bl	8002f98 <std>
 8003082:	bd10      	pop	{r4, pc}
 8003084:	200002c0 	.word	0x200002c0
 8003088:	08003005 	.word	0x08003005
 800308c:	20000188 	.word	0x20000188
 8003090:	200001f0 	.word	0x200001f0
 8003094:	20000258 	.word	0x20000258

08003098 <__sfp_lock_acquire>:
 8003098:	b510      	push	{r4, lr}
 800309a:	4802      	ldr	r0, [pc, #8]	@ (80030a4 <__sfp_lock_acquire+0xc>)
 800309c:	f000 f91d 	bl	80032da <__retarget_lock_acquire_recursive>
 80030a0:	bd10      	pop	{r4, pc}
 80030a2:	46c0      	nop			@ (mov r8, r8)
 80030a4:	200002c9 	.word	0x200002c9

080030a8 <__sfp_lock_release>:
 80030a8:	b510      	push	{r4, lr}
 80030aa:	4802      	ldr	r0, [pc, #8]	@ (80030b4 <__sfp_lock_release+0xc>)
 80030ac:	f000 f916 	bl	80032dc <__retarget_lock_release_recursive>
 80030b0:	bd10      	pop	{r4, pc}
 80030b2:	46c0      	nop			@ (mov r8, r8)
 80030b4:	200002c9 	.word	0x200002c9

080030b8 <__sinit>:
 80030b8:	b510      	push	{r4, lr}
 80030ba:	0004      	movs	r4, r0
 80030bc:	f7ff ffec 	bl	8003098 <__sfp_lock_acquire>
 80030c0:	6a23      	ldr	r3, [r4, #32]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <__sinit+0x14>
 80030c6:	f7ff ffef 	bl	80030a8 <__sfp_lock_release>
 80030ca:	bd10      	pop	{r4, pc}
 80030cc:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <__sinit+0x28>)
 80030ce:	6223      	str	r3, [r4, #32]
 80030d0:	4b04      	ldr	r3, [pc, #16]	@ (80030e4 <__sinit+0x2c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f6      	bne.n	80030c6 <__sinit+0xe>
 80030d8:	f7ff ffc0 	bl	800305c <global_stdio_init.part.0>
 80030dc:	e7f3      	b.n	80030c6 <__sinit+0xe>
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	08003021 	.word	0x08003021
 80030e4:	200002c0 	.word	0x200002c0

080030e8 <_fwalk_sglue>:
 80030e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030ea:	0014      	movs	r4, r2
 80030ec:	2600      	movs	r6, #0
 80030ee:	9000      	str	r0, [sp, #0]
 80030f0:	9101      	str	r1, [sp, #4]
 80030f2:	68a5      	ldr	r5, [r4, #8]
 80030f4:	6867      	ldr	r7, [r4, #4]
 80030f6:	3f01      	subs	r7, #1
 80030f8:	d504      	bpl.n	8003104 <_fwalk_sglue+0x1c>
 80030fa:	6824      	ldr	r4, [r4, #0]
 80030fc:	2c00      	cmp	r4, #0
 80030fe:	d1f8      	bne.n	80030f2 <_fwalk_sglue+0xa>
 8003100:	0030      	movs	r0, r6
 8003102:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003104:	89ab      	ldrh	r3, [r5, #12]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d908      	bls.n	800311c <_fwalk_sglue+0x34>
 800310a:	220e      	movs	r2, #14
 800310c:	5eab      	ldrsh	r3, [r5, r2]
 800310e:	3301      	adds	r3, #1
 8003110:	d004      	beq.n	800311c <_fwalk_sglue+0x34>
 8003112:	0029      	movs	r1, r5
 8003114:	9800      	ldr	r0, [sp, #0]
 8003116:	9b01      	ldr	r3, [sp, #4]
 8003118:	4798      	blx	r3
 800311a:	4306      	orrs	r6, r0
 800311c:	3568      	adds	r5, #104	@ 0x68
 800311e:	e7ea      	b.n	80030f6 <_fwalk_sglue+0xe>

08003120 <iprintf>:
 8003120:	b40f      	push	{r0, r1, r2, r3}
 8003122:	b507      	push	{r0, r1, r2, lr}
 8003124:	4905      	ldr	r1, [pc, #20]	@ (800313c <iprintf+0x1c>)
 8003126:	ab04      	add	r3, sp, #16
 8003128:	6808      	ldr	r0, [r1, #0]
 800312a:	cb04      	ldmia	r3!, {r2}
 800312c:	6881      	ldr	r1, [r0, #8]
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	f000 f9fa 	bl	8003528 <_vfiprintf_r>
 8003134:	b003      	add	sp, #12
 8003136:	bc08      	pop	{r3}
 8003138:	b004      	add	sp, #16
 800313a:	4718      	bx	r3
 800313c:	2000002c 	.word	0x2000002c

08003140 <__sread>:
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	000c      	movs	r4, r1
 8003144:	250e      	movs	r5, #14
 8003146:	5f49      	ldrsh	r1, [r1, r5]
 8003148:	f000 f874 	bl	8003234 <_read_r>
 800314c:	2800      	cmp	r0, #0
 800314e:	db03      	blt.n	8003158 <__sread+0x18>
 8003150:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003152:	181b      	adds	r3, r3, r0
 8003154:	6563      	str	r3, [r4, #84]	@ 0x54
 8003156:	bd70      	pop	{r4, r5, r6, pc}
 8003158:	89a3      	ldrh	r3, [r4, #12]
 800315a:	4a02      	ldr	r2, [pc, #8]	@ (8003164 <__sread+0x24>)
 800315c:	4013      	ands	r3, r2
 800315e:	81a3      	strh	r3, [r4, #12]
 8003160:	e7f9      	b.n	8003156 <__sread+0x16>
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	ffffefff 	.word	0xffffefff

08003168 <__swrite>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	001f      	movs	r7, r3
 800316c:	898b      	ldrh	r3, [r1, #12]
 800316e:	0005      	movs	r5, r0
 8003170:	000c      	movs	r4, r1
 8003172:	0016      	movs	r6, r2
 8003174:	05db      	lsls	r3, r3, #23
 8003176:	d505      	bpl.n	8003184 <__swrite+0x1c>
 8003178:	230e      	movs	r3, #14
 800317a:	5ec9      	ldrsh	r1, [r1, r3]
 800317c:	2200      	movs	r2, #0
 800317e:	2302      	movs	r3, #2
 8003180:	f000 f844 	bl	800320c <_lseek_r>
 8003184:	89a3      	ldrh	r3, [r4, #12]
 8003186:	4a05      	ldr	r2, [pc, #20]	@ (800319c <__swrite+0x34>)
 8003188:	0028      	movs	r0, r5
 800318a:	4013      	ands	r3, r2
 800318c:	81a3      	strh	r3, [r4, #12]
 800318e:	0032      	movs	r2, r6
 8003190:	230e      	movs	r3, #14
 8003192:	5ee1      	ldrsh	r1, [r4, r3]
 8003194:	003b      	movs	r3, r7
 8003196:	f000 f861 	bl	800325c <_write_r>
 800319a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800319c:	ffffefff 	.word	0xffffefff

080031a0 <__sseek>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	000c      	movs	r4, r1
 80031a4:	250e      	movs	r5, #14
 80031a6:	5f49      	ldrsh	r1, [r1, r5]
 80031a8:	f000 f830 	bl	800320c <_lseek_r>
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	1c42      	adds	r2, r0, #1
 80031b0:	d103      	bne.n	80031ba <__sseek+0x1a>
 80031b2:	4a05      	ldr	r2, [pc, #20]	@ (80031c8 <__sseek+0x28>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	81a3      	strh	r3, [r4, #12]
 80031b8:	bd70      	pop	{r4, r5, r6, pc}
 80031ba:	2280      	movs	r2, #128	@ 0x80
 80031bc:	0152      	lsls	r2, r2, #5
 80031be:	4313      	orrs	r3, r2
 80031c0:	81a3      	strh	r3, [r4, #12]
 80031c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80031c4:	e7f8      	b.n	80031b8 <__sseek+0x18>
 80031c6:	46c0      	nop			@ (mov r8, r8)
 80031c8:	ffffefff 	.word	0xffffefff

080031cc <__sclose>:
 80031cc:	b510      	push	{r4, lr}
 80031ce:	230e      	movs	r3, #14
 80031d0:	5ec9      	ldrsh	r1, [r1, r3]
 80031d2:	f000 f809 	bl	80031e8 <_close_r>
 80031d6:	bd10      	pop	{r4, pc}

080031d8 <memset>:
 80031d8:	0003      	movs	r3, r0
 80031da:	1882      	adds	r2, r0, r2
 80031dc:	4293      	cmp	r3, r2
 80031de:	d100      	bne.n	80031e2 <memset+0xa>
 80031e0:	4770      	bx	lr
 80031e2:	7019      	strb	r1, [r3, #0]
 80031e4:	3301      	adds	r3, #1
 80031e6:	e7f9      	b.n	80031dc <memset+0x4>

080031e8 <_close_r>:
 80031e8:	2300      	movs	r3, #0
 80031ea:	b570      	push	{r4, r5, r6, lr}
 80031ec:	4d06      	ldr	r5, [pc, #24]	@ (8003208 <_close_r+0x20>)
 80031ee:	0004      	movs	r4, r0
 80031f0:	0008      	movs	r0, r1
 80031f2:	602b      	str	r3, [r5, #0]
 80031f4:	f7fd ff67 	bl	80010c6 <_close>
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d103      	bne.n	8003204 <_close_r+0x1c>
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d000      	beq.n	8003204 <_close_r+0x1c>
 8003202:	6023      	str	r3, [r4, #0]
 8003204:	bd70      	pop	{r4, r5, r6, pc}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	200002c4 	.word	0x200002c4

0800320c <_lseek_r>:
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	0004      	movs	r4, r0
 8003210:	0008      	movs	r0, r1
 8003212:	0011      	movs	r1, r2
 8003214:	001a      	movs	r2, r3
 8003216:	2300      	movs	r3, #0
 8003218:	4d05      	ldr	r5, [pc, #20]	@ (8003230 <_lseek_r+0x24>)
 800321a:	602b      	str	r3, [r5, #0]
 800321c:	f7fd ff74 	bl	8001108 <_lseek>
 8003220:	1c43      	adds	r3, r0, #1
 8003222:	d103      	bne.n	800322c <_lseek_r+0x20>
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d000      	beq.n	800322c <_lseek_r+0x20>
 800322a:	6023      	str	r3, [r4, #0]
 800322c:	bd70      	pop	{r4, r5, r6, pc}
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	200002c4 	.word	0x200002c4

08003234 <_read_r>:
 8003234:	b570      	push	{r4, r5, r6, lr}
 8003236:	0004      	movs	r4, r0
 8003238:	0008      	movs	r0, r1
 800323a:	0011      	movs	r1, r2
 800323c:	001a      	movs	r2, r3
 800323e:	2300      	movs	r3, #0
 8003240:	4d05      	ldr	r5, [pc, #20]	@ (8003258 <_read_r+0x24>)
 8003242:	602b      	str	r3, [r5, #0]
 8003244:	f7fd ff06 	bl	8001054 <_read>
 8003248:	1c43      	adds	r3, r0, #1
 800324a:	d103      	bne.n	8003254 <_read_r+0x20>
 800324c:	682b      	ldr	r3, [r5, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d000      	beq.n	8003254 <_read_r+0x20>
 8003252:	6023      	str	r3, [r4, #0]
 8003254:	bd70      	pop	{r4, r5, r6, pc}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	200002c4 	.word	0x200002c4

0800325c <_write_r>:
 800325c:	b570      	push	{r4, r5, r6, lr}
 800325e:	0004      	movs	r4, r0
 8003260:	0008      	movs	r0, r1
 8003262:	0011      	movs	r1, r2
 8003264:	001a      	movs	r2, r3
 8003266:	2300      	movs	r3, #0
 8003268:	4d05      	ldr	r5, [pc, #20]	@ (8003280 <_write_r+0x24>)
 800326a:	602b      	str	r3, [r5, #0]
 800326c:	f7fd ff0f 	bl	800108e <_write>
 8003270:	1c43      	adds	r3, r0, #1
 8003272:	d103      	bne.n	800327c <_write_r+0x20>
 8003274:	682b      	ldr	r3, [r5, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d000      	beq.n	800327c <_write_r+0x20>
 800327a:	6023      	str	r3, [r4, #0]
 800327c:	bd70      	pop	{r4, r5, r6, pc}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	200002c4 	.word	0x200002c4

08003284 <__errno>:
 8003284:	4b01      	ldr	r3, [pc, #4]	@ (800328c <__errno+0x8>)
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	4770      	bx	lr
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	2000002c 	.word	0x2000002c

08003290 <__libc_init_array>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	2600      	movs	r6, #0
 8003294:	4c0c      	ldr	r4, [pc, #48]	@ (80032c8 <__libc_init_array+0x38>)
 8003296:	4d0d      	ldr	r5, [pc, #52]	@ (80032cc <__libc_init_array+0x3c>)
 8003298:	1b64      	subs	r4, r4, r5
 800329a:	10a4      	asrs	r4, r4, #2
 800329c:	42a6      	cmp	r6, r4
 800329e:	d109      	bne.n	80032b4 <__libc_init_array+0x24>
 80032a0:	2600      	movs	r6, #0
 80032a2:	f000 fddb 	bl	8003e5c <_init>
 80032a6:	4c0a      	ldr	r4, [pc, #40]	@ (80032d0 <__libc_init_array+0x40>)
 80032a8:	4d0a      	ldr	r5, [pc, #40]	@ (80032d4 <__libc_init_array+0x44>)
 80032aa:	1b64      	subs	r4, r4, r5
 80032ac:	10a4      	asrs	r4, r4, #2
 80032ae:	42a6      	cmp	r6, r4
 80032b0:	d105      	bne.n	80032be <__libc_init_array+0x2e>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	00b3      	lsls	r3, r6, #2
 80032b6:	58eb      	ldr	r3, [r5, r3]
 80032b8:	4798      	blx	r3
 80032ba:	3601      	adds	r6, #1
 80032bc:	e7ee      	b.n	800329c <__libc_init_array+0xc>
 80032be:	00b3      	lsls	r3, r6, #2
 80032c0:	58eb      	ldr	r3, [r5, r3]
 80032c2:	4798      	blx	r3
 80032c4:	3601      	adds	r6, #1
 80032c6:	e7f2      	b.n	80032ae <__libc_init_array+0x1e>
 80032c8:	08003fa4 	.word	0x08003fa4
 80032cc:	08003fa4 	.word	0x08003fa4
 80032d0:	08003fa8 	.word	0x08003fa8
 80032d4:	08003fa4 	.word	0x08003fa4

080032d8 <__retarget_lock_init_recursive>:
 80032d8:	4770      	bx	lr

080032da <__retarget_lock_acquire_recursive>:
 80032da:	4770      	bx	lr

080032dc <__retarget_lock_release_recursive>:
 80032dc:	4770      	bx	lr
	...

080032e0 <_free_r>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	0005      	movs	r5, r0
 80032e4:	1e0c      	subs	r4, r1, #0
 80032e6:	d010      	beq.n	800330a <_free_r+0x2a>
 80032e8:	3c04      	subs	r4, #4
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	da00      	bge.n	80032f2 <_free_r+0x12>
 80032f0:	18e4      	adds	r4, r4, r3
 80032f2:	0028      	movs	r0, r5
 80032f4:	f000 f8e0 	bl	80034b8 <__malloc_lock>
 80032f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003370 <_free_r+0x90>)
 80032fa:	6813      	ldr	r3, [r2, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <_free_r+0x2c>
 8003300:	6063      	str	r3, [r4, #4]
 8003302:	6014      	str	r4, [r2, #0]
 8003304:	0028      	movs	r0, r5
 8003306:	f000 f8df 	bl	80034c8 <__malloc_unlock>
 800330a:	bd70      	pop	{r4, r5, r6, pc}
 800330c:	42a3      	cmp	r3, r4
 800330e:	d908      	bls.n	8003322 <_free_r+0x42>
 8003310:	6820      	ldr	r0, [r4, #0]
 8003312:	1821      	adds	r1, r4, r0
 8003314:	428b      	cmp	r3, r1
 8003316:	d1f3      	bne.n	8003300 <_free_r+0x20>
 8003318:	6819      	ldr	r1, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	1809      	adds	r1, r1, r0
 800331e:	6021      	str	r1, [r4, #0]
 8003320:	e7ee      	b.n	8003300 <_free_r+0x20>
 8003322:	001a      	movs	r2, r3
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <_free_r+0x4e>
 800332a:	42a3      	cmp	r3, r4
 800332c:	d9f9      	bls.n	8003322 <_free_r+0x42>
 800332e:	6811      	ldr	r1, [r2, #0]
 8003330:	1850      	adds	r0, r2, r1
 8003332:	42a0      	cmp	r0, r4
 8003334:	d10b      	bne.n	800334e <_free_r+0x6e>
 8003336:	6820      	ldr	r0, [r4, #0]
 8003338:	1809      	adds	r1, r1, r0
 800333a:	1850      	adds	r0, r2, r1
 800333c:	6011      	str	r1, [r2, #0]
 800333e:	4283      	cmp	r3, r0
 8003340:	d1e0      	bne.n	8003304 <_free_r+0x24>
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	1841      	adds	r1, r0, r1
 8003348:	6011      	str	r1, [r2, #0]
 800334a:	6053      	str	r3, [r2, #4]
 800334c:	e7da      	b.n	8003304 <_free_r+0x24>
 800334e:	42a0      	cmp	r0, r4
 8003350:	d902      	bls.n	8003358 <_free_r+0x78>
 8003352:	230c      	movs	r3, #12
 8003354:	602b      	str	r3, [r5, #0]
 8003356:	e7d5      	b.n	8003304 <_free_r+0x24>
 8003358:	6820      	ldr	r0, [r4, #0]
 800335a:	1821      	adds	r1, r4, r0
 800335c:	428b      	cmp	r3, r1
 800335e:	d103      	bne.n	8003368 <_free_r+0x88>
 8003360:	6819      	ldr	r1, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	1809      	adds	r1, r1, r0
 8003366:	6021      	str	r1, [r4, #0]
 8003368:	6063      	str	r3, [r4, #4]
 800336a:	6054      	str	r4, [r2, #4]
 800336c:	e7ca      	b.n	8003304 <_free_r+0x24>
 800336e:	46c0      	nop			@ (mov r8, r8)
 8003370:	200002d0 	.word	0x200002d0

08003374 <sbrk_aligned>:
 8003374:	b570      	push	{r4, r5, r6, lr}
 8003376:	4e0f      	ldr	r6, [pc, #60]	@ (80033b4 <sbrk_aligned+0x40>)
 8003378:	000d      	movs	r5, r1
 800337a:	6831      	ldr	r1, [r6, #0]
 800337c:	0004      	movs	r4, r0
 800337e:	2900      	cmp	r1, #0
 8003380:	d102      	bne.n	8003388 <sbrk_aligned+0x14>
 8003382:	f000 fcbd 	bl	8003d00 <_sbrk_r>
 8003386:	6030      	str	r0, [r6, #0]
 8003388:	0029      	movs	r1, r5
 800338a:	0020      	movs	r0, r4
 800338c:	f000 fcb8 	bl	8003d00 <_sbrk_r>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d103      	bne.n	800339c <sbrk_aligned+0x28>
 8003394:	2501      	movs	r5, #1
 8003396:	426d      	negs	r5, r5
 8003398:	0028      	movs	r0, r5
 800339a:	bd70      	pop	{r4, r5, r6, pc}
 800339c:	2303      	movs	r3, #3
 800339e:	1cc5      	adds	r5, r0, #3
 80033a0:	439d      	bics	r5, r3
 80033a2:	42a8      	cmp	r0, r5
 80033a4:	d0f8      	beq.n	8003398 <sbrk_aligned+0x24>
 80033a6:	1a29      	subs	r1, r5, r0
 80033a8:	0020      	movs	r0, r4
 80033aa:	f000 fca9 	bl	8003d00 <_sbrk_r>
 80033ae:	3001      	adds	r0, #1
 80033b0:	d1f2      	bne.n	8003398 <sbrk_aligned+0x24>
 80033b2:	e7ef      	b.n	8003394 <sbrk_aligned+0x20>
 80033b4:	200002cc 	.word	0x200002cc

080033b8 <_malloc_r>:
 80033b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033ba:	2203      	movs	r2, #3
 80033bc:	1ccb      	adds	r3, r1, #3
 80033be:	4393      	bics	r3, r2
 80033c0:	3308      	adds	r3, #8
 80033c2:	0005      	movs	r5, r0
 80033c4:	001f      	movs	r7, r3
 80033c6:	2b0c      	cmp	r3, #12
 80033c8:	d234      	bcs.n	8003434 <_malloc_r+0x7c>
 80033ca:	270c      	movs	r7, #12
 80033cc:	42b9      	cmp	r1, r7
 80033ce:	d833      	bhi.n	8003438 <_malloc_r+0x80>
 80033d0:	0028      	movs	r0, r5
 80033d2:	f000 f871 	bl	80034b8 <__malloc_lock>
 80033d6:	4e37      	ldr	r6, [pc, #220]	@ (80034b4 <_malloc_r+0xfc>)
 80033d8:	6833      	ldr	r3, [r6, #0]
 80033da:	001c      	movs	r4, r3
 80033dc:	2c00      	cmp	r4, #0
 80033de:	d12f      	bne.n	8003440 <_malloc_r+0x88>
 80033e0:	0039      	movs	r1, r7
 80033e2:	0028      	movs	r0, r5
 80033e4:	f7ff ffc6 	bl	8003374 <sbrk_aligned>
 80033e8:	0004      	movs	r4, r0
 80033ea:	1c43      	adds	r3, r0, #1
 80033ec:	d15f      	bne.n	80034ae <_malloc_r+0xf6>
 80033ee:	6834      	ldr	r4, [r6, #0]
 80033f0:	9400      	str	r4, [sp, #0]
 80033f2:	9b00      	ldr	r3, [sp, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d14a      	bne.n	800348e <_malloc_r+0xd6>
 80033f8:	2c00      	cmp	r4, #0
 80033fa:	d052      	beq.n	80034a2 <_malloc_r+0xea>
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	0028      	movs	r0, r5
 8003400:	18e3      	adds	r3, r4, r3
 8003402:	9900      	ldr	r1, [sp, #0]
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	f000 fc7b 	bl	8003d00 <_sbrk_r>
 800340a:	9b01      	ldr	r3, [sp, #4]
 800340c:	4283      	cmp	r3, r0
 800340e:	d148      	bne.n	80034a2 <_malloc_r+0xea>
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	0028      	movs	r0, r5
 8003414:	1aff      	subs	r7, r7, r3
 8003416:	0039      	movs	r1, r7
 8003418:	f7ff ffac 	bl	8003374 <sbrk_aligned>
 800341c:	3001      	adds	r0, #1
 800341e:	d040      	beq.n	80034a2 <_malloc_r+0xea>
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	19db      	adds	r3, r3, r7
 8003424:	6023      	str	r3, [r4, #0]
 8003426:	6833      	ldr	r3, [r6, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	2a00      	cmp	r2, #0
 800342c:	d133      	bne.n	8003496 <_malloc_r+0xde>
 800342e:	9b00      	ldr	r3, [sp, #0]
 8003430:	6033      	str	r3, [r6, #0]
 8003432:	e019      	b.n	8003468 <_malloc_r+0xb0>
 8003434:	2b00      	cmp	r3, #0
 8003436:	dac9      	bge.n	80033cc <_malloc_r+0x14>
 8003438:	230c      	movs	r3, #12
 800343a:	602b      	str	r3, [r5, #0]
 800343c:	2000      	movs	r0, #0
 800343e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003440:	6821      	ldr	r1, [r4, #0]
 8003442:	1bc9      	subs	r1, r1, r7
 8003444:	d420      	bmi.n	8003488 <_malloc_r+0xd0>
 8003446:	290b      	cmp	r1, #11
 8003448:	d90a      	bls.n	8003460 <_malloc_r+0xa8>
 800344a:	19e2      	adds	r2, r4, r7
 800344c:	6027      	str	r7, [r4, #0]
 800344e:	42a3      	cmp	r3, r4
 8003450:	d104      	bne.n	800345c <_malloc_r+0xa4>
 8003452:	6032      	str	r2, [r6, #0]
 8003454:	6863      	ldr	r3, [r4, #4]
 8003456:	6011      	str	r1, [r2, #0]
 8003458:	6053      	str	r3, [r2, #4]
 800345a:	e005      	b.n	8003468 <_malloc_r+0xb0>
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	e7f9      	b.n	8003454 <_malloc_r+0x9c>
 8003460:	6862      	ldr	r2, [r4, #4]
 8003462:	42a3      	cmp	r3, r4
 8003464:	d10e      	bne.n	8003484 <_malloc_r+0xcc>
 8003466:	6032      	str	r2, [r6, #0]
 8003468:	0028      	movs	r0, r5
 800346a:	f000 f82d 	bl	80034c8 <__malloc_unlock>
 800346e:	0020      	movs	r0, r4
 8003470:	2207      	movs	r2, #7
 8003472:	300b      	adds	r0, #11
 8003474:	1d23      	adds	r3, r4, #4
 8003476:	4390      	bics	r0, r2
 8003478:	1ac2      	subs	r2, r0, r3
 800347a:	4298      	cmp	r0, r3
 800347c:	d0df      	beq.n	800343e <_malloc_r+0x86>
 800347e:	1a1b      	subs	r3, r3, r0
 8003480:	50a3      	str	r3, [r4, r2]
 8003482:	e7dc      	b.n	800343e <_malloc_r+0x86>
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	e7ef      	b.n	8003468 <_malloc_r+0xb0>
 8003488:	0023      	movs	r3, r4
 800348a:	6864      	ldr	r4, [r4, #4]
 800348c:	e7a6      	b.n	80033dc <_malloc_r+0x24>
 800348e:	9c00      	ldr	r4, [sp, #0]
 8003490:	6863      	ldr	r3, [r4, #4]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	e7ad      	b.n	80033f2 <_malloc_r+0x3a>
 8003496:	001a      	movs	r2, r3
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	42a3      	cmp	r3, r4
 800349c:	d1fb      	bne.n	8003496 <_malloc_r+0xde>
 800349e:	2300      	movs	r3, #0
 80034a0:	e7da      	b.n	8003458 <_malloc_r+0xa0>
 80034a2:	230c      	movs	r3, #12
 80034a4:	0028      	movs	r0, r5
 80034a6:	602b      	str	r3, [r5, #0]
 80034a8:	f000 f80e 	bl	80034c8 <__malloc_unlock>
 80034ac:	e7c6      	b.n	800343c <_malloc_r+0x84>
 80034ae:	6007      	str	r7, [r0, #0]
 80034b0:	e7da      	b.n	8003468 <_malloc_r+0xb0>
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	200002d0 	.word	0x200002d0

080034b8 <__malloc_lock>:
 80034b8:	b510      	push	{r4, lr}
 80034ba:	4802      	ldr	r0, [pc, #8]	@ (80034c4 <__malloc_lock+0xc>)
 80034bc:	f7ff ff0d 	bl	80032da <__retarget_lock_acquire_recursive>
 80034c0:	bd10      	pop	{r4, pc}
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	200002c8 	.word	0x200002c8

080034c8 <__malloc_unlock>:
 80034c8:	b510      	push	{r4, lr}
 80034ca:	4802      	ldr	r0, [pc, #8]	@ (80034d4 <__malloc_unlock+0xc>)
 80034cc:	f7ff ff06 	bl	80032dc <__retarget_lock_release_recursive>
 80034d0:	bd10      	pop	{r4, pc}
 80034d2:	46c0      	nop			@ (mov r8, r8)
 80034d4:	200002c8 	.word	0x200002c8

080034d8 <__sfputc_r>:
 80034d8:	6893      	ldr	r3, [r2, #8]
 80034da:	b510      	push	{r4, lr}
 80034dc:	3b01      	subs	r3, #1
 80034de:	6093      	str	r3, [r2, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	da04      	bge.n	80034ee <__sfputc_r+0x16>
 80034e4:	6994      	ldr	r4, [r2, #24]
 80034e6:	42a3      	cmp	r3, r4
 80034e8:	db07      	blt.n	80034fa <__sfputc_r+0x22>
 80034ea:	290a      	cmp	r1, #10
 80034ec:	d005      	beq.n	80034fa <__sfputc_r+0x22>
 80034ee:	6813      	ldr	r3, [r2, #0]
 80034f0:	1c58      	adds	r0, r3, #1
 80034f2:	6010      	str	r0, [r2, #0]
 80034f4:	7019      	strb	r1, [r3, #0]
 80034f6:	0008      	movs	r0, r1
 80034f8:	bd10      	pop	{r4, pc}
 80034fa:	f000 fb60 	bl	8003bbe <__swbuf_r>
 80034fe:	0001      	movs	r1, r0
 8003500:	e7f9      	b.n	80034f6 <__sfputc_r+0x1e>

08003502 <__sfputs_r>:
 8003502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003504:	0006      	movs	r6, r0
 8003506:	000f      	movs	r7, r1
 8003508:	0014      	movs	r4, r2
 800350a:	18d5      	adds	r5, r2, r3
 800350c:	42ac      	cmp	r4, r5
 800350e:	d101      	bne.n	8003514 <__sfputs_r+0x12>
 8003510:	2000      	movs	r0, #0
 8003512:	e007      	b.n	8003524 <__sfputs_r+0x22>
 8003514:	7821      	ldrb	r1, [r4, #0]
 8003516:	003a      	movs	r2, r7
 8003518:	0030      	movs	r0, r6
 800351a:	f7ff ffdd 	bl	80034d8 <__sfputc_r>
 800351e:	3401      	adds	r4, #1
 8003520:	1c43      	adds	r3, r0, #1
 8003522:	d1f3      	bne.n	800350c <__sfputs_r+0xa>
 8003524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003528 <_vfiprintf_r>:
 8003528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800352a:	b0a1      	sub	sp, #132	@ 0x84
 800352c:	000f      	movs	r7, r1
 800352e:	0015      	movs	r5, r2
 8003530:	001e      	movs	r6, r3
 8003532:	9003      	str	r0, [sp, #12]
 8003534:	2800      	cmp	r0, #0
 8003536:	d004      	beq.n	8003542 <_vfiprintf_r+0x1a>
 8003538:	6a03      	ldr	r3, [r0, #32]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <_vfiprintf_r+0x1a>
 800353e:	f7ff fdbb 	bl	80030b8 <__sinit>
 8003542:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003544:	07db      	lsls	r3, r3, #31
 8003546:	d405      	bmi.n	8003554 <_vfiprintf_r+0x2c>
 8003548:	89bb      	ldrh	r3, [r7, #12]
 800354a:	059b      	lsls	r3, r3, #22
 800354c:	d402      	bmi.n	8003554 <_vfiprintf_r+0x2c>
 800354e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003550:	f7ff fec3 	bl	80032da <__retarget_lock_acquire_recursive>
 8003554:	89bb      	ldrh	r3, [r7, #12]
 8003556:	071b      	lsls	r3, r3, #28
 8003558:	d502      	bpl.n	8003560 <_vfiprintf_r+0x38>
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d113      	bne.n	8003588 <_vfiprintf_r+0x60>
 8003560:	0039      	movs	r1, r7
 8003562:	9803      	ldr	r0, [sp, #12]
 8003564:	f000 fb6e 	bl	8003c44 <__swsetup_r>
 8003568:	2800      	cmp	r0, #0
 800356a:	d00d      	beq.n	8003588 <_vfiprintf_r+0x60>
 800356c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800356e:	07db      	lsls	r3, r3, #31
 8003570:	d503      	bpl.n	800357a <_vfiprintf_r+0x52>
 8003572:	2001      	movs	r0, #1
 8003574:	4240      	negs	r0, r0
 8003576:	b021      	add	sp, #132	@ 0x84
 8003578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800357a:	89bb      	ldrh	r3, [r7, #12]
 800357c:	059b      	lsls	r3, r3, #22
 800357e:	d4f8      	bmi.n	8003572 <_vfiprintf_r+0x4a>
 8003580:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003582:	f7ff feab 	bl	80032dc <__retarget_lock_release_recursive>
 8003586:	e7f4      	b.n	8003572 <_vfiprintf_r+0x4a>
 8003588:	2300      	movs	r3, #0
 800358a:	ac08      	add	r4, sp, #32
 800358c:	6163      	str	r3, [r4, #20]
 800358e:	3320      	adds	r3, #32
 8003590:	7663      	strb	r3, [r4, #25]
 8003592:	3310      	adds	r3, #16
 8003594:	76a3      	strb	r3, [r4, #26]
 8003596:	9607      	str	r6, [sp, #28]
 8003598:	002e      	movs	r6, r5
 800359a:	7833      	ldrb	r3, [r6, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <_vfiprintf_r+0x7c>
 80035a0:	2b25      	cmp	r3, #37	@ 0x25
 80035a2:	d148      	bne.n	8003636 <_vfiprintf_r+0x10e>
 80035a4:	1b73      	subs	r3, r6, r5
 80035a6:	9305      	str	r3, [sp, #20]
 80035a8:	42ae      	cmp	r6, r5
 80035aa:	d00b      	beq.n	80035c4 <_vfiprintf_r+0x9c>
 80035ac:	002a      	movs	r2, r5
 80035ae:	0039      	movs	r1, r7
 80035b0:	9803      	ldr	r0, [sp, #12]
 80035b2:	f7ff ffa6 	bl	8003502 <__sfputs_r>
 80035b6:	3001      	adds	r0, #1
 80035b8:	d100      	bne.n	80035bc <_vfiprintf_r+0x94>
 80035ba:	e0ae      	b.n	800371a <_vfiprintf_r+0x1f2>
 80035bc:	6963      	ldr	r3, [r4, #20]
 80035be:	9a05      	ldr	r2, [sp, #20]
 80035c0:	189b      	adds	r3, r3, r2
 80035c2:	6163      	str	r3, [r4, #20]
 80035c4:	7833      	ldrb	r3, [r6, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d100      	bne.n	80035cc <_vfiprintf_r+0xa4>
 80035ca:	e0a6      	b.n	800371a <_vfiprintf_r+0x1f2>
 80035cc:	2201      	movs	r2, #1
 80035ce:	2300      	movs	r3, #0
 80035d0:	4252      	negs	r2, r2
 80035d2:	6062      	str	r2, [r4, #4]
 80035d4:	a904      	add	r1, sp, #16
 80035d6:	3254      	adds	r2, #84	@ 0x54
 80035d8:	1852      	adds	r2, r2, r1
 80035da:	1c75      	adds	r5, r6, #1
 80035dc:	6023      	str	r3, [r4, #0]
 80035de:	60e3      	str	r3, [r4, #12]
 80035e0:	60a3      	str	r3, [r4, #8]
 80035e2:	7013      	strb	r3, [r2, #0]
 80035e4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80035e6:	4b59      	ldr	r3, [pc, #356]	@ (800374c <_vfiprintf_r+0x224>)
 80035e8:	2205      	movs	r2, #5
 80035ea:	0018      	movs	r0, r3
 80035ec:	7829      	ldrb	r1, [r5, #0]
 80035ee:	9305      	str	r3, [sp, #20]
 80035f0:	f000 fb98 	bl	8003d24 <memchr>
 80035f4:	1c6e      	adds	r6, r5, #1
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d11f      	bne.n	800363a <_vfiprintf_r+0x112>
 80035fa:	6822      	ldr	r2, [r4, #0]
 80035fc:	06d3      	lsls	r3, r2, #27
 80035fe:	d504      	bpl.n	800360a <_vfiprintf_r+0xe2>
 8003600:	2353      	movs	r3, #83	@ 0x53
 8003602:	a904      	add	r1, sp, #16
 8003604:	185b      	adds	r3, r3, r1
 8003606:	2120      	movs	r1, #32
 8003608:	7019      	strb	r1, [r3, #0]
 800360a:	0713      	lsls	r3, r2, #28
 800360c:	d504      	bpl.n	8003618 <_vfiprintf_r+0xf0>
 800360e:	2353      	movs	r3, #83	@ 0x53
 8003610:	a904      	add	r1, sp, #16
 8003612:	185b      	adds	r3, r3, r1
 8003614:	212b      	movs	r1, #43	@ 0x2b
 8003616:	7019      	strb	r1, [r3, #0]
 8003618:	782b      	ldrb	r3, [r5, #0]
 800361a:	2b2a      	cmp	r3, #42	@ 0x2a
 800361c:	d016      	beq.n	800364c <_vfiprintf_r+0x124>
 800361e:	002e      	movs	r6, r5
 8003620:	2100      	movs	r1, #0
 8003622:	200a      	movs	r0, #10
 8003624:	68e3      	ldr	r3, [r4, #12]
 8003626:	7832      	ldrb	r2, [r6, #0]
 8003628:	1c75      	adds	r5, r6, #1
 800362a:	3a30      	subs	r2, #48	@ 0x30
 800362c:	2a09      	cmp	r2, #9
 800362e:	d950      	bls.n	80036d2 <_vfiprintf_r+0x1aa>
 8003630:	2900      	cmp	r1, #0
 8003632:	d111      	bne.n	8003658 <_vfiprintf_r+0x130>
 8003634:	e017      	b.n	8003666 <_vfiprintf_r+0x13e>
 8003636:	3601      	adds	r6, #1
 8003638:	e7af      	b.n	800359a <_vfiprintf_r+0x72>
 800363a:	9b05      	ldr	r3, [sp, #20]
 800363c:	6822      	ldr	r2, [r4, #0]
 800363e:	1ac0      	subs	r0, r0, r3
 8003640:	2301      	movs	r3, #1
 8003642:	4083      	lsls	r3, r0
 8003644:	4313      	orrs	r3, r2
 8003646:	0035      	movs	r5, r6
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	e7cc      	b.n	80035e6 <_vfiprintf_r+0xbe>
 800364c:	9b07      	ldr	r3, [sp, #28]
 800364e:	1d19      	adds	r1, r3, #4
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	9107      	str	r1, [sp, #28]
 8003654:	2b00      	cmp	r3, #0
 8003656:	db01      	blt.n	800365c <_vfiprintf_r+0x134>
 8003658:	930b      	str	r3, [sp, #44]	@ 0x2c
 800365a:	e004      	b.n	8003666 <_vfiprintf_r+0x13e>
 800365c:	425b      	negs	r3, r3
 800365e:	60e3      	str	r3, [r4, #12]
 8003660:	2302      	movs	r3, #2
 8003662:	4313      	orrs	r3, r2
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	7833      	ldrb	r3, [r6, #0]
 8003668:	2b2e      	cmp	r3, #46	@ 0x2e
 800366a:	d10c      	bne.n	8003686 <_vfiprintf_r+0x15e>
 800366c:	7873      	ldrb	r3, [r6, #1]
 800366e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003670:	d134      	bne.n	80036dc <_vfiprintf_r+0x1b4>
 8003672:	9b07      	ldr	r3, [sp, #28]
 8003674:	3602      	adds	r6, #2
 8003676:	1d1a      	adds	r2, r3, #4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	9207      	str	r2, [sp, #28]
 800367c:	2b00      	cmp	r3, #0
 800367e:	da01      	bge.n	8003684 <_vfiprintf_r+0x15c>
 8003680:	2301      	movs	r3, #1
 8003682:	425b      	negs	r3, r3
 8003684:	9309      	str	r3, [sp, #36]	@ 0x24
 8003686:	4d32      	ldr	r5, [pc, #200]	@ (8003750 <_vfiprintf_r+0x228>)
 8003688:	2203      	movs	r2, #3
 800368a:	0028      	movs	r0, r5
 800368c:	7831      	ldrb	r1, [r6, #0]
 800368e:	f000 fb49 	bl	8003d24 <memchr>
 8003692:	2800      	cmp	r0, #0
 8003694:	d006      	beq.n	80036a4 <_vfiprintf_r+0x17c>
 8003696:	2340      	movs	r3, #64	@ 0x40
 8003698:	1b40      	subs	r0, r0, r5
 800369a:	4083      	lsls	r3, r0
 800369c:	6822      	ldr	r2, [r4, #0]
 800369e:	3601      	adds	r6, #1
 80036a0:	4313      	orrs	r3, r2
 80036a2:	6023      	str	r3, [r4, #0]
 80036a4:	7831      	ldrb	r1, [r6, #0]
 80036a6:	2206      	movs	r2, #6
 80036a8:	482a      	ldr	r0, [pc, #168]	@ (8003754 <_vfiprintf_r+0x22c>)
 80036aa:	1c75      	adds	r5, r6, #1
 80036ac:	7621      	strb	r1, [r4, #24]
 80036ae:	f000 fb39 	bl	8003d24 <memchr>
 80036b2:	2800      	cmp	r0, #0
 80036b4:	d040      	beq.n	8003738 <_vfiprintf_r+0x210>
 80036b6:	4b28      	ldr	r3, [pc, #160]	@ (8003758 <_vfiprintf_r+0x230>)
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d122      	bne.n	8003702 <_vfiprintf_r+0x1da>
 80036bc:	2207      	movs	r2, #7
 80036be:	9b07      	ldr	r3, [sp, #28]
 80036c0:	3307      	adds	r3, #7
 80036c2:	4393      	bics	r3, r2
 80036c4:	3308      	adds	r3, #8
 80036c6:	9307      	str	r3, [sp, #28]
 80036c8:	6963      	ldr	r3, [r4, #20]
 80036ca:	9a04      	ldr	r2, [sp, #16]
 80036cc:	189b      	adds	r3, r3, r2
 80036ce:	6163      	str	r3, [r4, #20]
 80036d0:	e762      	b.n	8003598 <_vfiprintf_r+0x70>
 80036d2:	4343      	muls	r3, r0
 80036d4:	002e      	movs	r6, r5
 80036d6:	2101      	movs	r1, #1
 80036d8:	189b      	adds	r3, r3, r2
 80036da:	e7a4      	b.n	8003626 <_vfiprintf_r+0xfe>
 80036dc:	2300      	movs	r3, #0
 80036de:	200a      	movs	r0, #10
 80036e0:	0019      	movs	r1, r3
 80036e2:	3601      	adds	r6, #1
 80036e4:	6063      	str	r3, [r4, #4]
 80036e6:	7832      	ldrb	r2, [r6, #0]
 80036e8:	1c75      	adds	r5, r6, #1
 80036ea:	3a30      	subs	r2, #48	@ 0x30
 80036ec:	2a09      	cmp	r2, #9
 80036ee:	d903      	bls.n	80036f8 <_vfiprintf_r+0x1d0>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0c8      	beq.n	8003686 <_vfiprintf_r+0x15e>
 80036f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80036f6:	e7c6      	b.n	8003686 <_vfiprintf_r+0x15e>
 80036f8:	4341      	muls	r1, r0
 80036fa:	002e      	movs	r6, r5
 80036fc:	2301      	movs	r3, #1
 80036fe:	1889      	adds	r1, r1, r2
 8003700:	e7f1      	b.n	80036e6 <_vfiprintf_r+0x1be>
 8003702:	aa07      	add	r2, sp, #28
 8003704:	9200      	str	r2, [sp, #0]
 8003706:	0021      	movs	r1, r4
 8003708:	003a      	movs	r2, r7
 800370a:	4b14      	ldr	r3, [pc, #80]	@ (800375c <_vfiprintf_r+0x234>)
 800370c:	9803      	ldr	r0, [sp, #12]
 800370e:	e000      	b.n	8003712 <_vfiprintf_r+0x1ea>
 8003710:	bf00      	nop
 8003712:	9004      	str	r0, [sp, #16]
 8003714:	9b04      	ldr	r3, [sp, #16]
 8003716:	3301      	adds	r3, #1
 8003718:	d1d6      	bne.n	80036c8 <_vfiprintf_r+0x1a0>
 800371a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800371c:	07db      	lsls	r3, r3, #31
 800371e:	d405      	bmi.n	800372c <_vfiprintf_r+0x204>
 8003720:	89bb      	ldrh	r3, [r7, #12]
 8003722:	059b      	lsls	r3, r3, #22
 8003724:	d402      	bmi.n	800372c <_vfiprintf_r+0x204>
 8003726:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003728:	f7ff fdd8 	bl	80032dc <__retarget_lock_release_recursive>
 800372c:	89bb      	ldrh	r3, [r7, #12]
 800372e:	065b      	lsls	r3, r3, #25
 8003730:	d500      	bpl.n	8003734 <_vfiprintf_r+0x20c>
 8003732:	e71e      	b.n	8003572 <_vfiprintf_r+0x4a>
 8003734:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003736:	e71e      	b.n	8003576 <_vfiprintf_r+0x4e>
 8003738:	aa07      	add	r2, sp, #28
 800373a:	9200      	str	r2, [sp, #0]
 800373c:	0021      	movs	r1, r4
 800373e:	003a      	movs	r2, r7
 8003740:	4b06      	ldr	r3, [pc, #24]	@ (800375c <_vfiprintf_r+0x234>)
 8003742:	9803      	ldr	r0, [sp, #12]
 8003744:	f000 f87c 	bl	8003840 <_printf_i>
 8003748:	e7e3      	b.n	8003712 <_vfiprintf_r+0x1ea>
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	08003f70 	.word	0x08003f70
 8003750:	08003f76 	.word	0x08003f76
 8003754:	08003f7a 	.word	0x08003f7a
 8003758:	00000000 	.word	0x00000000
 800375c:	08003503 	.word	0x08003503

08003760 <_printf_common>:
 8003760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003762:	0016      	movs	r6, r2
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	688a      	ldr	r2, [r1, #8]
 8003768:	690b      	ldr	r3, [r1, #16]
 800376a:	000c      	movs	r4, r1
 800376c:	9000      	str	r0, [sp, #0]
 800376e:	4293      	cmp	r3, r2
 8003770:	da00      	bge.n	8003774 <_printf_common+0x14>
 8003772:	0013      	movs	r3, r2
 8003774:	0022      	movs	r2, r4
 8003776:	6033      	str	r3, [r6, #0]
 8003778:	3243      	adds	r2, #67	@ 0x43
 800377a:	7812      	ldrb	r2, [r2, #0]
 800377c:	2a00      	cmp	r2, #0
 800377e:	d001      	beq.n	8003784 <_printf_common+0x24>
 8003780:	3301      	adds	r3, #1
 8003782:	6033      	str	r3, [r6, #0]
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	069b      	lsls	r3, r3, #26
 8003788:	d502      	bpl.n	8003790 <_printf_common+0x30>
 800378a:	6833      	ldr	r3, [r6, #0]
 800378c:	3302      	adds	r3, #2
 800378e:	6033      	str	r3, [r6, #0]
 8003790:	6822      	ldr	r2, [r4, #0]
 8003792:	2306      	movs	r3, #6
 8003794:	0015      	movs	r5, r2
 8003796:	401d      	ands	r5, r3
 8003798:	421a      	tst	r2, r3
 800379a:	d027      	beq.n	80037ec <_printf_common+0x8c>
 800379c:	0023      	movs	r3, r4
 800379e:	3343      	adds	r3, #67	@ 0x43
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	1e5a      	subs	r2, r3, #1
 80037a4:	4193      	sbcs	r3, r2
 80037a6:	6822      	ldr	r2, [r4, #0]
 80037a8:	0692      	lsls	r2, r2, #26
 80037aa:	d430      	bmi.n	800380e <_printf_common+0xae>
 80037ac:	0022      	movs	r2, r4
 80037ae:	9901      	ldr	r1, [sp, #4]
 80037b0:	9800      	ldr	r0, [sp, #0]
 80037b2:	9d08      	ldr	r5, [sp, #32]
 80037b4:	3243      	adds	r2, #67	@ 0x43
 80037b6:	47a8      	blx	r5
 80037b8:	3001      	adds	r0, #1
 80037ba:	d025      	beq.n	8003808 <_printf_common+0xa8>
 80037bc:	2206      	movs	r2, #6
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	2500      	movs	r5, #0
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d105      	bne.n	80037d4 <_printf_common+0x74>
 80037c8:	6833      	ldr	r3, [r6, #0]
 80037ca:	68e5      	ldr	r5, [r4, #12]
 80037cc:	1aed      	subs	r5, r5, r3
 80037ce:	43eb      	mvns	r3, r5
 80037d0:	17db      	asrs	r3, r3, #31
 80037d2:	401d      	ands	r5, r3
 80037d4:	68a3      	ldr	r3, [r4, #8]
 80037d6:	6922      	ldr	r2, [r4, #16]
 80037d8:	4293      	cmp	r3, r2
 80037da:	dd01      	ble.n	80037e0 <_printf_common+0x80>
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	18ed      	adds	r5, r5, r3
 80037e0:	2600      	movs	r6, #0
 80037e2:	42b5      	cmp	r5, r6
 80037e4:	d120      	bne.n	8003828 <_printf_common+0xc8>
 80037e6:	2000      	movs	r0, #0
 80037e8:	e010      	b.n	800380c <_printf_common+0xac>
 80037ea:	3501      	adds	r5, #1
 80037ec:	68e3      	ldr	r3, [r4, #12]
 80037ee:	6832      	ldr	r2, [r6, #0]
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	42ab      	cmp	r3, r5
 80037f4:	ddd2      	ble.n	800379c <_printf_common+0x3c>
 80037f6:	0022      	movs	r2, r4
 80037f8:	2301      	movs	r3, #1
 80037fa:	9901      	ldr	r1, [sp, #4]
 80037fc:	9800      	ldr	r0, [sp, #0]
 80037fe:	9f08      	ldr	r7, [sp, #32]
 8003800:	3219      	adds	r2, #25
 8003802:	47b8      	blx	r7
 8003804:	3001      	adds	r0, #1
 8003806:	d1f0      	bne.n	80037ea <_printf_common+0x8a>
 8003808:	2001      	movs	r0, #1
 800380a:	4240      	negs	r0, r0
 800380c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800380e:	2030      	movs	r0, #48	@ 0x30
 8003810:	18e1      	adds	r1, r4, r3
 8003812:	3143      	adds	r1, #67	@ 0x43
 8003814:	7008      	strb	r0, [r1, #0]
 8003816:	0021      	movs	r1, r4
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	3145      	adds	r1, #69	@ 0x45
 800381c:	7809      	ldrb	r1, [r1, #0]
 800381e:	18a2      	adds	r2, r4, r2
 8003820:	3243      	adds	r2, #67	@ 0x43
 8003822:	3302      	adds	r3, #2
 8003824:	7011      	strb	r1, [r2, #0]
 8003826:	e7c1      	b.n	80037ac <_printf_common+0x4c>
 8003828:	0022      	movs	r2, r4
 800382a:	2301      	movs	r3, #1
 800382c:	9901      	ldr	r1, [sp, #4]
 800382e:	9800      	ldr	r0, [sp, #0]
 8003830:	9f08      	ldr	r7, [sp, #32]
 8003832:	321a      	adds	r2, #26
 8003834:	47b8      	blx	r7
 8003836:	3001      	adds	r0, #1
 8003838:	d0e6      	beq.n	8003808 <_printf_common+0xa8>
 800383a:	3601      	adds	r6, #1
 800383c:	e7d1      	b.n	80037e2 <_printf_common+0x82>
	...

08003840 <_printf_i>:
 8003840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003842:	b08b      	sub	sp, #44	@ 0x2c
 8003844:	9206      	str	r2, [sp, #24]
 8003846:	000a      	movs	r2, r1
 8003848:	3243      	adds	r2, #67	@ 0x43
 800384a:	9307      	str	r3, [sp, #28]
 800384c:	9005      	str	r0, [sp, #20]
 800384e:	9203      	str	r2, [sp, #12]
 8003850:	7e0a      	ldrb	r2, [r1, #24]
 8003852:	000c      	movs	r4, r1
 8003854:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003856:	2a78      	cmp	r2, #120	@ 0x78
 8003858:	d809      	bhi.n	800386e <_printf_i+0x2e>
 800385a:	2a62      	cmp	r2, #98	@ 0x62
 800385c:	d80b      	bhi.n	8003876 <_printf_i+0x36>
 800385e:	2a00      	cmp	r2, #0
 8003860:	d100      	bne.n	8003864 <_printf_i+0x24>
 8003862:	e0bc      	b.n	80039de <_printf_i+0x19e>
 8003864:	497b      	ldr	r1, [pc, #492]	@ (8003a54 <_printf_i+0x214>)
 8003866:	9104      	str	r1, [sp, #16]
 8003868:	2a58      	cmp	r2, #88	@ 0x58
 800386a:	d100      	bne.n	800386e <_printf_i+0x2e>
 800386c:	e090      	b.n	8003990 <_printf_i+0x150>
 800386e:	0025      	movs	r5, r4
 8003870:	3542      	adds	r5, #66	@ 0x42
 8003872:	702a      	strb	r2, [r5, #0]
 8003874:	e022      	b.n	80038bc <_printf_i+0x7c>
 8003876:	0010      	movs	r0, r2
 8003878:	3863      	subs	r0, #99	@ 0x63
 800387a:	2815      	cmp	r0, #21
 800387c:	d8f7      	bhi.n	800386e <_printf_i+0x2e>
 800387e:	f7fc fc43 	bl	8000108 <__gnu_thumb1_case_shi>
 8003882:	0016      	.short	0x0016
 8003884:	fff6001f 	.word	0xfff6001f
 8003888:	fff6fff6 	.word	0xfff6fff6
 800388c:	001ffff6 	.word	0x001ffff6
 8003890:	fff6fff6 	.word	0xfff6fff6
 8003894:	fff6fff6 	.word	0xfff6fff6
 8003898:	003600a1 	.word	0x003600a1
 800389c:	fff60080 	.word	0xfff60080
 80038a0:	00b2fff6 	.word	0x00b2fff6
 80038a4:	0036fff6 	.word	0x0036fff6
 80038a8:	fff6fff6 	.word	0xfff6fff6
 80038ac:	0084      	.short	0x0084
 80038ae:	0025      	movs	r5, r4
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	3542      	adds	r5, #66	@ 0x42
 80038b4:	1d11      	adds	r1, r2, #4
 80038b6:	6019      	str	r1, [r3, #0]
 80038b8:	6813      	ldr	r3, [r2, #0]
 80038ba:	702b      	strb	r3, [r5, #0]
 80038bc:	2301      	movs	r3, #1
 80038be:	e0a0      	b.n	8003a02 <_printf_i+0x1c2>
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	6809      	ldr	r1, [r1, #0]
 80038c4:	1d02      	adds	r2, r0, #4
 80038c6:	060d      	lsls	r5, r1, #24
 80038c8:	d50b      	bpl.n	80038e2 <_printf_i+0xa2>
 80038ca:	6806      	ldr	r6, [r0, #0]
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	2e00      	cmp	r6, #0
 80038d0:	da03      	bge.n	80038da <_printf_i+0x9a>
 80038d2:	232d      	movs	r3, #45	@ 0x2d
 80038d4:	9a03      	ldr	r2, [sp, #12]
 80038d6:	4276      	negs	r6, r6
 80038d8:	7013      	strb	r3, [r2, #0]
 80038da:	4b5e      	ldr	r3, [pc, #376]	@ (8003a54 <_printf_i+0x214>)
 80038dc:	270a      	movs	r7, #10
 80038de:	9304      	str	r3, [sp, #16]
 80038e0:	e018      	b.n	8003914 <_printf_i+0xd4>
 80038e2:	6806      	ldr	r6, [r0, #0]
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	0649      	lsls	r1, r1, #25
 80038e8:	d5f1      	bpl.n	80038ce <_printf_i+0x8e>
 80038ea:	b236      	sxth	r6, r6
 80038ec:	e7ef      	b.n	80038ce <_printf_i+0x8e>
 80038ee:	6808      	ldr	r0, [r1, #0]
 80038f0:	6819      	ldr	r1, [r3, #0]
 80038f2:	c940      	ldmia	r1!, {r6}
 80038f4:	0605      	lsls	r5, r0, #24
 80038f6:	d402      	bmi.n	80038fe <_printf_i+0xbe>
 80038f8:	0640      	lsls	r0, r0, #25
 80038fa:	d500      	bpl.n	80038fe <_printf_i+0xbe>
 80038fc:	b2b6      	uxth	r6, r6
 80038fe:	6019      	str	r1, [r3, #0]
 8003900:	4b54      	ldr	r3, [pc, #336]	@ (8003a54 <_printf_i+0x214>)
 8003902:	270a      	movs	r7, #10
 8003904:	9304      	str	r3, [sp, #16]
 8003906:	2a6f      	cmp	r2, #111	@ 0x6f
 8003908:	d100      	bne.n	800390c <_printf_i+0xcc>
 800390a:	3f02      	subs	r7, #2
 800390c:	0023      	movs	r3, r4
 800390e:	2200      	movs	r2, #0
 8003910:	3343      	adds	r3, #67	@ 0x43
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	6863      	ldr	r3, [r4, #4]
 8003916:	60a3      	str	r3, [r4, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	db03      	blt.n	8003924 <_printf_i+0xe4>
 800391c:	2104      	movs	r1, #4
 800391e:	6822      	ldr	r2, [r4, #0]
 8003920:	438a      	bics	r2, r1
 8003922:	6022      	str	r2, [r4, #0]
 8003924:	2e00      	cmp	r6, #0
 8003926:	d102      	bne.n	800392e <_printf_i+0xee>
 8003928:	9d03      	ldr	r5, [sp, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00c      	beq.n	8003948 <_printf_i+0x108>
 800392e:	9d03      	ldr	r5, [sp, #12]
 8003930:	0030      	movs	r0, r6
 8003932:	0039      	movs	r1, r7
 8003934:	f7fc fc78 	bl	8000228 <__aeabi_uidivmod>
 8003938:	9b04      	ldr	r3, [sp, #16]
 800393a:	3d01      	subs	r5, #1
 800393c:	5c5b      	ldrb	r3, [r3, r1]
 800393e:	702b      	strb	r3, [r5, #0]
 8003940:	0033      	movs	r3, r6
 8003942:	0006      	movs	r6, r0
 8003944:	429f      	cmp	r7, r3
 8003946:	d9f3      	bls.n	8003930 <_printf_i+0xf0>
 8003948:	2f08      	cmp	r7, #8
 800394a:	d109      	bne.n	8003960 <_printf_i+0x120>
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	07db      	lsls	r3, r3, #31
 8003950:	d506      	bpl.n	8003960 <_printf_i+0x120>
 8003952:	6862      	ldr	r2, [r4, #4]
 8003954:	6923      	ldr	r3, [r4, #16]
 8003956:	429a      	cmp	r2, r3
 8003958:	dc02      	bgt.n	8003960 <_printf_i+0x120>
 800395a:	2330      	movs	r3, #48	@ 0x30
 800395c:	3d01      	subs	r5, #1
 800395e:	702b      	strb	r3, [r5, #0]
 8003960:	9b03      	ldr	r3, [sp, #12]
 8003962:	1b5b      	subs	r3, r3, r5
 8003964:	6123      	str	r3, [r4, #16]
 8003966:	9b07      	ldr	r3, [sp, #28]
 8003968:	0021      	movs	r1, r4
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	9805      	ldr	r0, [sp, #20]
 800396e:	9b06      	ldr	r3, [sp, #24]
 8003970:	aa09      	add	r2, sp, #36	@ 0x24
 8003972:	f7ff fef5 	bl	8003760 <_printf_common>
 8003976:	3001      	adds	r0, #1
 8003978:	d148      	bne.n	8003a0c <_printf_i+0x1cc>
 800397a:	2001      	movs	r0, #1
 800397c:	4240      	negs	r0, r0
 800397e:	b00b      	add	sp, #44	@ 0x2c
 8003980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003982:	2220      	movs	r2, #32
 8003984:	6809      	ldr	r1, [r1, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	6022      	str	r2, [r4, #0]
 800398a:	2278      	movs	r2, #120	@ 0x78
 800398c:	4932      	ldr	r1, [pc, #200]	@ (8003a58 <_printf_i+0x218>)
 800398e:	9104      	str	r1, [sp, #16]
 8003990:	0021      	movs	r1, r4
 8003992:	3145      	adds	r1, #69	@ 0x45
 8003994:	700a      	strb	r2, [r1, #0]
 8003996:	6819      	ldr	r1, [r3, #0]
 8003998:	6822      	ldr	r2, [r4, #0]
 800399a:	c940      	ldmia	r1!, {r6}
 800399c:	0610      	lsls	r0, r2, #24
 800399e:	d402      	bmi.n	80039a6 <_printf_i+0x166>
 80039a0:	0650      	lsls	r0, r2, #25
 80039a2:	d500      	bpl.n	80039a6 <_printf_i+0x166>
 80039a4:	b2b6      	uxth	r6, r6
 80039a6:	6019      	str	r1, [r3, #0]
 80039a8:	07d3      	lsls	r3, r2, #31
 80039aa:	d502      	bpl.n	80039b2 <_printf_i+0x172>
 80039ac:	2320      	movs	r3, #32
 80039ae:	4313      	orrs	r3, r2
 80039b0:	6023      	str	r3, [r4, #0]
 80039b2:	2e00      	cmp	r6, #0
 80039b4:	d001      	beq.n	80039ba <_printf_i+0x17a>
 80039b6:	2710      	movs	r7, #16
 80039b8:	e7a8      	b.n	800390c <_printf_i+0xcc>
 80039ba:	2220      	movs	r2, #32
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	4393      	bics	r3, r2
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	e7f8      	b.n	80039b6 <_printf_i+0x176>
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	680d      	ldr	r5, [r1, #0]
 80039c8:	1d10      	adds	r0, r2, #4
 80039ca:	6949      	ldr	r1, [r1, #20]
 80039cc:	6018      	str	r0, [r3, #0]
 80039ce:	6813      	ldr	r3, [r2, #0]
 80039d0:	062e      	lsls	r6, r5, #24
 80039d2:	d501      	bpl.n	80039d8 <_printf_i+0x198>
 80039d4:	6019      	str	r1, [r3, #0]
 80039d6:	e002      	b.n	80039de <_printf_i+0x19e>
 80039d8:	066d      	lsls	r5, r5, #25
 80039da:	d5fb      	bpl.n	80039d4 <_printf_i+0x194>
 80039dc:	8019      	strh	r1, [r3, #0]
 80039de:	2300      	movs	r3, #0
 80039e0:	9d03      	ldr	r5, [sp, #12]
 80039e2:	6123      	str	r3, [r4, #16]
 80039e4:	e7bf      	b.n	8003966 <_printf_i+0x126>
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	1d11      	adds	r1, r2, #4
 80039ea:	6019      	str	r1, [r3, #0]
 80039ec:	6815      	ldr	r5, [r2, #0]
 80039ee:	2100      	movs	r1, #0
 80039f0:	0028      	movs	r0, r5
 80039f2:	6862      	ldr	r2, [r4, #4]
 80039f4:	f000 f996 	bl	8003d24 <memchr>
 80039f8:	2800      	cmp	r0, #0
 80039fa:	d001      	beq.n	8003a00 <_printf_i+0x1c0>
 80039fc:	1b40      	subs	r0, r0, r5
 80039fe:	6060      	str	r0, [r4, #4]
 8003a00:	6863      	ldr	r3, [r4, #4]
 8003a02:	6123      	str	r3, [r4, #16]
 8003a04:	2300      	movs	r3, #0
 8003a06:	9a03      	ldr	r2, [sp, #12]
 8003a08:	7013      	strb	r3, [r2, #0]
 8003a0a:	e7ac      	b.n	8003966 <_printf_i+0x126>
 8003a0c:	002a      	movs	r2, r5
 8003a0e:	6923      	ldr	r3, [r4, #16]
 8003a10:	9906      	ldr	r1, [sp, #24]
 8003a12:	9805      	ldr	r0, [sp, #20]
 8003a14:	9d07      	ldr	r5, [sp, #28]
 8003a16:	47a8      	blx	r5
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d0ae      	beq.n	800397a <_printf_i+0x13a>
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	079b      	lsls	r3, r3, #30
 8003a20:	d415      	bmi.n	8003a4e <_printf_i+0x20e>
 8003a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a24:	68e0      	ldr	r0, [r4, #12]
 8003a26:	4298      	cmp	r0, r3
 8003a28:	daa9      	bge.n	800397e <_printf_i+0x13e>
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	e7a7      	b.n	800397e <_printf_i+0x13e>
 8003a2e:	0022      	movs	r2, r4
 8003a30:	2301      	movs	r3, #1
 8003a32:	9906      	ldr	r1, [sp, #24]
 8003a34:	9805      	ldr	r0, [sp, #20]
 8003a36:	9e07      	ldr	r6, [sp, #28]
 8003a38:	3219      	adds	r2, #25
 8003a3a:	47b0      	blx	r6
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	d09c      	beq.n	800397a <_printf_i+0x13a>
 8003a40:	3501      	adds	r5, #1
 8003a42:	68e3      	ldr	r3, [r4, #12]
 8003a44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	42ab      	cmp	r3, r5
 8003a4a:	dcf0      	bgt.n	8003a2e <_printf_i+0x1ee>
 8003a4c:	e7e9      	b.n	8003a22 <_printf_i+0x1e2>
 8003a4e:	2500      	movs	r5, #0
 8003a50:	e7f7      	b.n	8003a42 <_printf_i+0x202>
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	08003f81 	.word	0x08003f81
 8003a58:	08003f92 	.word	0x08003f92

08003a5c <__sflush_r>:
 8003a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a5e:	220c      	movs	r2, #12
 8003a60:	5e8b      	ldrsh	r3, [r1, r2]
 8003a62:	0005      	movs	r5, r0
 8003a64:	000c      	movs	r4, r1
 8003a66:	071a      	lsls	r2, r3, #28
 8003a68:	d456      	bmi.n	8003b18 <__sflush_r+0xbc>
 8003a6a:	684a      	ldr	r2, [r1, #4]
 8003a6c:	2a00      	cmp	r2, #0
 8003a6e:	dc02      	bgt.n	8003a76 <__sflush_r+0x1a>
 8003a70:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003a72:	2a00      	cmp	r2, #0
 8003a74:	dd4e      	ble.n	8003b14 <__sflush_r+0xb8>
 8003a76:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003a78:	2f00      	cmp	r7, #0
 8003a7a:	d04b      	beq.n	8003b14 <__sflush_r+0xb8>
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2080      	movs	r0, #128	@ 0x80
 8003a80:	682e      	ldr	r6, [r5, #0]
 8003a82:	602a      	str	r2, [r5, #0]
 8003a84:	001a      	movs	r2, r3
 8003a86:	0140      	lsls	r0, r0, #5
 8003a88:	6a21      	ldr	r1, [r4, #32]
 8003a8a:	4002      	ands	r2, r0
 8003a8c:	4203      	tst	r3, r0
 8003a8e:	d033      	beq.n	8003af8 <__sflush_r+0x9c>
 8003a90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a92:	89a3      	ldrh	r3, [r4, #12]
 8003a94:	075b      	lsls	r3, r3, #29
 8003a96:	d506      	bpl.n	8003aa6 <__sflush_r+0x4a>
 8003a98:	6863      	ldr	r3, [r4, #4]
 8003a9a:	1ad2      	subs	r2, r2, r3
 8003a9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <__sflush_r+0x4a>
 8003aa2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003aa4:	1ad2      	subs	r2, r2, r3
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	0028      	movs	r0, r5
 8003aaa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003aac:	6a21      	ldr	r1, [r4, #32]
 8003aae:	47b8      	blx	r7
 8003ab0:	89a2      	ldrh	r2, [r4, #12]
 8003ab2:	1c43      	adds	r3, r0, #1
 8003ab4:	d106      	bne.n	8003ac4 <__sflush_r+0x68>
 8003ab6:	6829      	ldr	r1, [r5, #0]
 8003ab8:	291d      	cmp	r1, #29
 8003aba:	d846      	bhi.n	8003b4a <__sflush_r+0xee>
 8003abc:	4b29      	ldr	r3, [pc, #164]	@ (8003b64 <__sflush_r+0x108>)
 8003abe:	410b      	asrs	r3, r1
 8003ac0:	07db      	lsls	r3, r3, #31
 8003ac2:	d442      	bmi.n	8003b4a <__sflush_r+0xee>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	6063      	str	r3, [r4, #4]
 8003ac8:	6923      	ldr	r3, [r4, #16]
 8003aca:	6023      	str	r3, [r4, #0]
 8003acc:	04d2      	lsls	r2, r2, #19
 8003ace:	d505      	bpl.n	8003adc <__sflush_r+0x80>
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	d102      	bne.n	8003ada <__sflush_r+0x7e>
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d100      	bne.n	8003adc <__sflush_r+0x80>
 8003ada:	6560      	str	r0, [r4, #84]	@ 0x54
 8003adc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ade:	602e      	str	r6, [r5, #0]
 8003ae0:	2900      	cmp	r1, #0
 8003ae2:	d017      	beq.n	8003b14 <__sflush_r+0xb8>
 8003ae4:	0023      	movs	r3, r4
 8003ae6:	3344      	adds	r3, #68	@ 0x44
 8003ae8:	4299      	cmp	r1, r3
 8003aea:	d002      	beq.n	8003af2 <__sflush_r+0x96>
 8003aec:	0028      	movs	r0, r5
 8003aee:	f7ff fbf7 	bl	80032e0 <_free_r>
 8003af2:	2300      	movs	r3, #0
 8003af4:	6363      	str	r3, [r4, #52]	@ 0x34
 8003af6:	e00d      	b.n	8003b14 <__sflush_r+0xb8>
 8003af8:	2301      	movs	r3, #1
 8003afa:	0028      	movs	r0, r5
 8003afc:	47b8      	blx	r7
 8003afe:	0002      	movs	r2, r0
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d1c6      	bne.n	8003a92 <__sflush_r+0x36>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0c3      	beq.n	8003a92 <__sflush_r+0x36>
 8003b0a:	2b1d      	cmp	r3, #29
 8003b0c:	d001      	beq.n	8003b12 <__sflush_r+0xb6>
 8003b0e:	2b16      	cmp	r3, #22
 8003b10:	d11a      	bne.n	8003b48 <__sflush_r+0xec>
 8003b12:	602e      	str	r6, [r5, #0]
 8003b14:	2000      	movs	r0, #0
 8003b16:	e01e      	b.n	8003b56 <__sflush_r+0xfa>
 8003b18:	690e      	ldr	r6, [r1, #16]
 8003b1a:	2e00      	cmp	r6, #0
 8003b1c:	d0fa      	beq.n	8003b14 <__sflush_r+0xb8>
 8003b1e:	680f      	ldr	r7, [r1, #0]
 8003b20:	600e      	str	r6, [r1, #0]
 8003b22:	1bba      	subs	r2, r7, r6
 8003b24:	9201      	str	r2, [sp, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	079b      	lsls	r3, r3, #30
 8003b2a:	d100      	bne.n	8003b2e <__sflush_r+0xd2>
 8003b2c:	694a      	ldr	r2, [r1, #20]
 8003b2e:	60a2      	str	r2, [r4, #8]
 8003b30:	9b01      	ldr	r3, [sp, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	ddee      	ble.n	8003b14 <__sflush_r+0xb8>
 8003b36:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003b38:	0032      	movs	r2, r6
 8003b3a:	001f      	movs	r7, r3
 8003b3c:	0028      	movs	r0, r5
 8003b3e:	9b01      	ldr	r3, [sp, #4]
 8003b40:	6a21      	ldr	r1, [r4, #32]
 8003b42:	47b8      	blx	r7
 8003b44:	2800      	cmp	r0, #0
 8003b46:	dc07      	bgt.n	8003b58 <__sflush_r+0xfc>
 8003b48:	89a2      	ldrh	r2, [r4, #12]
 8003b4a:	2340      	movs	r3, #64	@ 0x40
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	b21b      	sxth	r3, r3
 8003b52:	81a3      	strh	r3, [r4, #12]
 8003b54:	4240      	negs	r0, r0
 8003b56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b58:	9b01      	ldr	r3, [sp, #4]
 8003b5a:	1836      	adds	r6, r6, r0
 8003b5c:	1a1b      	subs	r3, r3, r0
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	e7e6      	b.n	8003b30 <__sflush_r+0xd4>
 8003b62:	46c0      	nop			@ (mov r8, r8)
 8003b64:	dfbffffe 	.word	0xdfbffffe

08003b68 <_fflush_r>:
 8003b68:	690b      	ldr	r3, [r1, #16]
 8003b6a:	b570      	push	{r4, r5, r6, lr}
 8003b6c:	0005      	movs	r5, r0
 8003b6e:	000c      	movs	r4, r1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <_fflush_r+0x12>
 8003b74:	2500      	movs	r5, #0
 8003b76:	0028      	movs	r0, r5
 8003b78:	bd70      	pop	{r4, r5, r6, pc}
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	d004      	beq.n	8003b88 <_fflush_r+0x20>
 8003b7e:	6a03      	ldr	r3, [r0, #32]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <_fflush_r+0x20>
 8003b84:	f7ff fa98 	bl	80030b8 <__sinit>
 8003b88:	220c      	movs	r2, #12
 8003b8a:	5ea3      	ldrsh	r3, [r4, r2]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f1      	beq.n	8003b74 <_fflush_r+0xc>
 8003b90:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b92:	07d2      	lsls	r2, r2, #31
 8003b94:	d404      	bmi.n	8003ba0 <_fflush_r+0x38>
 8003b96:	059b      	lsls	r3, r3, #22
 8003b98:	d402      	bmi.n	8003ba0 <_fflush_r+0x38>
 8003b9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b9c:	f7ff fb9d 	bl	80032da <__retarget_lock_acquire_recursive>
 8003ba0:	0028      	movs	r0, r5
 8003ba2:	0021      	movs	r1, r4
 8003ba4:	f7ff ff5a 	bl	8003a5c <__sflush_r>
 8003ba8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003baa:	0005      	movs	r5, r0
 8003bac:	07db      	lsls	r3, r3, #31
 8003bae:	d4e2      	bmi.n	8003b76 <_fflush_r+0xe>
 8003bb0:	89a3      	ldrh	r3, [r4, #12]
 8003bb2:	059b      	lsls	r3, r3, #22
 8003bb4:	d4df      	bmi.n	8003b76 <_fflush_r+0xe>
 8003bb6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bb8:	f7ff fb90 	bl	80032dc <__retarget_lock_release_recursive>
 8003bbc:	e7db      	b.n	8003b76 <_fflush_r+0xe>

08003bbe <__swbuf_r>:
 8003bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc0:	0006      	movs	r6, r0
 8003bc2:	000d      	movs	r5, r1
 8003bc4:	0014      	movs	r4, r2
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d004      	beq.n	8003bd4 <__swbuf_r+0x16>
 8003bca:	6a03      	ldr	r3, [r0, #32]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <__swbuf_r+0x16>
 8003bd0:	f7ff fa72 	bl	80030b8 <__sinit>
 8003bd4:	69a3      	ldr	r3, [r4, #24]
 8003bd6:	60a3      	str	r3, [r4, #8]
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	071b      	lsls	r3, r3, #28
 8003bdc:	d502      	bpl.n	8003be4 <__swbuf_r+0x26>
 8003bde:	6923      	ldr	r3, [r4, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d109      	bne.n	8003bf8 <__swbuf_r+0x3a>
 8003be4:	0021      	movs	r1, r4
 8003be6:	0030      	movs	r0, r6
 8003be8:	f000 f82c 	bl	8003c44 <__swsetup_r>
 8003bec:	2800      	cmp	r0, #0
 8003bee:	d003      	beq.n	8003bf8 <__swbuf_r+0x3a>
 8003bf0:	2501      	movs	r5, #1
 8003bf2:	426d      	negs	r5, r5
 8003bf4:	0028      	movs	r0, r5
 8003bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf8:	6923      	ldr	r3, [r4, #16]
 8003bfa:	6820      	ldr	r0, [r4, #0]
 8003bfc:	b2ef      	uxtb	r7, r5
 8003bfe:	1ac0      	subs	r0, r0, r3
 8003c00:	6963      	ldr	r3, [r4, #20]
 8003c02:	b2ed      	uxtb	r5, r5
 8003c04:	4283      	cmp	r3, r0
 8003c06:	dc05      	bgt.n	8003c14 <__swbuf_r+0x56>
 8003c08:	0021      	movs	r1, r4
 8003c0a:	0030      	movs	r0, r6
 8003c0c:	f7ff ffac 	bl	8003b68 <_fflush_r>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d1ed      	bne.n	8003bf0 <__swbuf_r+0x32>
 8003c14:	68a3      	ldr	r3, [r4, #8]
 8003c16:	3001      	adds	r0, #1
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	60a3      	str	r3, [r4, #8]
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	6022      	str	r2, [r4, #0]
 8003c22:	701f      	strb	r7, [r3, #0]
 8003c24:	6963      	ldr	r3, [r4, #20]
 8003c26:	4283      	cmp	r3, r0
 8003c28:	d004      	beq.n	8003c34 <__swbuf_r+0x76>
 8003c2a:	89a3      	ldrh	r3, [r4, #12]
 8003c2c:	07db      	lsls	r3, r3, #31
 8003c2e:	d5e1      	bpl.n	8003bf4 <__swbuf_r+0x36>
 8003c30:	2d0a      	cmp	r5, #10
 8003c32:	d1df      	bne.n	8003bf4 <__swbuf_r+0x36>
 8003c34:	0021      	movs	r1, r4
 8003c36:	0030      	movs	r0, r6
 8003c38:	f7ff ff96 	bl	8003b68 <_fflush_r>
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	d0d9      	beq.n	8003bf4 <__swbuf_r+0x36>
 8003c40:	e7d6      	b.n	8003bf0 <__swbuf_r+0x32>
	...

08003c44 <__swsetup_r>:
 8003c44:	4b2d      	ldr	r3, [pc, #180]	@ (8003cfc <__swsetup_r+0xb8>)
 8003c46:	b570      	push	{r4, r5, r6, lr}
 8003c48:	0005      	movs	r5, r0
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	000c      	movs	r4, r1
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d004      	beq.n	8003c5c <__swsetup_r+0x18>
 8003c52:	6a03      	ldr	r3, [r0, #32]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <__swsetup_r+0x18>
 8003c58:	f7ff fa2e 	bl	80030b8 <__sinit>
 8003c5c:	230c      	movs	r3, #12
 8003c5e:	5ee2      	ldrsh	r2, [r4, r3]
 8003c60:	0713      	lsls	r3, r2, #28
 8003c62:	d423      	bmi.n	8003cac <__swsetup_r+0x68>
 8003c64:	06d3      	lsls	r3, r2, #27
 8003c66:	d407      	bmi.n	8003c78 <__swsetup_r+0x34>
 8003c68:	2309      	movs	r3, #9
 8003c6a:	602b      	str	r3, [r5, #0]
 8003c6c:	2340      	movs	r3, #64	@ 0x40
 8003c6e:	2001      	movs	r0, #1
 8003c70:	4313      	orrs	r3, r2
 8003c72:	81a3      	strh	r3, [r4, #12]
 8003c74:	4240      	negs	r0, r0
 8003c76:	e03a      	b.n	8003cee <__swsetup_r+0xaa>
 8003c78:	0752      	lsls	r2, r2, #29
 8003c7a:	d513      	bpl.n	8003ca4 <__swsetup_r+0x60>
 8003c7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c7e:	2900      	cmp	r1, #0
 8003c80:	d008      	beq.n	8003c94 <__swsetup_r+0x50>
 8003c82:	0023      	movs	r3, r4
 8003c84:	3344      	adds	r3, #68	@ 0x44
 8003c86:	4299      	cmp	r1, r3
 8003c88:	d002      	beq.n	8003c90 <__swsetup_r+0x4c>
 8003c8a:	0028      	movs	r0, r5
 8003c8c:	f7ff fb28 	bl	80032e0 <_free_r>
 8003c90:	2300      	movs	r3, #0
 8003c92:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c94:	2224      	movs	r2, #36	@ 0x24
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	4393      	bics	r3, r2
 8003c9a:	81a3      	strh	r3, [r4, #12]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	6063      	str	r3, [r4, #4]
 8003ca0:	6923      	ldr	r3, [r4, #16]
 8003ca2:	6023      	str	r3, [r4, #0]
 8003ca4:	2308      	movs	r3, #8
 8003ca6:	89a2      	ldrh	r2, [r4, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	81a3      	strh	r3, [r4, #12]
 8003cac:	6923      	ldr	r3, [r4, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10b      	bne.n	8003cca <__swsetup_r+0x86>
 8003cb2:	21a0      	movs	r1, #160	@ 0xa0
 8003cb4:	2280      	movs	r2, #128	@ 0x80
 8003cb6:	89a3      	ldrh	r3, [r4, #12]
 8003cb8:	0089      	lsls	r1, r1, #2
 8003cba:	0092      	lsls	r2, r2, #2
 8003cbc:	400b      	ands	r3, r1
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d003      	beq.n	8003cca <__swsetup_r+0x86>
 8003cc2:	0021      	movs	r1, r4
 8003cc4:	0028      	movs	r0, r5
 8003cc6:	f000 f863 	bl	8003d90 <__smakebuf_r>
 8003cca:	230c      	movs	r3, #12
 8003ccc:	5ee2      	ldrsh	r2, [r4, r3]
 8003cce:	2101      	movs	r1, #1
 8003cd0:	0013      	movs	r3, r2
 8003cd2:	400b      	ands	r3, r1
 8003cd4:	420a      	tst	r2, r1
 8003cd6:	d00b      	beq.n	8003cf0 <__swsetup_r+0xac>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60a3      	str	r3, [r4, #8]
 8003cdc:	6963      	ldr	r3, [r4, #20]
 8003cde:	425b      	negs	r3, r3
 8003ce0:	61a3      	str	r3, [r4, #24]
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	6923      	ldr	r3, [r4, #16]
 8003ce6:	4283      	cmp	r3, r0
 8003ce8:	d101      	bne.n	8003cee <__swsetup_r+0xaa>
 8003cea:	0613      	lsls	r3, r2, #24
 8003cec:	d4be      	bmi.n	8003c6c <__swsetup_r+0x28>
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
 8003cf0:	0791      	lsls	r1, r2, #30
 8003cf2:	d400      	bmi.n	8003cf6 <__swsetup_r+0xb2>
 8003cf4:	6963      	ldr	r3, [r4, #20]
 8003cf6:	60a3      	str	r3, [r4, #8]
 8003cf8:	e7f3      	b.n	8003ce2 <__swsetup_r+0x9e>
 8003cfa:	46c0      	nop			@ (mov r8, r8)
 8003cfc:	2000002c 	.word	0x2000002c

08003d00 <_sbrk_r>:
 8003d00:	2300      	movs	r3, #0
 8003d02:	b570      	push	{r4, r5, r6, lr}
 8003d04:	4d06      	ldr	r5, [pc, #24]	@ (8003d20 <_sbrk_r+0x20>)
 8003d06:	0004      	movs	r4, r0
 8003d08:	0008      	movs	r0, r1
 8003d0a:	602b      	str	r3, [r5, #0]
 8003d0c:	f7fd fa08 	bl	8001120 <_sbrk>
 8003d10:	1c43      	adds	r3, r0, #1
 8003d12:	d103      	bne.n	8003d1c <_sbrk_r+0x1c>
 8003d14:	682b      	ldr	r3, [r5, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d000      	beq.n	8003d1c <_sbrk_r+0x1c>
 8003d1a:	6023      	str	r3, [r4, #0]
 8003d1c:	bd70      	pop	{r4, r5, r6, pc}
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	200002c4 	.word	0x200002c4

08003d24 <memchr>:
 8003d24:	b2c9      	uxtb	r1, r1
 8003d26:	1882      	adds	r2, r0, r2
 8003d28:	4290      	cmp	r0, r2
 8003d2a:	d101      	bne.n	8003d30 <memchr+0xc>
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	4770      	bx	lr
 8003d30:	7803      	ldrb	r3, [r0, #0]
 8003d32:	428b      	cmp	r3, r1
 8003d34:	d0fb      	beq.n	8003d2e <memchr+0xa>
 8003d36:	3001      	adds	r0, #1
 8003d38:	e7f6      	b.n	8003d28 <memchr+0x4>
	...

08003d3c <__swhatbuf_r>:
 8003d3c:	b570      	push	{r4, r5, r6, lr}
 8003d3e:	000e      	movs	r6, r1
 8003d40:	001d      	movs	r5, r3
 8003d42:	230e      	movs	r3, #14
 8003d44:	5ec9      	ldrsh	r1, [r1, r3]
 8003d46:	0014      	movs	r4, r2
 8003d48:	b096      	sub	sp, #88	@ 0x58
 8003d4a:	2900      	cmp	r1, #0
 8003d4c:	da0c      	bge.n	8003d68 <__swhatbuf_r+0x2c>
 8003d4e:	89b2      	ldrh	r2, [r6, #12]
 8003d50:	2380      	movs	r3, #128	@ 0x80
 8003d52:	0011      	movs	r1, r2
 8003d54:	4019      	ands	r1, r3
 8003d56:	421a      	tst	r2, r3
 8003d58:	d114      	bne.n	8003d84 <__swhatbuf_r+0x48>
 8003d5a:	2380      	movs	r3, #128	@ 0x80
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	2000      	movs	r0, #0
 8003d60:	6029      	str	r1, [r5, #0]
 8003d62:	6023      	str	r3, [r4, #0]
 8003d64:	b016      	add	sp, #88	@ 0x58
 8003d66:	bd70      	pop	{r4, r5, r6, pc}
 8003d68:	466a      	mov	r2, sp
 8003d6a:	f000 f853 	bl	8003e14 <_fstat_r>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	dbed      	blt.n	8003d4e <__swhatbuf_r+0x12>
 8003d72:	23f0      	movs	r3, #240	@ 0xf0
 8003d74:	9901      	ldr	r1, [sp, #4]
 8003d76:	021b      	lsls	r3, r3, #8
 8003d78:	4019      	ands	r1, r3
 8003d7a:	4b04      	ldr	r3, [pc, #16]	@ (8003d8c <__swhatbuf_r+0x50>)
 8003d7c:	18c9      	adds	r1, r1, r3
 8003d7e:	424b      	negs	r3, r1
 8003d80:	4159      	adcs	r1, r3
 8003d82:	e7ea      	b.n	8003d5a <__swhatbuf_r+0x1e>
 8003d84:	2100      	movs	r1, #0
 8003d86:	2340      	movs	r3, #64	@ 0x40
 8003d88:	e7e9      	b.n	8003d5e <__swhatbuf_r+0x22>
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	ffffe000 	.word	0xffffe000

08003d90 <__smakebuf_r>:
 8003d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d92:	2602      	movs	r6, #2
 8003d94:	898b      	ldrh	r3, [r1, #12]
 8003d96:	0005      	movs	r5, r0
 8003d98:	000c      	movs	r4, r1
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	4233      	tst	r3, r6
 8003d9e:	d007      	beq.n	8003db0 <__smakebuf_r+0x20>
 8003da0:	0023      	movs	r3, r4
 8003da2:	3347      	adds	r3, #71	@ 0x47
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	6123      	str	r3, [r4, #16]
 8003da8:	2301      	movs	r3, #1
 8003daa:	6163      	str	r3, [r4, #20]
 8003dac:	b005      	add	sp, #20
 8003dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003db0:	ab03      	add	r3, sp, #12
 8003db2:	aa02      	add	r2, sp, #8
 8003db4:	f7ff ffc2 	bl	8003d3c <__swhatbuf_r>
 8003db8:	9f02      	ldr	r7, [sp, #8]
 8003dba:	9001      	str	r0, [sp, #4]
 8003dbc:	0039      	movs	r1, r7
 8003dbe:	0028      	movs	r0, r5
 8003dc0:	f7ff fafa 	bl	80033b8 <_malloc_r>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	d108      	bne.n	8003dda <__smakebuf_r+0x4a>
 8003dc8:	220c      	movs	r2, #12
 8003dca:	5ea3      	ldrsh	r3, [r4, r2]
 8003dcc:	059a      	lsls	r2, r3, #22
 8003dce:	d4ed      	bmi.n	8003dac <__smakebuf_r+0x1c>
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	4393      	bics	r3, r2
 8003dd4:	431e      	orrs	r6, r3
 8003dd6:	81a6      	strh	r6, [r4, #12]
 8003dd8:	e7e2      	b.n	8003da0 <__smakebuf_r+0x10>
 8003dda:	2380      	movs	r3, #128	@ 0x80
 8003ddc:	89a2      	ldrh	r2, [r4, #12]
 8003dde:	6020      	str	r0, [r4, #0]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	81a3      	strh	r3, [r4, #12]
 8003de4:	9b03      	ldr	r3, [sp, #12]
 8003de6:	6120      	str	r0, [r4, #16]
 8003de8:	6167      	str	r7, [r4, #20]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00c      	beq.n	8003e08 <__smakebuf_r+0x78>
 8003dee:	0028      	movs	r0, r5
 8003df0:	230e      	movs	r3, #14
 8003df2:	5ee1      	ldrsh	r1, [r4, r3]
 8003df4:	f000 f820 	bl	8003e38 <_isatty_r>
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	d005      	beq.n	8003e08 <__smakebuf_r+0x78>
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	89a2      	ldrh	r2, [r4, #12]
 8003e00:	439a      	bics	r2, r3
 8003e02:	3b02      	subs	r3, #2
 8003e04:	4313      	orrs	r3, r2
 8003e06:	81a3      	strh	r3, [r4, #12]
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	9a01      	ldr	r2, [sp, #4]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	81a3      	strh	r3, [r4, #12]
 8003e10:	e7cc      	b.n	8003dac <__smakebuf_r+0x1c>
	...

08003e14 <_fstat_r>:
 8003e14:	2300      	movs	r3, #0
 8003e16:	b570      	push	{r4, r5, r6, lr}
 8003e18:	4d06      	ldr	r5, [pc, #24]	@ (8003e34 <_fstat_r+0x20>)
 8003e1a:	0004      	movs	r4, r0
 8003e1c:	0008      	movs	r0, r1
 8003e1e:	0011      	movs	r1, r2
 8003e20:	602b      	str	r3, [r5, #0]
 8003e22:	f7fd f95a 	bl	80010da <_fstat>
 8003e26:	1c43      	adds	r3, r0, #1
 8003e28:	d103      	bne.n	8003e32 <_fstat_r+0x1e>
 8003e2a:	682b      	ldr	r3, [r5, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d000      	beq.n	8003e32 <_fstat_r+0x1e>
 8003e30:	6023      	str	r3, [r4, #0]
 8003e32:	bd70      	pop	{r4, r5, r6, pc}
 8003e34:	200002c4 	.word	0x200002c4

08003e38 <_isatty_r>:
 8003e38:	2300      	movs	r3, #0
 8003e3a:	b570      	push	{r4, r5, r6, lr}
 8003e3c:	4d06      	ldr	r5, [pc, #24]	@ (8003e58 <_isatty_r+0x20>)
 8003e3e:	0004      	movs	r4, r0
 8003e40:	0008      	movs	r0, r1
 8003e42:	602b      	str	r3, [r5, #0]
 8003e44:	f7fd f957 	bl	80010f6 <_isatty>
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	d103      	bne.n	8003e54 <_isatty_r+0x1c>
 8003e4c:	682b      	ldr	r3, [r5, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d000      	beq.n	8003e54 <_isatty_r+0x1c>
 8003e52:	6023      	str	r3, [r4, #0]
 8003e54:	bd70      	pop	{r4, r5, r6, pc}
 8003e56:	46c0      	nop			@ (mov r8, r8)
 8003e58:	200002c4 	.word	0x200002c4

08003e5c <_init>:
 8003e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5e:	46c0      	nop			@ (mov r8, r8)
 8003e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e62:	bc08      	pop	{r3}
 8003e64:	469e      	mov	lr, r3
 8003e66:	4770      	bx	lr

08003e68 <_fini>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	46c0      	nop			@ (mov r8, r8)
 8003e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6e:	bc08      	pop	{r3}
 8003e70:	469e      	mov	lr, r3
 8003e72:	4770      	bx	lr
