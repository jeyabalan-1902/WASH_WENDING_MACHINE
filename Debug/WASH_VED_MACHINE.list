
WASH_VED_MACHINE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005548  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08005608  08005608  00006608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a60  08005a60  00007080  2**0
                  CONTENTS
  4 .ARM          00000000  08005a60  08005a60  00007080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a60  08005a60  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a60  08005a60  00006a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a64  08005a64  00006a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08005a68  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000080  08005ae8  00007080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08005ae8  00007328  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de29  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201f  00000000  00000000  00014ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00016ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab2  00000000  00000000  00017c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000123f2  00000000  00000000  0001874a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cd7  00000000  00000000  0002ab3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b0a4  00000000  00000000  0003b813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a68b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b0  00000000  00000000  000a68fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000aa1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080055f0 	.word	0x080055f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	080055f0 	.word	0x080055f0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <Delay_us>:
#define DATA_HIGH() HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET)
#define DATA_LOW()  HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);


void Delay_us (int time)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<time; i++)
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	e00c      	b.n	8000430 <Delay_us+0x28>
	{
		for (int j=0; j<7; j++)
 8000416:	2300      	movs	r3, #0
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	e003      	b.n	8000424 <Delay_us+0x1c>
		{
			__asm__("nop");
 800041c:	46c0      	nop			@ (mov r8, r8)
		for (int j=0; j<7; j++)
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	3301      	adds	r3, #1
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	2b06      	cmp	r3, #6
 8000428:	ddf8      	ble.n	800041c <Delay_us+0x14>
	for (int i=0; i<time; i++)
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	3301      	adds	r3, #1
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fa      	ldr	r2, [r7, #12]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	429a      	cmp	r2, r3
 8000436:	dbee      	blt.n	8000416 <Delay_us+0xe>
		}
	}
}
 8000438:	46c0      	nop			@ (mov r8, r8)
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b004      	add	sp, #16
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <start>:

void start (void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0

	CLK_HIGH();
 8000448:	2380      	movs	r3, #128	@ 0x80
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	480c      	ldr	r0, [pc, #48]	@ (8000480 <start+0x3c>)
 800044e:	2201      	movs	r2, #1
 8000450:	0019      	movs	r1, r3
 8000452:	f002 fd47 	bl	8002ee4 <HAL_GPIO_WritePin>
	DATA_HIGH();
 8000456:	2380      	movs	r3, #128	@ 0x80
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	4809      	ldr	r0, [pc, #36]	@ (8000480 <start+0x3c>)
 800045c:	2201      	movs	r2, #1
 800045e:	0019      	movs	r1, r3
 8000460:	f002 fd40 	bl	8002ee4 <HAL_GPIO_WritePin>
	Delay_us (2);
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff ffcf 	bl	8000408 <Delay_us>
	DATA_LOW();
 800046a:	2380      	movs	r3, #128	@ 0x80
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	4804      	ldr	r0, [pc, #16]	@ (8000480 <start+0x3c>)
 8000470:	2200      	movs	r2, #0
 8000472:	0019      	movs	r1, r3
 8000474:	f002 fd36 	bl	8002ee4 <HAL_GPIO_WritePin>
}
 8000478:	46c0      	nop			@ (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	48000400 	.word	0x48000400

08000484 <stop>:

void stop (void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	CLK_LOW();
 8000488:	2380      	movs	r3, #128	@ 0x80
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	4812      	ldr	r0, [pc, #72]	@ (80004d8 <stop+0x54>)
 800048e:	2200      	movs	r2, #0
 8000490:	0019      	movs	r1, r3
 8000492:	f002 fd27 	bl	8002ee4 <HAL_GPIO_WritePin>
	Delay_us (2);
 8000496:	2002      	movs	r0, #2
 8000498:	f7ff ffb6 	bl	8000408 <Delay_us>
	DATA_LOW();
 800049c:	2380      	movs	r3, #128	@ 0x80
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	480d      	ldr	r0, [pc, #52]	@ (80004d8 <stop+0x54>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	0019      	movs	r1, r3
 80004a6:	f002 fd1d 	bl	8002ee4 <HAL_GPIO_WritePin>
	Delay_us (2);
 80004aa:	2002      	movs	r0, #2
 80004ac:	f7ff ffac 	bl	8000408 <Delay_us>
	CLK_HIGH();
 80004b0:	2380      	movs	r3, #128	@ 0x80
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	4808      	ldr	r0, [pc, #32]	@ (80004d8 <stop+0x54>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	0019      	movs	r1, r3
 80004ba:	f002 fd13 	bl	8002ee4 <HAL_GPIO_WritePin>
	Delay_us (2);
 80004be:	2002      	movs	r0, #2
 80004c0:	f7ff ffa2 	bl	8000408 <Delay_us>
	DATA_HIGH();
 80004c4:	2380      	movs	r3, #128	@ 0x80
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	4803      	ldr	r0, [pc, #12]	@ (80004d8 <stop+0x54>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	0019      	movs	r1, r3
 80004ce:	f002 fd09 	bl	8002ee4 <HAL_GPIO_WritePin>
}
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	48000400 	.word	0x48000400

080004dc <waitforAck>:

void waitforAck (void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	CLK_LOW();
 80004e0:	2380      	movs	r3, #128	@ 0x80
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	480d      	ldr	r0, [pc, #52]	@ (800051c <waitforAck+0x40>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	0019      	movs	r1, r3
 80004ea:	f002 fcfb 	bl	8002ee4 <HAL_GPIO_WritePin>
	Delay_us (5); // After the falling edge of the eighth clock delay 5us
 80004ee:	2005      	movs	r0, #5
 80004f0:	f7ff ff8a 	bl	8000408 <Delay_us>
	              // ACK signals the beginning of judgment
//	while (dio);  // Check the state of the Data pin
	CLK_HIGH();
 80004f4:	2380      	movs	r3, #128	@ 0x80
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	4808      	ldr	r0, [pc, #32]	@ (800051c <waitforAck+0x40>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	0019      	movs	r1, r3
 80004fe:	f002 fcf1 	bl	8002ee4 <HAL_GPIO_WritePin>
	Delay_us (2);
 8000502:	2002      	movs	r0, #2
 8000504:	f7ff ff80 	bl	8000408 <Delay_us>
	CLK_LOW();
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	4803      	ldr	r0, [pc, #12]	@ (800051c <waitforAck+0x40>)
 800050e:	2200      	movs	r2, #0
 8000510:	0019      	movs	r1, r3
 8000512:	f002 fce7 	bl	8002ee4 <HAL_GPIO_WritePin>
}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	48000400 	.word	0x48000400

08000520 <writeByte>:

void writeByte (uint8_t byte)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	0002      	movs	r2, r0
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	701a      	strb	r2, [r3, #0]
	int i;
	for (i = 0; i<8; i++)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e02f      	b.n	8000592 <writeByte+0x72>
	{
		CLK_LOW();
 8000532:	2380      	movs	r3, #128	@ 0x80
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	481b      	ldr	r0, [pc, #108]	@ (80005a4 <writeByte+0x84>)
 8000538:	2200      	movs	r2, #0
 800053a:	0019      	movs	r1, r3
 800053c:	f002 fcd2 	bl	8002ee4 <HAL_GPIO_WritePin>
		if (byte & 0x01) // low front
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2201      	movs	r2, #1
 8000546:	4013      	ands	r3, r2
 8000548:	d007      	beq.n	800055a <writeByte+0x3a>
		{
			DATA_HIGH();
 800054a:	2380      	movs	r3, #128	@ 0x80
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	4815      	ldr	r0, [pc, #84]	@ (80005a4 <writeByte+0x84>)
 8000550:	2201      	movs	r2, #1
 8000552:	0019      	movs	r1, r3
 8000554:	f002 fcc6 	bl	8002ee4 <HAL_GPIO_WritePin>
 8000558:	e006      	b.n	8000568 <writeByte+0x48>
		}
		else
		{
			DATA_LOW();
 800055a:	2380      	movs	r3, #128	@ 0x80
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4811      	ldr	r0, [pc, #68]	@ (80005a4 <writeByte+0x84>)
 8000560:	2200      	movs	r2, #0
 8000562:	0019      	movs	r1, r3
 8000564:	f002 fcbe 	bl	8002ee4 <HAL_GPIO_WritePin>
		}
		Delay_us (3);
 8000568:	2003      	movs	r0, #3
 800056a:	f7ff ff4d 	bl	8000408 <Delay_us>
		byte = byte >> 1;
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	1dfa      	adds	r2, r7, #7
 8000572:	7812      	ldrb	r2, [r2, #0]
 8000574:	0852      	lsrs	r2, r2, #1
 8000576:	701a      	strb	r2, [r3, #0]
		CLK_HIGH();
 8000578:	2380      	movs	r3, #128	@ 0x80
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	4809      	ldr	r0, [pc, #36]	@ (80005a4 <writeByte+0x84>)
 800057e:	2201      	movs	r2, #1
 8000580:	0019      	movs	r1, r3
 8000582:	f002 fcaf 	bl	8002ee4 <HAL_GPIO_WritePin>
		Delay_us (3);
 8000586:	2003      	movs	r0, #3
 8000588:	f7ff ff3e 	bl	8000408 <Delay_us>
	for (i = 0; i<8; i++)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3301      	adds	r3, #1
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2b07      	cmp	r3, #7
 8000596:	ddcc      	ble.n	8000532 <writeByte+0x12>
	}
}
 8000598:	46c0      	nop			@ (mov r8, r8)
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b004      	add	sp, #16
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	48000400 	.word	0x48000400

080005a8 <TM1637_WriteData>:

void TM1637_WriteData (uint8_t Addr, uint8_t *data, int size)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b087      	sub	sp, #28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60b9      	str	r1, [r7, #8]
 80005b0:	607a      	str	r2, [r7, #4]
 80005b2:	240f      	movs	r4, #15
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	1c02      	adds	r2, r0, #0
 80005b8:	701a      	strb	r2, [r3, #0]
	start();
 80005ba:	f7ff ff43 	bl	8000444 <start>
	writeByte(0x40);
 80005be:	2040      	movs	r0, #64	@ 0x40
 80005c0:	f7ff ffae 	bl	8000520 <writeByte>
	waitforAck();
 80005c4:	f7ff ff8a 	bl	80004dc <waitforAck>
	stop();
 80005c8:	f7ff ff5c 	bl	8000484 <stop>

	start();
 80005cc:	f7ff ff3a 	bl	8000444 <start>
	writeByte(Addr);
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	0018      	movs	r0, r3
 80005d6:	f7ff ffa3 	bl	8000520 <writeByte>
	waitforAck();
 80005da:	f7ff ff7f 	bl	80004dc <waitforAck>
	for (int i=0; i<size; i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	e00b      	b.n	80005fc <TM1637_WriteData+0x54>
	{
		writeByte(data[i]);
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	18d3      	adds	r3, r2, r3
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	0018      	movs	r0, r3
 80005ee:	f7ff ff97 	bl	8000520 <writeByte>
		waitforAck();
 80005f2:	f7ff ff73 	bl	80004dc <waitforAck>
	for (int i=0; i<size; i++)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	dbef      	blt.n	80005e4 <TM1637_WriteData+0x3c>
	}
	stop();
 8000604:	f7ff ff3e 	bl	8000484 <stop>

	start();
 8000608:	f7ff ff1c 	bl	8000444 <start>
	writeByte(0x8A);
 800060c:	208a      	movs	r0, #138	@ 0x8a
 800060e:	f7ff ff87 	bl	8000520 <writeByte>
	waitforAck();
 8000612:	f7ff ff63 	bl	80004dc <waitforAck>
	stop();
 8000616:	f7ff ff35 	bl	8000484 <stop>
}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b007      	add	sp, #28
 8000620:	bd90      	pop	{r4, r7, pc}
	...

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f001 fdd4 	bl	80021d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 fcc4 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 fdd8 	bl	80011e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000634:	f000 fda6 	bl	8001184 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000638:	f000 fd26 	bl	8001088 <MX_ADC_Init>
  MX_TIM6_Init();
 800063c:	f000 fd80 	bl	8001140 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc);
 8000640:	4bdf      	ldr	r3, [pc, #892]	@ (80009c0 <main+0x39c>)
 8000642:	0018      	movs	r0, r3
 8000644:	f001 ff8e 	bl	8002564 <HAL_ADC_Start>
  printf("system start\n\r");
 8000648:	4bde      	ldr	r3, [pc, #888]	@ (80009c4 <main+0x3a0>)
 800064a:	0018      	movs	r0, r3
 800064c:	f004 f8d2 	bl	80047f4 <iprintf>
  state = 0;
 8000650:	4bdd      	ldr	r3, [pc, #884]	@ (80009c8 <main+0x3a4>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
  task_start_time = 0;
 8000656:	4bdd      	ldr	r3, [pc, #884]	@ (80009cc <main+0x3a8>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]

  show_version();
 800065c:	f001 fa0a 	bl	8001a74 <show_version>
  HAL_Delay(1000);
 8000660:	23fa      	movs	r3, #250	@ 0xfa
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	0018      	movs	r0, r3
 8000666:	f001 fe19 	bl	800229c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //DisplayDashes();
	  switch (state)
 800066a:	4bd7      	ldr	r3, [pc, #860]	@ (80009c8 <main+0x3a4>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b15      	cmp	r3, #21
 8000670:	d901      	bls.n	8000676 <main+0x52>
 8000672:	f000 fc44 	bl	8000efe <main+0x8da>
 8000676:	009a      	lsls	r2, r3, #2
 8000678:	4bd5      	ldr	r3, [pc, #852]	@ (80009d0 <main+0x3ac>)
 800067a:	18d3      	adds	r3, r2, r3
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	469f      	mov	pc, r3
	  {
	      case 0:
			  DisplayDashes();
 8000680:	f001 fb1e 	bl	8001cc0 <DisplayDashes>
			  processPulse();
 8000684:	f001 f8ca 	bl	800181c <processPulse>
			  break;
 8000688:	f000 fc7a 	bl	8000f80 <main+0x95c>

	      case 1:

			  if (!initial_display_done)
 800068c:	4bd1      	ldr	r3, [pc, #836]	@ (80009d4 <main+0x3b0>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d10c      	bne.n	80006ae <main+0x8a>
			  {
				  Display_fifty();
 8000694:	f001 fa12 	bl	8001abc <Display_fifty>
				  task_start_time = HAL_GetTick();
 8000698:	f001 fdf6 	bl	8002288 <HAL_GetTick>
 800069c:	0002      	movs	r2, r0
 800069e:	4bcb      	ldr	r3, [pc, #812]	@ (80009cc <main+0x3a8>)
 80006a0:	601a      	str	r2, [r3, #0]
				  initial_display_done = 1;
 80006a2:	4bcc      	ldr	r3, [pc, #816]	@ (80009d4 <main+0x3b0>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
				  countdown_seconds = 20;
 80006a8:	4bcb      	ldr	r3, [pc, #812]	@ (80009d8 <main+0x3b4>)
 80006aa:	2214      	movs	r2, #20
 80006ac:	601a      	str	r2, [r3, #0]
			  }

			  if (HAL_GetTick() - task_start_time >= 2000)
 80006ae:	f001 fdeb 	bl	8002288 <HAL_GetTick>
 80006b2:	0002      	movs	r2, r0
 80006b4:	4bc5      	ldr	r3, [pc, #788]	@ (80009cc <main+0x3a8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1ad2      	subs	r2, r2, r3
 80006ba:	23fa      	movs	r3, #250	@ 0xfa
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	429a      	cmp	r2, r3
 80006c0:	d201      	bcs.n	80006c6 <main+0xa2>
 80006c2:	f000 fc20 	bl	8000f06 <main+0x8e2>
			  {
				  printf("completed coin display\n\r");
 80006c6:	4bc5      	ldr	r3, [pc, #788]	@ (80009dc <main+0x3b8>)
 80006c8:	0018      	movs	r0, r3
 80006ca:	f004 f893 	bl	80047f4 <iprintf>
				  if (HAL_GetTick() - task_start_time < 23000)
 80006ce:	f001 fddb 	bl	8002288 <HAL_GetTick>
 80006d2:	0002      	movs	r2, r0
 80006d4:	4bbd      	ldr	r3, [pc, #756]	@ (80009cc <main+0x3a8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	4ac1      	ldr	r2, [pc, #772]	@ (80009e0 <main+0x3bc>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d803      	bhi.n	80006e8 <main+0xc4>
				  {
					  TM1637_Countdown_20Sec();
 80006e0:	f001 f946 	bl	8001970 <TM1637_Countdown_20Sec>
						  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_SET);
					      Relay_off_time(readPotvalue);
					  }
				  }
			  }
			  break;
 80006e4:	f000 fc0f 	bl	8000f06 <main+0x8e2>
					  if (countdown_seconds == 0)
 80006e8:	4bbb      	ldr	r3, [pc, #748]	@ (80009d8 <main+0x3b4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <main+0xd0>
 80006f0:	f000 fc09 	bl	8000f06 <main+0x8e2>
						  printf("20 sec countdown completed\n");
 80006f4:	4bbb      	ldr	r3, [pc, #748]	@ (80009e4 <main+0x3c0>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f004 f8e2 	bl	80048c0 <puts>
						  Display_OFF();
 80006fc:	f001 faba 	bl	8001c74 <Display_OFF>
						  HAL_ADC_PollForConversion(&hadc, 1000);
 8000700:	23fa      	movs	r3, #250	@ 0xfa
 8000702:	009a      	lsls	r2, r3, #2
 8000704:	4bae      	ldr	r3, [pc, #696]	@ (80009c0 <main+0x39c>)
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f001 ff7f 	bl	800260c <HAL_ADC_PollForConversion>
						  readPotvalue = HAL_ADC_GetValue(&hadc);
 800070e:	4bac      	ldr	r3, [pc, #688]	@ (80009c0 <main+0x39c>)
 8000710:	0018      	movs	r0, r3
 8000712:	f002 f813 	bl	800273c <HAL_ADC_GetValue>
 8000716:	0003      	movs	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	4bb3      	ldr	r3, [pc, #716]	@ (80009e8 <main+0x3c4>)
 800071c:	801a      	strh	r2, [r3, #0]
						  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_SET);
 800071e:	2380      	movs	r3, #128	@ 0x80
 8000720:	011b      	lsls	r3, r3, #4
 8000722:	48b2      	ldr	r0, [pc, #712]	@ (80009ec <main+0x3c8>)
 8000724:	2201      	movs	r2, #1
 8000726:	0019      	movs	r1, r3
 8000728:	f002 fbdc 	bl	8002ee4 <HAL_GPIO_WritePin>
					      Relay_off_time(readPotvalue);
 800072c:	4bae      	ldr	r3, [pc, #696]	@ (80009e8 <main+0x3c4>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fded 	bl	8001310 <Relay_off_time>
			  break;
 8000736:	f000 fbe6 	bl	8000f06 <main+0x8e2>

	      case 2:
			  if (!initial_display_done)
 800073a:	4ba6      	ldr	r3, [pc, #664]	@ (80009d4 <main+0x3b0>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d10c      	bne.n	800075c <main+0x138>
			  {
				  Display_01();
 8000742:	f001 f9df 	bl	8001b04 <Display_01>
				  task_start_time = HAL_GetTick();
 8000746:	f001 fd9f 	bl	8002288 <HAL_GetTick>
 800074a:	0002      	movs	r2, r0
 800074c:	4b9f      	ldr	r3, [pc, #636]	@ (80009cc <main+0x3a8>)
 800074e:	601a      	str	r2, [r3, #0]
				  initial_display_done = 1;
 8000750:	4ba0      	ldr	r3, [pc, #640]	@ (80009d4 <main+0x3b0>)
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
				  countdown_seconds = 20;
 8000756:	4ba0      	ldr	r3, [pc, #640]	@ (80009d8 <main+0x3b4>)
 8000758:	2214      	movs	r2, #20
 800075a:	601a      	str	r2, [r3, #0]
			  }
			  if (HAL_GetTick() - task_start_time >= 2000)
 800075c:	f001 fd94 	bl	8002288 <HAL_GetTick>
 8000760:	0002      	movs	r2, r0
 8000762:	4b9a      	ldr	r3, [pc, #616]	@ (80009cc <main+0x3a8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	1ad2      	subs	r2, r2, r3
 8000768:	23fa      	movs	r3, #250	@ 0xfa
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	429a      	cmp	r2, r3
 800076e:	d201      	bcs.n	8000774 <main+0x150>
 8000770:	f000 fbcc 	bl	8000f0c <main+0x8e8>
			  {
				  state = 3;
 8000774:	4b94      	ldr	r3, [pc, #592]	@ (80009c8 <main+0x3a4>)
 8000776:	2203      	movs	r2, #3
 8000778:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 800077a:	f000 fbc7 	bl	8000f0c <main+0x8e8>

		  case 3:
			  if (HAL_GetTick() - task_start_time < 23000)
 800077e:	f001 fd83 	bl	8002288 <HAL_GetTick>
 8000782:	0002      	movs	r2, r0
 8000784:	4b91      	ldr	r3, [pc, #580]	@ (80009cc <main+0x3a8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	4a95      	ldr	r2, [pc, #596]	@ (80009e0 <main+0x3bc>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d803      	bhi.n	8000798 <main+0x174>
			  {
				  TM1637_Countdown_20Sec();
 8000790:	f001 f8ee 	bl	8001970 <TM1637_Countdown_20Sec>
					  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_SET);
					  task_start_time = HAL_GetTick();
					  state = 4;
				  }
			  }
			  break;
 8000794:	f000 fbbd 	bl	8000f12 <main+0x8ee>
				  if(countdown_seconds == 0)
 8000798:	4b8f      	ldr	r3, [pc, #572]	@ (80009d8 <main+0x3b4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d000      	beq.n	80007a2 <main+0x17e>
 80007a0:	e3b7      	b.n	8000f12 <main+0x8ee>
					  Display_OFF();
 80007a2:	f001 fa67 	bl	8001c74 <Display_OFF>
					  printf("GPIO 3 5 7 enabled\n\r");
 80007a6:	4b92      	ldr	r3, [pc, #584]	@ (80009f0 <main+0x3cc>)
 80007a8:	0018      	movs	r0, r3
 80007aa:	f004 f823 	bl	80047f4 <iprintf>
					  HAL_GPIO_WritePin(SIGNAL_3_GPIO_Port, SIGNAL_3_Pin, GPIO_PIN_SET);
 80007ae:	2390      	movs	r3, #144	@ 0x90
 80007b0:	05db      	lsls	r3, r3, #23
 80007b2:	2201      	movs	r2, #1
 80007b4:	2104      	movs	r1, #4
 80007b6:	0018      	movs	r0, r3
 80007b8:	f002 fb94 	bl	8002ee4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_SET);
 80007bc:	2390      	movs	r3, #144	@ 0x90
 80007be:	05db      	lsls	r3, r3, #23
 80007c0:	2201      	movs	r2, #1
 80007c2:	2110      	movs	r1, #16
 80007c4:	0018      	movs	r0, r3
 80007c6:	f002 fb8d 	bl	8002ee4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_SET);
 80007ca:	2390      	movs	r3, #144	@ 0x90
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	2201      	movs	r2, #1
 80007d0:	2140      	movs	r1, #64	@ 0x40
 80007d2:	0018      	movs	r0, r3
 80007d4:	f002 fb86 	bl	8002ee4 <HAL_GPIO_WritePin>
					  task_start_time = HAL_GetTick();
 80007d8:	f001 fd56 	bl	8002288 <HAL_GetTick>
 80007dc:	0002      	movs	r2, r0
 80007de:	4b7b      	ldr	r3, [pc, #492]	@ (80009cc <main+0x3a8>)
 80007e0:	601a      	str	r2, [r3, #0]
					  state = 4;
 80007e2:	4b79      	ldr	r3, [pc, #484]	@ (80009c8 <main+0x3a4>)
 80007e4:	2204      	movs	r2, #4
 80007e6:	701a      	strb	r2, [r3, #0]
			  break;
 80007e8:	e393      	b.n	8000f12 <main+0x8ee>

		  case 4:
			  if (HAL_GetTick() - task_start_time >= 30000)
 80007ea:	f001 fd4d 	bl	8002288 <HAL_GetTick>
 80007ee:	0002      	movs	r2, r0
 80007f0:	4b76      	ldr	r3, [pc, #472]	@ (80009cc <main+0x3a8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	4a7f      	ldr	r2, [pc, #508]	@ (80009f4 <main+0x3d0>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d800      	bhi.n	80007fe <main+0x1da>
 80007fc:	e38c      	b.n	8000f18 <main+0x8f4>
			  {
				  Display_OFF();
 80007fe:	f001 fa39 	bl	8001c74 <Display_OFF>
				  printf("GPIO 3 5 7 disabled\n\r");
 8000802:	4b7d      	ldr	r3, [pc, #500]	@ (80009f8 <main+0x3d4>)
 8000804:	0018      	movs	r0, r3
 8000806:	f003 fff5 	bl	80047f4 <iprintf>
				  HAL_GPIO_WritePin(SIGNAL_3_GPIO_Port, SIGNAL_3_Pin, GPIO_PIN_RESET);
 800080a:	2390      	movs	r3, #144	@ 0x90
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	2200      	movs	r2, #0
 8000810:	2104      	movs	r1, #4
 8000812:	0018      	movs	r0, r3
 8000814:	f002 fb66 	bl	8002ee4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_RESET);
 8000818:	2390      	movs	r3, #144	@ 0x90
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	2200      	movs	r2, #0
 800081e:	2110      	movs	r1, #16
 8000820:	0018      	movs	r0, r3
 8000822:	f002 fb5f 	bl	8002ee4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_RESET);
 8000826:	2390      	movs	r3, #144	@ 0x90
 8000828:	05db      	lsls	r3, r3, #23
 800082a:	2200      	movs	r2, #0
 800082c:	2140      	movs	r1, #64	@ 0x40
 800082e:	0018      	movs	r0, r3
 8000830:	f002 fb58 	bl	8002ee4 <HAL_GPIO_WritePin>
				  task_start_time = HAL_GetTick(); // Record the start time for the next state
 8000834:	f001 fd28 	bl	8002288 <HAL_GetTick>
 8000838:	0002      	movs	r2, r0
 800083a:	4b64      	ldr	r3, [pc, #400]	@ (80009cc <main+0x3a8>)
 800083c:	601a      	str	r2, [r3, #0]
				  state = 20;
 800083e:	4b62      	ldr	r3, [pc, #392]	@ (80009c8 <main+0x3a4>)
 8000840:	2214      	movs	r2, #20
 8000842:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000844:	e368      	b.n	8000f18 <main+0x8f4>

		  case 5:
			  if (!initial_display_done)
 8000846:	4b63      	ldr	r3, [pc, #396]	@ (80009d4 <main+0x3b0>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d10c      	bne.n	8000868 <main+0x244>
			  {
				  Display_02();
 800084e:	f001 f97d 	bl	8001b4c <Display_02>
				  task_start_time = HAL_GetTick();
 8000852:	f001 fd19 	bl	8002288 <HAL_GetTick>
 8000856:	0002      	movs	r2, r0
 8000858:	4b5c      	ldr	r3, [pc, #368]	@ (80009cc <main+0x3a8>)
 800085a:	601a      	str	r2, [r3, #0]
				  initial_display_done = 1;
 800085c:	4b5d      	ldr	r3, [pc, #372]	@ (80009d4 <main+0x3b0>)
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
				  countdown_seconds = 20;
 8000862:	4b5d      	ldr	r3, [pc, #372]	@ (80009d8 <main+0x3b4>)
 8000864:	2214      	movs	r2, #20
 8000866:	601a      	str	r2, [r3, #0]
			  }
			  if (HAL_GetTick() - task_start_time >= 2000)
 8000868:	f001 fd0e 	bl	8002288 <HAL_GetTick>
 800086c:	0002      	movs	r2, r0
 800086e:	4b57      	ldr	r3, [pc, #348]	@ (80009cc <main+0x3a8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	1ad2      	subs	r2, r2, r3
 8000874:	23fa      	movs	r3, #250	@ 0xfa
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	429a      	cmp	r2, r3
 800087a:	d200      	bcs.n	800087e <main+0x25a>
 800087c:	e34f      	b.n	8000f1e <main+0x8fa>
			  {
				  state = 6;
 800087e:	4b52      	ldr	r3, [pc, #328]	@ (80009c8 <main+0x3a4>)
 8000880:	2206      	movs	r2, #6
 8000882:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000884:	e34b      	b.n	8000f1e <main+0x8fa>

		  case 6:
			  if (HAL_GetTick() - task_start_time < 23000)
 8000886:	f001 fcff 	bl	8002288 <HAL_GetTick>
 800088a:	0002      	movs	r2, r0
 800088c:	4b4f      	ldr	r3, [pc, #316]	@ (80009cc <main+0x3a8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	4a53      	ldr	r2, [pc, #332]	@ (80009e0 <main+0x3bc>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d802      	bhi.n	800089e <main+0x27a>
			  {
				  TM1637_Countdown_20Sec();
 8000898:	f001 f86a 	bl	8001970 <TM1637_Countdown_20Sec>
					  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_SET);
					  task_start_time = HAL_GetTick();
					  state = 7;
				  }
			  }
			  break;
 800089c:	e342      	b.n	8000f24 <main+0x900>
				  if(countdown_seconds == 0)
 800089e:	4b4e      	ldr	r3, [pc, #312]	@ (80009d8 <main+0x3b4>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d000      	beq.n	80008a8 <main+0x284>
 80008a6:	e33d      	b.n	8000f24 <main+0x900>
					  Display_OFF();
 80008a8:	f001 f9e4 	bl	8001c74 <Display_OFF>
					  printf("GPIO 3 5 6 7 enabled\n\r");
 80008ac:	4b53      	ldr	r3, [pc, #332]	@ (80009fc <main+0x3d8>)
 80008ae:	0018      	movs	r0, r3
 80008b0:	f003 ffa0 	bl	80047f4 <iprintf>
					  HAL_GPIO_WritePin(SIGNAL_3_GPIO_Port, SIGNAL_3_Pin, GPIO_PIN_SET);
 80008b4:	2390      	movs	r3, #144	@ 0x90
 80008b6:	05db      	lsls	r3, r3, #23
 80008b8:	2201      	movs	r2, #1
 80008ba:	2104      	movs	r1, #4
 80008bc:	0018      	movs	r0, r3
 80008be:	f002 fb11 	bl	8002ee4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_SET);
 80008c2:	2390      	movs	r3, #144	@ 0x90
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	2201      	movs	r2, #1
 80008c8:	2110      	movs	r1, #16
 80008ca:	0018      	movs	r0, r3
 80008cc:	f002 fb0a 	bl	8002ee4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SIGNAL_6_GPIO_Port, SIGNAL_6_Pin, GPIO_PIN_SET);
 80008d0:	2390      	movs	r3, #144	@ 0x90
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	2201      	movs	r2, #1
 80008d6:	2120      	movs	r1, #32
 80008d8:	0018      	movs	r0, r3
 80008da:	f002 fb03 	bl	8002ee4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_SET);
 80008de:	2390      	movs	r3, #144	@ 0x90
 80008e0:	05db      	lsls	r3, r3, #23
 80008e2:	2201      	movs	r2, #1
 80008e4:	2140      	movs	r1, #64	@ 0x40
 80008e6:	0018      	movs	r0, r3
 80008e8:	f002 fafc 	bl	8002ee4 <HAL_GPIO_WritePin>
					  task_start_time = HAL_GetTick();
 80008ec:	f001 fccc 	bl	8002288 <HAL_GetTick>
 80008f0:	0002      	movs	r2, r0
 80008f2:	4b36      	ldr	r3, [pc, #216]	@ (80009cc <main+0x3a8>)
 80008f4:	601a      	str	r2, [r3, #0]
					  state = 7;
 80008f6:	4b34      	ldr	r3, [pc, #208]	@ (80009c8 <main+0x3a4>)
 80008f8:	2207      	movs	r2, #7
 80008fa:	701a      	strb	r2, [r3, #0]
			  break;
 80008fc:	e312      	b.n	8000f24 <main+0x900>

		  case 7:
			  if (HAL_GetTick() - task_start_time >= 30000)
 80008fe:	f001 fcc3 	bl	8002288 <HAL_GetTick>
 8000902:	0002      	movs	r2, r0
 8000904:	4b31      	ldr	r3, [pc, #196]	@ (80009cc <main+0x3a8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	4a3a      	ldr	r2, [pc, #232]	@ (80009f4 <main+0x3d0>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d800      	bhi.n	8000912 <main+0x2ee>
 8000910:	e30b      	b.n	8000f2a <main+0x906>
			  {
				  Display_OFF();
 8000912:	f001 f9af 	bl	8001c74 <Display_OFF>
				  printf("GPIO 3 5 6 7 disabled\n\r");
 8000916:	4b3a      	ldr	r3, [pc, #232]	@ (8000a00 <main+0x3dc>)
 8000918:	0018      	movs	r0, r3
 800091a:	f003 ff6b 	bl	80047f4 <iprintf>
				  HAL_GPIO_WritePin(SIGNAL_3_GPIO_Port, SIGNAL_3_Pin, GPIO_PIN_RESET);
 800091e:	2390      	movs	r3, #144	@ 0x90
 8000920:	05db      	lsls	r3, r3, #23
 8000922:	2200      	movs	r2, #0
 8000924:	2104      	movs	r1, #4
 8000926:	0018      	movs	r0, r3
 8000928:	f002 fadc 	bl	8002ee4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_RESET);
 800092c:	2390      	movs	r3, #144	@ 0x90
 800092e:	05db      	lsls	r3, r3, #23
 8000930:	2200      	movs	r2, #0
 8000932:	2110      	movs	r1, #16
 8000934:	0018      	movs	r0, r3
 8000936:	f002 fad5 	bl	8002ee4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_6_GPIO_Port, SIGNAL_6_Pin, GPIO_PIN_RESET);
 800093a:	2390      	movs	r3, #144	@ 0x90
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	2200      	movs	r2, #0
 8000940:	2120      	movs	r1, #32
 8000942:	0018      	movs	r0, r3
 8000944:	f002 face 	bl	8002ee4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_RESET);
 8000948:	2390      	movs	r3, #144	@ 0x90
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	2200      	movs	r2, #0
 800094e:	2140      	movs	r1, #64	@ 0x40
 8000950:	0018      	movs	r0, r3
 8000952:	f002 fac7 	bl	8002ee4 <HAL_GPIO_WritePin>
				  task_start_time = HAL_GetTick(); // Record the start time for the next state
 8000956:	f001 fc97 	bl	8002288 <HAL_GetTick>
 800095a:	0002      	movs	r2, r0
 800095c:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <main+0x3a8>)
 800095e:	601a      	str	r2, [r3, #0]
				  state = 20;
 8000960:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <main+0x3a4>)
 8000962:	2214      	movs	r2, #20
 8000964:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000966:	e2e0      	b.n	8000f2a <main+0x906>

		  case 8:
			  if (!initial_display_done)
 8000968:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <main+0x3b0>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d10c      	bne.n	800098a <main+0x366>
			  {
				  Display_03();
 8000970:	f001 f910 	bl	8001b94 <Display_03>
				  task_start_time = HAL_GetTick();
 8000974:	f001 fc88 	bl	8002288 <HAL_GetTick>
 8000978:	0002      	movs	r2, r0
 800097a:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <main+0x3a8>)
 800097c:	601a      	str	r2, [r3, #0]
				  initial_display_done = 1;
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <main+0x3b0>)
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
				  countdown_seconds = 20;
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <main+0x3b4>)
 8000986:	2214      	movs	r2, #20
 8000988:	601a      	str	r2, [r3, #0]
			  }
			  if (HAL_GetTick() - task_start_time >= 2000)
 800098a:	f001 fc7d 	bl	8002288 <HAL_GetTick>
 800098e:	0002      	movs	r2, r0
 8000990:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <main+0x3a8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	1ad2      	subs	r2, r2, r3
 8000996:	23fa      	movs	r3, #250	@ 0xfa
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	429a      	cmp	r2, r3
 800099c:	d200      	bcs.n	80009a0 <main+0x37c>
 800099e:	e2c7      	b.n	8000f30 <main+0x90c>
			  {
				  state = 9;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <main+0x3a4>)
 80009a2:	2209      	movs	r2, #9
 80009a4:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 80009a6:	e2c3      	b.n	8000f30 <main+0x90c>

		  case 9:
			  if (HAL_GetTick() - task_start_time < 23000)
 80009a8:	f001 fc6e 	bl	8002288 <HAL_GetTick>
 80009ac:	0002      	movs	r2, r0
 80009ae:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <main+0x3a8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <main+0x3bc>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d824      	bhi.n	8000a04 <main+0x3e0>
			  {
				  TM1637_Countdown_20Sec();
 80009ba:	f000 ffd9 	bl	8001970 <TM1637_Countdown_20Sec>
					  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_SET);
					  task_start_time = HAL_GetTick();
					  state = 10;
				  }
			  }
			  break;
 80009be:	e2ba      	b.n	8000f36 <main+0x912>
 80009c0:	2000009c 	.word	0x2000009c
 80009c4:	08005608 	.word	0x08005608
 80009c8:	200001bd 	.word	0x200001bd
 80009cc:	200001c0 	.word	0x200001c0
 80009d0:	08005974 	.word	0x08005974
 80009d4:	200001ac 	.word	0x200001ac
 80009d8:	200001c4 	.word	0x200001c4
 80009dc:	08005618 	.word	0x08005618
 80009e0:	000059d7 	.word	0x000059d7
 80009e4:	08005634 	.word	0x08005634
 80009e8:	200001ae 	.word	0x200001ae
 80009ec:	48000400 	.word	0x48000400
 80009f0:	08005650 	.word	0x08005650
 80009f4:	0000752f 	.word	0x0000752f
 80009f8:	08005668 	.word	0x08005668
 80009fc:	08005680 	.word	0x08005680
 8000a00:	08005698 	.word	0x08005698
				  if(countdown_seconds == 0)
 8000a04:	4bd8      	ldr	r3, [pc, #864]	@ (8000d68 <main+0x744>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d000      	beq.n	8000a0e <main+0x3ea>
 8000a0c:	e293      	b.n	8000f36 <main+0x912>
					  Display_OFF();
 8000a0e:	f001 f931 	bl	8001c74 <Display_OFF>
					  printf("GPIO 2 5 6 7 enabled\n\r");
 8000a12:	4bd6      	ldr	r3, [pc, #856]	@ (8000d6c <main+0x748>)
 8000a14:	0018      	movs	r0, r3
 8000a16:	f003 feed 	bl	80047f4 <iprintf>
					  HAL_GPIO_WritePin(SIGNAL_2_GPIO_Port, SIGNAL_2_Pin, GPIO_PIN_SET);
 8000a1a:	2390      	movs	r3, #144	@ 0x90
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2102      	movs	r1, #2
 8000a22:	0018      	movs	r0, r3
 8000a24:	f002 fa5e 	bl	8002ee4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_SET);
 8000a28:	2390      	movs	r3, #144	@ 0x90
 8000a2a:	05db      	lsls	r3, r3, #23
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2110      	movs	r1, #16
 8000a30:	0018      	movs	r0, r3
 8000a32:	f002 fa57 	bl	8002ee4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SIGNAL_6_GPIO_Port, SIGNAL_6_Pin, GPIO_PIN_SET);
 8000a36:	2390      	movs	r3, #144	@ 0x90
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f002 fa50 	bl	8002ee4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_SET);
 8000a44:	2390      	movs	r3, #144	@ 0x90
 8000a46:	05db      	lsls	r3, r3, #23
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2140      	movs	r1, #64	@ 0x40
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f002 fa49 	bl	8002ee4 <HAL_GPIO_WritePin>
					  task_start_time = HAL_GetTick();
 8000a52:	f001 fc19 	bl	8002288 <HAL_GetTick>
 8000a56:	0002      	movs	r2, r0
 8000a58:	4bc5      	ldr	r3, [pc, #788]	@ (8000d70 <main+0x74c>)
 8000a5a:	601a      	str	r2, [r3, #0]
					  state = 10;
 8000a5c:	4bc5      	ldr	r3, [pc, #788]	@ (8000d74 <main+0x750>)
 8000a5e:	220a      	movs	r2, #10
 8000a60:	701a      	strb	r2, [r3, #0]
			  break;
 8000a62:	e268      	b.n	8000f36 <main+0x912>

		  case 10:
			  if (HAL_GetTick() - task_start_time >= 30000)
 8000a64:	f001 fc10 	bl	8002288 <HAL_GetTick>
 8000a68:	0002      	movs	r2, r0
 8000a6a:	4bc1      	ldr	r3, [pc, #772]	@ (8000d70 <main+0x74c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	4ac1      	ldr	r2, [pc, #772]	@ (8000d78 <main+0x754>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d800      	bhi.n	8000a78 <main+0x454>
 8000a76:	e261      	b.n	8000f3c <main+0x918>
			  {
				  Display_OFF();
 8000a78:	f001 f8fc 	bl	8001c74 <Display_OFF>
				  printf("GPIO 2 5 6 7 disabled\n\r");
 8000a7c:	4bbf      	ldr	r3, [pc, #764]	@ (8000d7c <main+0x758>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f003 feb8 	bl	80047f4 <iprintf>
				  HAL_GPIO_WritePin(SIGNAL_2_GPIO_Port, SIGNAL_2_Pin, GPIO_PIN_RESET);
 8000a84:	2390      	movs	r3, #144	@ 0x90
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f002 fa29 	bl	8002ee4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_RESET);
 8000a92:	2390      	movs	r3, #144	@ 0x90
 8000a94:	05db      	lsls	r3, r3, #23
 8000a96:	2200      	movs	r2, #0
 8000a98:	2110      	movs	r1, #16
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f002 fa22 	bl	8002ee4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_6_GPIO_Port, SIGNAL_6_Pin, GPIO_PIN_RESET);
 8000aa0:	2390      	movs	r3, #144	@ 0x90
 8000aa2:	05db      	lsls	r3, r3, #23
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2120      	movs	r1, #32
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f002 fa1b 	bl	8002ee4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_RESET);
 8000aae:	2390      	movs	r3, #144	@ 0x90
 8000ab0:	05db      	lsls	r3, r3, #23
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2140      	movs	r1, #64	@ 0x40
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f002 fa14 	bl	8002ee4 <HAL_GPIO_WritePin>
				  task_start_time = HAL_GetTick(); // Record the start time for the next state
 8000abc:	f001 fbe4 	bl	8002288 <HAL_GetTick>
 8000ac0:	0002      	movs	r2, r0
 8000ac2:	4bab      	ldr	r3, [pc, #684]	@ (8000d70 <main+0x74c>)
 8000ac4:	601a      	str	r2, [r3, #0]
				  state = 20;
 8000ac6:	4bab      	ldr	r3, [pc, #684]	@ (8000d74 <main+0x750>)
 8000ac8:	2214      	movs	r2, #20
 8000aca:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000acc:	e236      	b.n	8000f3c <main+0x918>

		  case 11:
			  if (!initial_display_done)
 8000ace:	4bac      	ldr	r3, [pc, #688]	@ (8000d80 <main+0x75c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10c      	bne.n	8000af0 <main+0x4cc>
			  {
				  Display_SC01();
 8000ad6:	f001 f881 	bl	8001bdc <Display_SC01>
				  task_start_time = HAL_GetTick();
 8000ada:	f001 fbd5 	bl	8002288 <HAL_GetTick>
 8000ade:	0002      	movs	r2, r0
 8000ae0:	4ba3      	ldr	r3, [pc, #652]	@ (8000d70 <main+0x74c>)
 8000ae2:	601a      	str	r2, [r3, #0]
				  initial_display_done = 1;
 8000ae4:	4ba6      	ldr	r3, [pc, #664]	@ (8000d80 <main+0x75c>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	701a      	strb	r2, [r3, #0]
				  countdown_seconds = 20;
 8000aea:	4b9f      	ldr	r3, [pc, #636]	@ (8000d68 <main+0x744>)
 8000aec:	2214      	movs	r2, #20
 8000aee:	601a      	str	r2, [r3, #0]
			  }
			  if (HAL_GetTick() - task_start_time >= 2000)
 8000af0:	f001 fbca 	bl	8002288 <HAL_GetTick>
 8000af4:	0002      	movs	r2, r0
 8000af6:	4b9e      	ldr	r3, [pc, #632]	@ (8000d70 <main+0x74c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	1ad2      	subs	r2, r2, r3
 8000afc:	23fa      	movs	r3, #250	@ 0xfa
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d200      	bcs.n	8000b06 <main+0x4e2>
 8000b04:	e21d      	b.n	8000f42 <main+0x91e>
			  {
				  state = 12;
 8000b06:	4b9b      	ldr	r3, [pc, #620]	@ (8000d74 <main+0x750>)
 8000b08:	220c      	movs	r2, #12
 8000b0a:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000b0c:	e219      	b.n	8000f42 <main+0x91e>

		  case 12:
			  if (HAL_GetTick() - task_start_time < 23000)
 8000b0e:	f001 fbbb 	bl	8002288 <HAL_GetTick>
 8000b12:	0002      	movs	r2, r0
 8000b14:	4b96      	ldr	r3, [pc, #600]	@ (8000d70 <main+0x74c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	4a9a      	ldr	r2, [pc, #616]	@ (8000d84 <main+0x760>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d802      	bhi.n	8000b26 <main+0x502>
			  {
				  TM1637_Countdown_20Sec();
 8000b20:	f000 ff26 	bl	8001970 <TM1637_Countdown_20Sec>
					  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_SET);
					  task_start_time = HAL_GetTick();
					  state = 13;
				  }
			  }
			  break;
 8000b24:	e210      	b.n	8000f48 <main+0x924>
				  if(countdown_seconds == 0)
 8000b26:	4b90      	ldr	r3, [pc, #576]	@ (8000d68 <main+0x744>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d000      	beq.n	8000b30 <main+0x50c>
 8000b2e:	e20b      	b.n	8000f48 <main+0x924>
					  Display_OFF();
 8000b30:	f001 f8a0 	bl	8001c74 <Display_OFF>
					  printf("GPIO 4 5 enabled\n\r");
 8000b34:	4b94      	ldr	r3, [pc, #592]	@ (8000d88 <main+0x764>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f003 fe5c 	bl	80047f4 <iprintf>
					  HAL_GPIO_WritePin(SIGNAL_4_GPIO_Port, SIGNAL_4_Pin, GPIO_PIN_SET);
 8000b3c:	2390      	movs	r3, #144	@ 0x90
 8000b3e:	05db      	lsls	r3, r3, #23
 8000b40:	2201      	movs	r2, #1
 8000b42:	2108      	movs	r1, #8
 8000b44:	0018      	movs	r0, r3
 8000b46:	f002 f9cd 	bl	8002ee4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_SET);
 8000b4a:	2390      	movs	r3, #144	@ 0x90
 8000b4c:	05db      	lsls	r3, r3, #23
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2110      	movs	r1, #16
 8000b52:	0018      	movs	r0, r3
 8000b54:	f002 f9c6 	bl	8002ee4 <HAL_GPIO_WritePin>
					  task_start_time = HAL_GetTick();
 8000b58:	f001 fb96 	bl	8002288 <HAL_GetTick>
 8000b5c:	0002      	movs	r2, r0
 8000b5e:	4b84      	ldr	r3, [pc, #528]	@ (8000d70 <main+0x74c>)
 8000b60:	601a      	str	r2, [r3, #0]
					  state = 13;
 8000b62:	4b84      	ldr	r3, [pc, #528]	@ (8000d74 <main+0x750>)
 8000b64:	220d      	movs	r2, #13
 8000b66:	701a      	strb	r2, [r3, #0]
			  break;
 8000b68:	e1ee      	b.n	8000f48 <main+0x924>

		  case 13:
			  if (HAL_GetTick() - task_start_time >= 30000)
 8000b6a:	f001 fb8d 	bl	8002288 <HAL_GetTick>
 8000b6e:	0002      	movs	r2, r0
 8000b70:	4b7f      	ldr	r3, [pc, #508]	@ (8000d70 <main+0x74c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	4a80      	ldr	r2, [pc, #512]	@ (8000d78 <main+0x754>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d800      	bhi.n	8000b7e <main+0x55a>
 8000b7c:	e1e7      	b.n	8000f4e <main+0x92a>
			  {
				  Display_OFF();
 8000b7e:	f001 f879 	bl	8001c74 <Display_OFF>
				  printf("GPIO 4 5 disabled\n\r");
 8000b82:	4b82      	ldr	r3, [pc, #520]	@ (8000d8c <main+0x768>)
 8000b84:	0018      	movs	r0, r3
 8000b86:	f003 fe35 	bl	80047f4 <iprintf>
				  HAL_GPIO_WritePin(SIGNAL_4_GPIO_Port, SIGNAL_4_Pin, GPIO_PIN_RESET);
 8000b8a:	2390      	movs	r3, #144	@ 0x90
 8000b8c:	05db      	lsls	r3, r3, #23
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2108      	movs	r1, #8
 8000b92:	0018      	movs	r0, r3
 8000b94:	f002 f9a6 	bl	8002ee4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_RESET);
 8000b98:	2390      	movs	r3, #144	@ 0x90
 8000b9a:	05db      	lsls	r3, r3, #23
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f002 f99f 	bl	8002ee4 <HAL_GPIO_WritePin>
				  task_start_time = HAL_GetTick(); // Record the start time for the next state
 8000ba6:	f001 fb6f 	bl	8002288 <HAL_GetTick>
 8000baa:	0002      	movs	r2, r0
 8000bac:	4b70      	ldr	r3, [pc, #448]	@ (8000d70 <main+0x74c>)
 8000bae:	601a      	str	r2, [r3, #0]
				  state = 20;
 8000bb0:	4b70      	ldr	r3, [pc, #448]	@ (8000d74 <main+0x750>)
 8000bb2:	2214      	movs	r2, #20
 8000bb4:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000bb6:	e1ca      	b.n	8000f4e <main+0x92a>

		  case 14:
			  if (!initial_display_done)
 8000bb8:	4b71      	ldr	r3, [pc, #452]	@ (8000d80 <main+0x75c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d10c      	bne.n	8000bda <main+0x5b6>
			  {
				  Display_SC02();
 8000bc0:	f001 f832 	bl	8001c28 <Display_SC02>
				  task_start_time = HAL_GetTick();
 8000bc4:	f001 fb60 	bl	8002288 <HAL_GetTick>
 8000bc8:	0002      	movs	r2, r0
 8000bca:	4b69      	ldr	r3, [pc, #420]	@ (8000d70 <main+0x74c>)
 8000bcc:	601a      	str	r2, [r3, #0]
				  initial_display_done = 1;
 8000bce:	4b6c      	ldr	r3, [pc, #432]	@ (8000d80 <main+0x75c>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	701a      	strb	r2, [r3, #0]
				  countdown_seconds = 20;
 8000bd4:	4b64      	ldr	r3, [pc, #400]	@ (8000d68 <main+0x744>)
 8000bd6:	2214      	movs	r2, #20
 8000bd8:	601a      	str	r2, [r3, #0]
			  }
			  if (HAL_GetTick() - task_start_time >= 2000)
 8000bda:	f001 fb55 	bl	8002288 <HAL_GetTick>
 8000bde:	0002      	movs	r2, r0
 8000be0:	4b63      	ldr	r3, [pc, #396]	@ (8000d70 <main+0x74c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	1ad2      	subs	r2, r2, r3
 8000be6:	23fa      	movs	r3, #250	@ 0xfa
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d200      	bcs.n	8000bf0 <main+0x5cc>
 8000bee:	e1b1      	b.n	8000f54 <main+0x930>
			  {
				  state = 15;
 8000bf0:	4b60      	ldr	r3, [pc, #384]	@ (8000d74 <main+0x750>)
 8000bf2:	220f      	movs	r2, #15
 8000bf4:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000bf6:	e1ad      	b.n	8000f54 <main+0x930>

		  case 15:
			  if (HAL_GetTick() - task_start_time < 23000)
 8000bf8:	f001 fb46 	bl	8002288 <HAL_GetTick>
 8000bfc:	0002      	movs	r2, r0
 8000bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8000d70 <main+0x74c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	4a5f      	ldr	r2, [pc, #380]	@ (8000d84 <main+0x760>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d802      	bhi.n	8000c10 <main+0x5ec>
			  {
				  TM1637_Countdown_20Sec();
 8000c0a:	f000 feb1 	bl	8001970 <TM1637_Countdown_20Sec>
					  HAL_GPIO_WritePin(SIGNAL_6_GPIO_Port, SIGNAL_6_Pin, GPIO_PIN_SET);
					  task_start_time = HAL_GetTick();
					  state = 16;
				  }
			  }
			  break;
 8000c0e:	e1a4      	b.n	8000f5a <main+0x936>
				  if(countdown_seconds == 0)
 8000c10:	4b55      	ldr	r3, [pc, #340]	@ (8000d68 <main+0x744>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d000      	beq.n	8000c1a <main+0x5f6>
 8000c18:	e19f      	b.n	8000f5a <main+0x936>
					  Display_OFF();
 8000c1a:	f001 f82b 	bl	8001c74 <Display_OFF>
					  printf("GPIO 5 6 enabled\n\r");
 8000c1e:	4b5c      	ldr	r3, [pc, #368]	@ (8000d90 <main+0x76c>)
 8000c20:	0018      	movs	r0, r3
 8000c22:	f003 fde7 	bl	80047f4 <iprintf>
					  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_SET);
 8000c26:	2390      	movs	r3, #144	@ 0x90
 8000c28:	05db      	lsls	r3, r3, #23
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2110      	movs	r1, #16
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f002 f958 	bl	8002ee4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SIGNAL_6_GPIO_Port, SIGNAL_6_Pin, GPIO_PIN_SET);
 8000c34:	2390      	movs	r3, #144	@ 0x90
 8000c36:	05db      	lsls	r3, r3, #23
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2120      	movs	r1, #32
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f002 f951 	bl	8002ee4 <HAL_GPIO_WritePin>
					  task_start_time = HAL_GetTick();
 8000c42:	f001 fb21 	bl	8002288 <HAL_GetTick>
 8000c46:	0002      	movs	r2, r0
 8000c48:	4b49      	ldr	r3, [pc, #292]	@ (8000d70 <main+0x74c>)
 8000c4a:	601a      	str	r2, [r3, #0]
					  state = 16;
 8000c4c:	4b49      	ldr	r3, [pc, #292]	@ (8000d74 <main+0x750>)
 8000c4e:	2210      	movs	r2, #16
 8000c50:	701a      	strb	r2, [r3, #0]
			  break;
 8000c52:	e182      	b.n	8000f5a <main+0x936>

		  case 16:
			  if (HAL_GetTick() - task_start_time >= 30000)
 8000c54:	f001 fb18 	bl	8002288 <HAL_GetTick>
 8000c58:	0002      	movs	r2, r0
 8000c5a:	4b45      	ldr	r3, [pc, #276]	@ (8000d70 <main+0x74c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	4a45      	ldr	r2, [pc, #276]	@ (8000d78 <main+0x754>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d800      	bhi.n	8000c68 <main+0x644>
 8000c66:	e17b      	b.n	8000f60 <main+0x93c>
			  {
				  Display_OFF();
 8000c68:	f001 f804 	bl	8001c74 <Display_OFF>
				  printf("GPIO 5 6 disabled\n\r");
 8000c6c:	4b49      	ldr	r3, [pc, #292]	@ (8000d94 <main+0x770>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f003 fdc0 	bl	80047f4 <iprintf>
				  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_RESET);
 8000c74:	2390      	movs	r3, #144	@ 0x90
 8000c76:	05db      	lsls	r3, r3, #23
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f002 f931 	bl	8002ee4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_6_GPIO_Port, SIGNAL_6_Pin, GPIO_PIN_RESET);
 8000c82:	2390      	movs	r3, #144	@ 0x90
 8000c84:	05db      	lsls	r3, r3, #23
 8000c86:	2200      	movs	r2, #0
 8000c88:	2120      	movs	r1, #32
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f002 f92a 	bl	8002ee4 <HAL_GPIO_WritePin>
				  task_start_time = HAL_GetTick(); // Record the start time for the next state
 8000c90:	f001 fafa 	bl	8002288 <HAL_GetTick>
 8000c94:	0002      	movs	r2, r0
 8000c96:	4b36      	ldr	r3, [pc, #216]	@ (8000d70 <main+0x74c>)
 8000c98:	601a      	str	r2, [r3, #0]
				  state = 20;
 8000c9a:	4b36      	ldr	r3, [pc, #216]	@ (8000d74 <main+0x750>)
 8000c9c:	2214      	movs	r2, #20
 8000c9e:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000ca0:	e15e      	b.n	8000f60 <main+0x93c>

		  case 17:
			  if (!initial_display_done)
 8000ca2:	4b37      	ldr	r3, [pc, #220]	@ (8000d80 <main+0x75c>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10c      	bne.n	8000cc4 <main+0x6a0>
			  {
				  TM1637_DisplayOFF();
 8000caa:	f001 f83d 	bl	8001d28 <TM1637_DisplayOFF>
				  task_start_time = HAL_GetTick();
 8000cae:	f001 faeb 	bl	8002288 <HAL_GetTick>
 8000cb2:	0002      	movs	r2, r0
 8000cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8000d70 <main+0x74c>)
 8000cb6:	601a      	str	r2, [r3, #0]
				  initial_display_done = 1;
 8000cb8:	4b31      	ldr	r3, [pc, #196]	@ (8000d80 <main+0x75c>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
				  countdown_seconds = 20;
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000d68 <main+0x744>)
 8000cc0:	2214      	movs	r2, #20
 8000cc2:	601a      	str	r2, [r3, #0]
			  }
			  if (HAL_GetTick() - task_start_time >= 2000)
 8000cc4:	f001 fae0 	bl	8002288 <HAL_GetTick>
 8000cc8:	0002      	movs	r2, r0
 8000cca:	4b29      	ldr	r3, [pc, #164]	@ (8000d70 <main+0x74c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	1ad2      	subs	r2, r2, r3
 8000cd0:	23fa      	movs	r3, #250	@ 0xfa
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d200      	bcs.n	8000cda <main+0x6b6>
 8000cd8:	e145      	b.n	8000f66 <main+0x942>
			  {
				  state = 18;
 8000cda:	4b26      	ldr	r3, [pc, #152]	@ (8000d74 <main+0x750>)
 8000cdc:	2212      	movs	r2, #18
 8000cde:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000ce0:	e141      	b.n	8000f66 <main+0x942>

		  case 18:
			  if (HAL_GetTick() - task_start_time < 23000)
 8000ce2:	f001 fad1 	bl	8002288 <HAL_GetTick>
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	4b21      	ldr	r3, [pc, #132]	@ (8000d70 <main+0x74c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	4a25      	ldr	r2, [pc, #148]	@ (8000d84 <main+0x760>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d802      	bhi.n	8000cfa <main+0x6d6>
			  {
				  TM1637_Countdown_20Sec();
 8000cf4:	f000 fe3c 	bl	8001970 <TM1637_Countdown_20Sec>
					  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_SET);
					  task_start_time = HAL_GetTick();
					  state = 19;
				  }
			  }
			  break;
 8000cf8:	e138      	b.n	8000f6c <main+0x948>
				  if(countdown_seconds == 0)
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <main+0x744>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d000      	beq.n	8000d04 <main+0x6e0>
 8000d02:	e133      	b.n	8000f6c <main+0x948>
					  Display_OFF();
 8000d04:	f000 ffb6 	bl	8001c74 <Display_OFF>
					  printf("GPIO 2 3 4 5 7 enabled\n\r");
 8000d08:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <main+0x774>)
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f003 fd72 	bl	80047f4 <iprintf>
					  HAL_GPIO_WritePin(SIGNAL_2_GPIO_Port, SIGNAL_2_Pin, GPIO_PIN_SET);
 8000d10:	2390      	movs	r3, #144	@ 0x90
 8000d12:	05db      	lsls	r3, r3, #23
 8000d14:	2201      	movs	r2, #1
 8000d16:	2102      	movs	r1, #2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f002 f8e3 	bl	8002ee4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SIGNAL_3_GPIO_Port, SIGNAL_3_Pin, GPIO_PIN_SET);
 8000d1e:	2390      	movs	r3, #144	@ 0x90
 8000d20:	05db      	lsls	r3, r3, #23
 8000d22:	2201      	movs	r2, #1
 8000d24:	2104      	movs	r1, #4
 8000d26:	0018      	movs	r0, r3
 8000d28:	f002 f8dc 	bl	8002ee4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SIGNAL_4_GPIO_Port, SIGNAL_4_Pin, GPIO_PIN_SET);
 8000d2c:	2390      	movs	r3, #144	@ 0x90
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	2201      	movs	r2, #1
 8000d32:	2108      	movs	r1, #8
 8000d34:	0018      	movs	r0, r3
 8000d36:	f002 f8d5 	bl	8002ee4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_SET);
 8000d3a:	2390      	movs	r3, #144	@ 0x90
 8000d3c:	05db      	lsls	r3, r3, #23
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2110      	movs	r1, #16
 8000d42:	0018      	movs	r0, r3
 8000d44:	f002 f8ce 	bl	8002ee4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_SET);
 8000d48:	2390      	movs	r3, #144	@ 0x90
 8000d4a:	05db      	lsls	r3, r3, #23
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2140      	movs	r1, #64	@ 0x40
 8000d50:	0018      	movs	r0, r3
 8000d52:	f002 f8c7 	bl	8002ee4 <HAL_GPIO_WritePin>
					  task_start_time = HAL_GetTick();
 8000d56:	f001 fa97 	bl	8002288 <HAL_GetTick>
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <main+0x74c>)
 8000d5e:	601a      	str	r2, [r3, #0]
					  state = 19;
 8000d60:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <main+0x750>)
 8000d62:	2213      	movs	r2, #19
 8000d64:	701a      	strb	r2, [r3, #0]
			  break;
 8000d66:	e101      	b.n	8000f6c <main+0x948>
 8000d68:	200001c4 	.word	0x200001c4
 8000d6c:	080056b0 	.word	0x080056b0
 8000d70:	200001c0 	.word	0x200001c0
 8000d74:	200001bd 	.word	0x200001bd
 8000d78:	0000752f 	.word	0x0000752f
 8000d7c:	080056c8 	.word	0x080056c8
 8000d80:	200001ac 	.word	0x200001ac
 8000d84:	000059d7 	.word	0x000059d7
 8000d88:	080056e0 	.word	0x080056e0
 8000d8c:	080056f4 	.word	0x080056f4
 8000d90:	08005708 	.word	0x08005708
 8000d94:	0800571c 	.word	0x0800571c
 8000d98:	08005730 	.word	0x08005730

		  case 19:
			  if (HAL_GetTick() - task_start_time >= 30000)
 8000d9c:	f001 fa74 	bl	8002288 <HAL_GetTick>
 8000da0:	0002      	movs	r2, r0
 8000da2:	4b78      	ldr	r3, [pc, #480]	@ (8000f84 <main+0x960>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	4a77      	ldr	r2, [pc, #476]	@ (8000f88 <main+0x964>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d800      	bhi.n	8000db0 <main+0x78c>
 8000dae:	e0e0      	b.n	8000f72 <main+0x94e>
			  {
				  Display_OFF();
 8000db0:	f000 ff60 	bl	8001c74 <Display_OFF>
				  printf("GPIO 2 3 4 5 7 disabled\n\r");
 8000db4:	4b75      	ldr	r3, [pc, #468]	@ (8000f8c <main+0x968>)
 8000db6:	0018      	movs	r0, r3
 8000db8:	f003 fd1c 	bl	80047f4 <iprintf>
				  HAL_GPIO_WritePin(SIGNAL_2_GPIO_Port, SIGNAL_2_Pin, GPIO_PIN_RESET);
 8000dbc:	2390      	movs	r3, #144	@ 0x90
 8000dbe:	05db      	lsls	r3, r3, #23
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f002 f88d 	bl	8002ee4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_3_GPIO_Port, SIGNAL_3_Pin, GPIO_PIN_RESET);
 8000dca:	2390      	movs	r3, #144	@ 0x90
 8000dcc:	05db      	lsls	r3, r3, #23
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f002 f886 	bl	8002ee4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_4_GPIO_Port, SIGNAL_4_Pin, GPIO_PIN_RESET);
 8000dd8:	2390      	movs	r3, #144	@ 0x90
 8000dda:	05db      	lsls	r3, r3, #23
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2108      	movs	r1, #8
 8000de0:	0018      	movs	r0, r3
 8000de2:	f002 f87f 	bl	8002ee4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_RESET);
 8000de6:	2390      	movs	r3, #144	@ 0x90
 8000de8:	05db      	lsls	r3, r3, #23
 8000dea:	2200      	movs	r2, #0
 8000dec:	2110      	movs	r1, #16
 8000dee:	0018      	movs	r0, r3
 8000df0:	f002 f878 	bl	8002ee4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_RESET);
 8000df4:	2390      	movs	r3, #144	@ 0x90
 8000df6:	05db      	lsls	r3, r3, #23
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2140      	movs	r1, #64	@ 0x40
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f002 f871 	bl	8002ee4 <HAL_GPIO_WritePin>
				  printf("return to IDLE\n\r");
 8000e02:	4b63      	ldr	r3, [pc, #396]	@ (8000f90 <main+0x96c>)
 8000e04:	0018      	movs	r0, r3
 8000e06:	f003 fcf5 	bl	80047f4 <iprintf>
				  state = 0;
 8000e0a:	4b62      	ldr	r3, [pc, #392]	@ (8000f94 <main+0x970>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
				  coin_pulse = 0;
 8000e10:	4b61      	ldr	r3, [pc, #388]	@ (8000f98 <main+0x974>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
				  initial_display_done = 0;
 8000e16:	4b61      	ldr	r3, [pc, #388]	@ (8000f9c <main+0x978>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
				  HAL_Delay(500);
 8000e1c:	23fa      	movs	r3, #250	@ 0xfa
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	0018      	movs	r0, r3
 8000e22:	f001 fa3b 	bl	800229c <HAL_Delay>

				HAL_GPIO_WritePin(CUTOFF_RELAY_GPIO_Port, CUTOFF_RELAY_Pin, GPIO_PIN_RESET);
 8000e26:	2380      	movs	r3, #128	@ 0x80
 8000e28:	0159      	lsls	r1, r3, #5
 8000e2a:	2390      	movs	r3, #144	@ 0x90
 8000e2c:	05db      	lsls	r3, r3, #23
 8000e2e:	2200      	movs	r2, #0
 8000e30:	0018      	movs	r0, r3
 8000e32:	f002 f857 	bl	8002ee4 <HAL_GPIO_WritePin>
				printf("Coin acceptor Power ON\n\r");
 8000e36:	4b5a      	ldr	r3, [pc, #360]	@ (8000fa0 <main+0x97c>)
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f003 fcdb 	bl	80047f4 <iprintf>
			  }
			  break;
 8000e3e:	e098      	b.n	8000f72 <main+0x94e>

		  case 20:
			  printf("GPIO A & B enabled\n\r");
 8000e40:	4b58      	ldr	r3, [pc, #352]	@ (8000fa4 <main+0x980>)
 8000e42:	0018      	movs	r0, r3
 8000e44:	f003 fcd6 	bl	80047f4 <iprintf>
			  HAL_GPIO_WritePin(SIGNAL_A_GPIO_Port, SIGNAL_A_Pin, GPIO_PIN_SET);
 8000e48:	4b57      	ldr	r3, [pc, #348]	@ (8000fa8 <main+0x984>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f002 f848 	bl	8002ee4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SIGNAL_B_GPIO_Port, SIGNAL_B_Pin, GPIO_PIN_SET);
 8000e54:	2380      	movs	r3, #128	@ 0x80
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	4853      	ldr	r0, [pc, #332]	@ (8000fa8 <main+0x984>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	f002 f841 	bl	8002ee4 <HAL_GPIO_WritePin>
			  if (HAL_GetTick() - task_start_time >= 5000)
 8000e62:	f001 fa11 	bl	8002288 <HAL_GetTick>
 8000e66:	0002      	movs	r2, r0
 8000e68:	4b46      	ldr	r3, [pc, #280]	@ (8000f84 <main+0x960>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	4a4f      	ldr	r2, [pc, #316]	@ (8000fac <main+0x988>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d800      	bhi.n	8000e76 <main+0x852>
 8000e74:	e080      	b.n	8000f78 <main+0x954>
			  {
				  //Display_OFF();
				  printf("GPIO A & B disabled\n\r");
 8000e76:	4b4e      	ldr	r3, [pc, #312]	@ (8000fb0 <main+0x98c>)
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f003 fcbb 	bl	80047f4 <iprintf>
				  HAL_GPIO_WritePin(SIGNAL_A_GPIO_Port, SIGNAL_A_Pin, GPIO_PIN_RESET);
 8000e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8000fa8 <main+0x984>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	2102      	movs	r1, #2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f002 f82d 	bl	8002ee4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_B_GPIO_Port, SIGNAL_B_Pin, GPIO_PIN_RESET);
 8000e8a:	2380      	movs	r3, #128	@ 0x80
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	4846      	ldr	r0, [pc, #280]	@ (8000fa8 <main+0x984>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	0019      	movs	r1, r3
 8000e94:	f002 f826 	bl	8002ee4 <HAL_GPIO_WritePin>
				  task_start_time = HAL_GetTick();
 8000e98:	f001 f9f6 	bl	8002288 <HAL_GetTick>
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	4b39      	ldr	r3, [pc, #228]	@ (8000f84 <main+0x960>)
 8000ea0:	601a      	str	r2, [r3, #0]
				  state = 21;
 8000ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8000f94 <main+0x970>)
 8000ea4:	2215      	movs	r2, #21
 8000ea6:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000ea8:	e066      	b.n	8000f78 <main+0x954>

		  case 21:
			  Display_OFF();
 8000eaa:	f000 fee3 	bl	8001c74 <Display_OFF>
			  if (HAL_GetTick() - task_start_time >= 90000)
 8000eae:	f001 f9eb 	bl	8002288 <HAL_GetTick>
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	4b33      	ldr	r3, [pc, #204]	@ (8000f84 <main+0x960>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	4a3e      	ldr	r2, [pc, #248]	@ (8000fb4 <main+0x990>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d95e      	bls.n	8000f7e <main+0x95a>
			  {
				  printf("return to IDLE\n\r");
 8000ec0:	4b33      	ldr	r3, [pc, #204]	@ (8000f90 <main+0x96c>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f003 fc96 	bl	80047f4 <iprintf>
				  state = 0;
 8000ec8:	4b32      	ldr	r3, [pc, #200]	@ (8000f94 <main+0x970>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
				  coin_pulse = 0;
 8000ece:	4b32      	ldr	r3, [pc, #200]	@ (8000f98 <main+0x974>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
				  initial_display_done = 0;
 8000ed4:	4b31      	ldr	r3, [pc, #196]	@ (8000f9c <main+0x978>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
				  HAL_Delay(500);
 8000eda:	23fa      	movs	r3, #250	@ 0xfa
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f001 f9dc 	bl	800229c <HAL_Delay>

				HAL_GPIO_WritePin(CUTOFF_RELAY_GPIO_Port, CUTOFF_RELAY_Pin, GPIO_PIN_RESET);
 8000ee4:	2380      	movs	r3, #128	@ 0x80
 8000ee6:	0159      	lsls	r1, r3, #5
 8000ee8:	2390      	movs	r3, #144	@ 0x90
 8000eea:	05db      	lsls	r3, r3, #23
 8000eec:	2200      	movs	r2, #0
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f001 fff8 	bl	8002ee4 <HAL_GPIO_WritePin>
				printf("Coin acceptor Power ON\n\r");
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa0 <main+0x97c>)
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f003 fc7c 	bl	80047f4 <iprintf>
			  }
			  break;
 8000efc:	e03f      	b.n	8000f7e <main+0x95a>

		  default:
			  state = 0;
 8000efe:	4b25      	ldr	r3, [pc, #148]	@ (8000f94 <main+0x970>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
			  break;
 8000f04:	e03c      	b.n	8000f80 <main+0x95c>
			  break;
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	f7ff fbaf 	bl	800066a <main+0x46>
			  break;
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	f7ff fbac 	bl	800066a <main+0x46>
			  break;
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	f7ff fba9 	bl	800066a <main+0x46>
			  break;
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	f7ff fba6 	bl	800066a <main+0x46>
			  break;
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	f7ff fba3 	bl	800066a <main+0x46>
			  break;
 8000f24:	46c0      	nop			@ (mov r8, r8)
 8000f26:	f7ff fba0 	bl	800066a <main+0x46>
			  break;
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	f7ff fb9d 	bl	800066a <main+0x46>
			  break;
 8000f30:	46c0      	nop			@ (mov r8, r8)
 8000f32:	f7ff fb9a 	bl	800066a <main+0x46>
			  break;
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	f7ff fb97 	bl	800066a <main+0x46>
			  break;
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	f7ff fb94 	bl	800066a <main+0x46>
			  break;
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	f7ff fb91 	bl	800066a <main+0x46>
			  break;
 8000f48:	46c0      	nop			@ (mov r8, r8)
 8000f4a:	f7ff fb8e 	bl	800066a <main+0x46>
			  break;
 8000f4e:	46c0      	nop			@ (mov r8, r8)
 8000f50:	f7ff fb8b 	bl	800066a <main+0x46>
			  break;
 8000f54:	46c0      	nop			@ (mov r8, r8)
 8000f56:	f7ff fb88 	bl	800066a <main+0x46>
			  break;
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	f7ff fb85 	bl	800066a <main+0x46>
			  break;
 8000f60:	46c0      	nop			@ (mov r8, r8)
 8000f62:	f7ff fb82 	bl	800066a <main+0x46>
			  break;
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	f7ff fb7f 	bl	800066a <main+0x46>
			  break;
 8000f6c:	46c0      	nop			@ (mov r8, r8)
 8000f6e:	f7ff fb7c 	bl	800066a <main+0x46>
			  break;
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	f7ff fb79 	bl	800066a <main+0x46>
			  break;
 8000f78:	46c0      	nop			@ (mov r8, r8)
 8000f7a:	f7ff fb76 	bl	800066a <main+0x46>
			  break;
 8000f7e:	46c0      	nop			@ (mov r8, r8)
	  switch (state)
 8000f80:	f7ff fb73 	bl	800066a <main+0x46>
 8000f84:	200001c0 	.word	0x200001c0
 8000f88:	0000752f 	.word	0x0000752f
 8000f8c:	0800574c 	.word	0x0800574c
 8000f90:	08005768 	.word	0x08005768
 8000f94:	200001bd 	.word	0x200001bd
 8000f98:	200001bc 	.word	0x200001bc
 8000f9c:	200001ac 	.word	0x200001ac
 8000fa0:	0800577c 	.word	0x0800577c
 8000fa4:	08005798 	.word	0x08005798
 8000fa8:	48000400 	.word	0x48000400
 8000fac:	00001387 	.word	0x00001387
 8000fb0:	080057b0 	.word	0x080057b0
 8000fb4:	00015f8f 	.word	0x00015f8f

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b095      	sub	sp, #84	@ 0x54
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	2420      	movs	r4, #32
 8000fc0:	193b      	adds	r3, r7, r4
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	2330      	movs	r3, #48	@ 0x30
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	2100      	movs	r1, #0
 8000fca:	f003 fd6f 	bl	8004aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fce:	2310      	movs	r3, #16
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	2100      	movs	r1, #0
 8000fda:	f003 fd67 	bl	8004aac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fde:	003b      	movs	r3, r7
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	001a      	movs	r2, r3
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	f003 fd60 	bl	8004aac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000fec:	0021      	movs	r1, r4
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	2212      	movs	r2, #18
 8000ff2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2210      	movs	r2, #16
 8001004:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001006:	187b      	adds	r3, r7, r1
 8001008:	2210      	movs	r2, #16
 800100a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2202      	movs	r2, #2
 8001010:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2200      	movs	r2, #0
 8001016:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001018:	187b      	adds	r3, r7, r1
 800101a:	22a0      	movs	r2, #160	@ 0xa0
 800101c:	0392      	lsls	r2, r2, #14
 800101e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2200      	movs	r2, #0
 8001024:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001026:	187b      	adds	r3, r7, r1
 8001028:	0018      	movs	r0, r3
 800102a:	f001 ff95 	bl	8002f58 <HAL_RCC_OscConfig>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001032:	f000 feeb 	bl	8001e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	2110      	movs	r1, #16
 8001038:	187b      	adds	r3, r7, r1
 800103a:	2207      	movs	r2, #7
 800103c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103e:	187b      	adds	r3, r7, r1
 8001040:	2202      	movs	r2, #2
 8001042:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	187b      	adds	r3, r7, r1
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2101      	movs	r1, #1
 8001054:	0018      	movs	r0, r3
 8001056:	f002 fa99 	bl	800358c <HAL_RCC_ClockConfig>
 800105a:	1e03      	subs	r3, r0, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800105e:	f000 fed5 	bl	8001e0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001062:	003b      	movs	r3, r7
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001068:	003b      	movs	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800106e:	003b      	movs	r3, r7
 8001070:	0018      	movs	r0, r3
 8001072:	f002 fbcf 	bl	8003814 <HAL_RCCEx_PeriphCLKConfig>
 8001076:	1e03      	subs	r3, r0, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800107a:	f000 fec7 	bl	8001e0c <Error_Handler>
  }
}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	46bd      	mov	sp, r7
 8001082:	b015      	add	sp, #84	@ 0x54
 8001084:	bd90      	pop	{r4, r7, pc}
	...

08001088 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	0018      	movs	r0, r3
 8001092:	230c      	movs	r3, #12
 8001094:	001a      	movs	r2, r3
 8001096:	2100      	movs	r1, #0
 8001098:	f003 fd08 	bl	8004aac <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800109c:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <MX_ADC_Init+0xb0>)
 800109e:	4a27      	ldr	r2, [pc, #156]	@ (800113c <MX_ADC_Init+0xb4>)
 80010a0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010a2:	4b25      	ldr	r3, [pc, #148]	@ (8001138 <MX_ADC_Init+0xb0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010a8:	4b23      	ldr	r3, [pc, #140]	@ (8001138 <MX_ADC_Init+0xb0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ae:	4b22      	ldr	r3, [pc, #136]	@ (8001138 <MX_ADC_Init+0xb0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80010b4:	4b20      	ldr	r3, [pc, #128]	@ (8001138 <MX_ADC_Init+0xb0>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <MX_ADC_Init+0xb0>)
 80010bc:	2204      	movs	r2, #4
 80010be:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80010c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <MX_ADC_Init+0xb0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001138 <MX_ADC_Init+0xb0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <MX_ADC_Init+0xb0>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <MX_ADC_Init+0xb0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d8:	4b17      	ldr	r3, [pc, #92]	@ (8001138 <MX_ADC_Init+0xb0>)
 80010da:	22c2      	movs	r2, #194	@ 0xc2
 80010dc:	32ff      	adds	r2, #255	@ 0xff
 80010de:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010e0:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <MX_ADC_Init+0xb0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80010e6:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <MX_ADC_Init+0xb0>)
 80010e8:	2224      	movs	r2, #36	@ 0x24
 80010ea:	2100      	movs	r1, #0
 80010ec:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ee:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <MX_ADC_Init+0xb0>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80010f4:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <MX_ADC_Init+0xb0>)
 80010f6:	0018      	movs	r0, r3
 80010f8:	f001 f8f4 	bl	80022e4 <HAL_ADC_Init>
 80010fc:	1e03      	subs	r3, r0, #0
 80010fe:	d001      	beq.n	8001104 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001100:	f000 fe84 	bl	8001e0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2208      	movs	r2, #8
 8001108:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2280      	movs	r2, #128	@ 0x80
 800110e:	0152      	lsls	r2, r2, #5
 8001110:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2280      	movs	r2, #128	@ 0x80
 8001116:	0552      	lsls	r2, r2, #21
 8001118:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800111a:	1d3a      	adds	r2, r7, #4
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <MX_ADC_Init+0xb0>)
 800111e:	0011      	movs	r1, r2
 8001120:	0018      	movs	r0, r3
 8001122:	f001 fb17 	bl	8002754 <HAL_ADC_ConfigChannel>
 8001126:	1e03      	subs	r3, r0, #0
 8001128:	d001      	beq.n	800112e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800112a:	f000 fe6f 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b004      	add	sp, #16
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	2000009c 	.word	0x2000009c
 800113c:	40012400 	.word	0x40012400

08001140 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <MX_TIM6_Init+0x38>)
 8001146:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <MX_TIM6_Init+0x3c>)
 8001148:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47999 - 1;
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <MX_TIM6_Init+0x38>)
 800114c:	4a0c      	ldr	r2, [pc, #48]	@ (8001180 <MX_TIM6_Init+0x40>)
 800114e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_TIM6_Init+0x38>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <MX_TIM6_Init+0x38>)
 8001158:	220a      	movs	r2, #10
 800115a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <MX_TIM6_Init+0x38>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001162:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <MX_TIM6_Init+0x38>)
 8001164:	0018      	movs	r0, r3
 8001166:	f002 fc23 	bl	80039b0 <HAL_TIM_Base_Init>
 800116a:	1e03      	subs	r3, r0, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 800116e:	f000 fe4d 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200000dc 	.word	0x200000dc
 800117c:	40001000 	.word	0x40001000
 8001180:	0000bb7e 	.word	0x0000bb7e

08001184 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 800118a:	4a15      	ldr	r2, [pc, #84]	@ (80011e0 <MX_USART1_UART_Init+0x5c>)
 800118c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800118e:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 8001190:	22e1      	movs	r2, #225	@ 0xe1
 8001192:	0252      	lsls	r2, r2, #9
 8001194:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011c6:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <MX_USART1_UART_Init+0x58>)
 80011c8:	0018      	movs	r0, r3
 80011ca:	f002 fdeb 	bl	8003da4 <HAL_UART_Init>
 80011ce:	1e03      	subs	r3, r0, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011d2:	f000 fe1b 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000124 	.word	0x20000124
 80011e0:	40013800 	.word	0x40013800

080011e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b089      	sub	sp, #36	@ 0x24
 80011e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	240c      	movs	r4, #12
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	0018      	movs	r0, r3
 80011f0:	2314      	movs	r3, #20
 80011f2:	001a      	movs	r2, r3
 80011f4:	2100      	movs	r1, #0
 80011f6:	f003 fc59 	bl	8004aac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b40      	ldr	r3, [pc, #256]	@ (80012fc <MX_GPIO_Init+0x118>)
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	4b3f      	ldr	r3, [pc, #252]	@ (80012fc <MX_GPIO_Init+0x118>)
 8001200:	2180      	movs	r1, #128	@ 0x80
 8001202:	0289      	lsls	r1, r1, #10
 8001204:	430a      	orrs	r2, r1
 8001206:	615a      	str	r2, [r3, #20]
 8001208:	4b3c      	ldr	r3, [pc, #240]	@ (80012fc <MX_GPIO_Init+0x118>)
 800120a:	695a      	ldr	r2, [r3, #20]
 800120c:	2380      	movs	r3, #128	@ 0x80
 800120e:	029b      	lsls	r3, r3, #10
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	4b39      	ldr	r3, [pc, #228]	@ (80012fc <MX_GPIO_Init+0x118>)
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	4b38      	ldr	r3, [pc, #224]	@ (80012fc <MX_GPIO_Init+0x118>)
 800121c:	2180      	movs	r1, #128	@ 0x80
 800121e:	02c9      	lsls	r1, r1, #11
 8001220:	430a      	orrs	r2, r1
 8001222:	615a      	str	r2, [r3, #20]
 8001224:	4b35      	ldr	r3, [pc, #212]	@ (80012fc <MX_GPIO_Init+0x118>)
 8001226:	695a      	ldr	r2, [r3, #20]
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	02db      	lsls	r3, r3, #11
 800122c:	4013      	ands	r3, r2
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIGNAL_1_Pin|SIGNAL_2_Pin|SIGNAL_3_Pin|SIGNAL_4_Pin
 8001232:	4933      	ldr	r1, [pc, #204]	@ (8001300 <MX_GPIO_Init+0x11c>)
 8001234:	2390      	movs	r3, #144	@ 0x90
 8001236:	05db      	lsls	r3, r3, #23
 8001238:	2200      	movs	r2, #0
 800123a:	0018      	movs	r0, r3
 800123c:	f001 fe52 	bl	8002ee4 <HAL_GPIO_WritePin>
                          |SIGNAL_5_Pin|SIGNAL_6_Pin|SIGNAL_7_Pin|SIGNAL_8_Pin
                          |CUTOFF_RELAY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIGNAL_A_Pin|SIGNAL_B_Pin|REL_SIG_1_Pin|CLK_Pin
 8001240:	4930      	ldr	r1, [pc, #192]	@ (8001304 <MX_GPIO_Init+0x120>)
 8001242:	4b31      	ldr	r3, [pc, #196]	@ (8001308 <MX_GPIO_Init+0x124>)
 8001244:	2200      	movs	r2, #0
 8001246:	0018      	movs	r0, r3
 8001248:	f001 fe4c 	bl	8002ee4 <HAL_GPIO_WritePin>
                          |DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SIGNAL_1_Pin SIGNAL_2_Pin SIGNAL_3_Pin SIGNAL_4_Pin
                           SIGNAL_5_Pin SIGNAL_6_Pin SIGNAL_7_Pin SIGNAL_8_Pin
                           CUTOFF_RELAY_Pin */
  GPIO_InitStruct.Pin = SIGNAL_1_Pin|SIGNAL_2_Pin|SIGNAL_3_Pin|SIGNAL_4_Pin
 800124c:	193b      	adds	r3, r7, r4
 800124e:	4a2c      	ldr	r2, [pc, #176]	@ (8001300 <MX_GPIO_Init+0x11c>)
 8001250:	601a      	str	r2, [r3, #0]
                          |SIGNAL_5_Pin|SIGNAL_6_Pin|SIGNAL_7_Pin|SIGNAL_8_Pin
                          |CUTOFF_RELAY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	193b      	adds	r3, r7, r4
 8001254:	2201      	movs	r2, #1
 8001256:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	193b      	adds	r3, r7, r4
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	193b      	adds	r3, r7, r4
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	193a      	adds	r2, r7, r4
 8001266:	2390      	movs	r3, #144	@ 0x90
 8001268:	05db      	lsls	r3, r3, #23
 800126a:	0011      	movs	r1, r2
 800126c:	0018      	movs	r0, r3
 800126e:	f001 fcc9 	bl	8002c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGNAL_A_Pin SIGNAL_B_Pin REL_SIG_1_Pin */
  GPIO_InitStruct.Pin = SIGNAL_A_Pin|SIGNAL_B_Pin|REL_SIG_1_Pin;
 8001272:	193b      	adds	r3, r7, r4
 8001274:	4a25      	ldr	r2, [pc, #148]	@ (800130c <MX_GPIO_Init+0x128>)
 8001276:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	193b      	adds	r3, r7, r4
 800127a:	2201      	movs	r2, #1
 800127c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	193b      	adds	r3, r7, r4
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	193b      	adds	r3, r7, r4
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	193b      	adds	r3, r7, r4
 800128c:	4a1e      	ldr	r2, [pc, #120]	@ (8001308 <MX_GPIO_Init+0x124>)
 800128e:	0019      	movs	r1, r3
 8001290:	0010      	movs	r0, r2
 8001292:	f001 fcb7 	bl	8002c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : COIN_Pin */
  GPIO_InitStruct.Pin = COIN_Pin;
 8001296:	0021      	movs	r1, r4
 8001298:	187b      	adds	r3, r7, r1
 800129a:	2280      	movs	r2, #128	@ 0x80
 800129c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	2288      	movs	r2, #136	@ 0x88
 80012a2:	0352      	lsls	r2, r2, #13
 80012a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2201      	movs	r2, #1
 80012aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(COIN_GPIO_Port, &GPIO_InitStruct);
 80012ac:	000c      	movs	r4, r1
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	4a15      	ldr	r2, [pc, #84]	@ (8001308 <MX_GPIO_Init+0x124>)
 80012b2:	0019      	movs	r1, r3
 80012b4:	0010      	movs	r0, r2
 80012b6:	f001 fca5 	bl	8002c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DATA_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin;
 80012ba:	0021      	movs	r1, r4
 80012bc:	187b      	adds	r3, r7, r1
 80012be:	22c0      	movs	r2, #192	@ 0xc0
 80012c0:	0092      	lsls	r2, r2, #2
 80012c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	2201      	movs	r2, #1
 80012c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	2203      	movs	r2, #3
 80012d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d6:	187b      	adds	r3, r7, r1
 80012d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001308 <MX_GPIO_Init+0x124>)
 80012da:	0019      	movs	r1, r3
 80012dc:	0010      	movs	r0, r2
 80012de:	f001 fc91 	bl	8002c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2007      	movs	r0, #7
 80012e8:	f001 fc5a 	bl	8002ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80012ec:	2007      	movs	r0, #7
 80012ee:	f001 fc6c 	bl	8002bca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f2:	46c0      	nop			@ (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b009      	add	sp, #36	@ 0x24
 80012f8:	bd90      	pop	{r4, r7, pc}
 80012fa:	46c0      	nop			@ (mov r8, r8)
 80012fc:	40021000 	.word	0x40021000
 8001300:	000010ff 	.word	0x000010ff
 8001304:	00000f02 	.word	0x00000f02
 8001308:	48000400 	.word	0x48000400
 800130c:	00000c02 	.word	0x00000c02

08001310 <Relay_off_time>:

/* USER CODE BEGIN 4 */

void Relay_off_time(uint16_t potvalue)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	0002      	movs	r2, r0
 8001318:	1dbb      	adds	r3, r7, #6
 800131a:	801a      	strh	r2, [r3, #0]
	static uint32_t relay_start_time = 0;  // Static to retain value across function calls

	if (relay_start_time == 0)
 800131c:	4bcf      	ldr	r3, [pc, #828]	@ (800165c <Relay_off_time+0x34c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d104      	bne.n	800132e <Relay_off_time+0x1e>
	{
		relay_start_time = HAL_GetTick();  // Set the time only once
 8001324:	f000 ffb0 	bl	8002288 <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	4bcc      	ldr	r3, [pc, #816]	@ (800165c <Relay_off_time+0x34c>)
 800132c:	601a      	str	r2, [r3, #0]
	}
	 if(potvalue <= 100)
 800132e:	1dbb      	adds	r3, r7, #6
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	2b64      	cmp	r3, #100	@ 0x64
 8001334:	d82f      	bhi.n	8001396 <Relay_off_time+0x86>
	  {
		  if (HAL_GetTick() - relay_start_time >= 15000)
 8001336:	f000 ffa7 	bl	8002288 <HAL_GetTick>
 800133a:	0002      	movs	r2, r0
 800133c:	4bc7      	ldr	r3, [pc, #796]	@ (800165c <Relay_off_time+0x34c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	4ac7      	ldr	r2, [pc, #796]	@ (8001660 <Relay_off_time+0x350>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d800      	bhi.n	800134a <Relay_off_time+0x3a>
 8001348:	e250      	b.n	80017ec <Relay_off_time+0x4dc>
		  {
			  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_RESET);
 800134a:	2380      	movs	r3, #128	@ 0x80
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	48c5      	ldr	r0, [pc, #788]	@ (8001664 <Relay_off_time+0x354>)
 8001350:	2200      	movs	r2, #0
 8001352:	0019      	movs	r1, r3
 8001354:	f001 fdc6 	bl	8002ee4 <HAL_GPIO_WritePin>
			  printf("return to IDLE\n\r");
 8001358:	4bc3      	ldr	r3, [pc, #780]	@ (8001668 <Relay_off_time+0x358>)
 800135a:	0018      	movs	r0, r3
 800135c:	f003 fa4a 	bl	80047f4 <iprintf>
			  state = 0;
 8001360:	4bc2      	ldr	r3, [pc, #776]	@ (800166c <Relay_off_time+0x35c>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
			  coin_pulse = 0;
 8001366:	4bc2      	ldr	r3, [pc, #776]	@ (8001670 <Relay_off_time+0x360>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
			  initial_display_done = 0;
 800136c:	4bc1      	ldr	r3, [pc, #772]	@ (8001674 <Relay_off_time+0x364>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(500);
 8001372:	23fa      	movs	r3, #250	@ 0xfa
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	0018      	movs	r0, r3
 8001378:	f000 ff90 	bl	800229c <HAL_Delay>

			HAL_GPIO_WritePin(CUTOFF_RELAY_GPIO_Port, CUTOFF_RELAY_Pin, GPIO_PIN_RESET);
 800137c:	2380      	movs	r3, #128	@ 0x80
 800137e:	0159      	lsls	r1, r3, #5
 8001380:	2390      	movs	r3, #144	@ 0x90
 8001382:	05db      	lsls	r3, r3, #23
 8001384:	2200      	movs	r2, #0
 8001386:	0018      	movs	r0, r3
 8001388:	f001 fdac 	bl	8002ee4 <HAL_GPIO_WritePin>
			printf("Coin acceptor Power ON\n\r");
 800138c:	4bba      	ldr	r3, [pc, #744]	@ (8001678 <Relay_off_time+0x368>)
 800138e:	0018      	movs	r0, r3
 8001390:	f003 fa30 	bl	80047f4 <iprintf>

				HAL_GPIO_WritePin(CUTOFF_RELAY_GPIO_Port, CUTOFF_RELAY_Pin, GPIO_PIN_RESET);
				printf("Coin acceptor Power ON\n\r");
		  }
	 }
}
 8001394:	e22a      	b.n	80017ec <Relay_off_time+0x4dc>
	 else if(potvalue > 100 && potvalue < 200)
 8001396:	1dbb      	adds	r3, r7, #6
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	2b64      	cmp	r3, #100	@ 0x64
 800139c:	d933      	bls.n	8001406 <Relay_off_time+0xf6>
 800139e:	1dbb      	adds	r3, r7, #6
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80013a4:	d82f      	bhi.n	8001406 <Relay_off_time+0xf6>
		  if (HAL_GetTick() - relay_start_time >= 20000)
 80013a6:	f000 ff6f 	bl	8002288 <HAL_GetTick>
 80013aa:	0002      	movs	r2, r0
 80013ac:	4bab      	ldr	r3, [pc, #684]	@ (800165c <Relay_off_time+0x34c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	4ab2      	ldr	r2, [pc, #712]	@ (800167c <Relay_off_time+0x36c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d800      	bhi.n	80013ba <Relay_off_time+0xaa>
 80013b8:	e218      	b.n	80017ec <Relay_off_time+0x4dc>
			  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_RESET);
 80013ba:	2380      	movs	r3, #128	@ 0x80
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	48a9      	ldr	r0, [pc, #676]	@ (8001664 <Relay_off_time+0x354>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	0019      	movs	r1, r3
 80013c4:	f001 fd8e 	bl	8002ee4 <HAL_GPIO_WritePin>
			  printf("return to IDLE\n\r");
 80013c8:	4ba7      	ldr	r3, [pc, #668]	@ (8001668 <Relay_off_time+0x358>)
 80013ca:	0018      	movs	r0, r3
 80013cc:	f003 fa12 	bl	80047f4 <iprintf>
			  state = 0;
 80013d0:	4ba6      	ldr	r3, [pc, #664]	@ (800166c <Relay_off_time+0x35c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
			  coin_pulse = 0;
 80013d6:	4ba6      	ldr	r3, [pc, #664]	@ (8001670 <Relay_off_time+0x360>)
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
			  initial_display_done = 0;
 80013dc:	4ba5      	ldr	r3, [pc, #660]	@ (8001674 <Relay_off_time+0x364>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(500);
 80013e2:	23fa      	movs	r3, #250	@ 0xfa
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	0018      	movs	r0, r3
 80013e8:	f000 ff58 	bl	800229c <HAL_Delay>
			HAL_GPIO_WritePin(CUTOFF_RELAY_GPIO_Port, CUTOFF_RELAY_Pin, GPIO_PIN_RESET);
 80013ec:	2380      	movs	r3, #128	@ 0x80
 80013ee:	0159      	lsls	r1, r3, #5
 80013f0:	2390      	movs	r3, #144	@ 0x90
 80013f2:	05db      	lsls	r3, r3, #23
 80013f4:	2200      	movs	r2, #0
 80013f6:	0018      	movs	r0, r3
 80013f8:	f001 fd74 	bl	8002ee4 <HAL_GPIO_WritePin>
			printf("Coin acceptor Power ON\n\r");
 80013fc:	4b9e      	ldr	r3, [pc, #632]	@ (8001678 <Relay_off_time+0x368>)
 80013fe:	0018      	movs	r0, r3
 8001400:	f003 f9f8 	bl	80047f4 <iprintf>
		  if (HAL_GetTick() - relay_start_time >= 20000)
 8001404:	e1f2      	b.n	80017ec <Relay_off_time+0x4dc>
	 else if(potvalue > 200 && potvalue < 300)
 8001406:	1dbb      	adds	r3, r7, #6
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	2bc8      	cmp	r3, #200	@ 0xc8
 800140c:	d935      	bls.n	800147a <Relay_off_time+0x16a>
 800140e:	1dbb      	adds	r3, r7, #6
 8001410:	881a      	ldrh	r2, [r3, #0]
 8001412:	2396      	movs	r3, #150	@ 0x96
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	429a      	cmp	r2, r3
 8001418:	d22f      	bcs.n	800147a <Relay_off_time+0x16a>
		  if (HAL_GetTick() - relay_start_time >= 25000)
 800141a:	f000 ff35 	bl	8002288 <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	4b8e      	ldr	r3, [pc, #568]	@ (800165c <Relay_off_time+0x34c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	4a96      	ldr	r2, [pc, #600]	@ (8001680 <Relay_off_time+0x370>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d800      	bhi.n	800142e <Relay_off_time+0x11e>
 800142c:	e1de      	b.n	80017ec <Relay_off_time+0x4dc>
			  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_RESET);
 800142e:	2380      	movs	r3, #128	@ 0x80
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	488c      	ldr	r0, [pc, #560]	@ (8001664 <Relay_off_time+0x354>)
 8001434:	2200      	movs	r2, #0
 8001436:	0019      	movs	r1, r3
 8001438:	f001 fd54 	bl	8002ee4 <HAL_GPIO_WritePin>
			  printf("return to IDLE\n\r");
 800143c:	4b8a      	ldr	r3, [pc, #552]	@ (8001668 <Relay_off_time+0x358>)
 800143e:	0018      	movs	r0, r3
 8001440:	f003 f9d8 	bl	80047f4 <iprintf>
			  state = 0;
 8001444:	4b89      	ldr	r3, [pc, #548]	@ (800166c <Relay_off_time+0x35c>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
			  coin_pulse = 0;
 800144a:	4b89      	ldr	r3, [pc, #548]	@ (8001670 <Relay_off_time+0x360>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
			  initial_display_done = 0;
 8001450:	4b88      	ldr	r3, [pc, #544]	@ (8001674 <Relay_off_time+0x364>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(500);
 8001456:	23fa      	movs	r3, #250	@ 0xfa
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	0018      	movs	r0, r3
 800145c:	f000 ff1e 	bl	800229c <HAL_Delay>
			HAL_GPIO_WritePin(CUTOFF_RELAY_GPIO_Port, CUTOFF_RELAY_Pin, GPIO_PIN_RESET);
 8001460:	2380      	movs	r3, #128	@ 0x80
 8001462:	0159      	lsls	r1, r3, #5
 8001464:	2390      	movs	r3, #144	@ 0x90
 8001466:	05db      	lsls	r3, r3, #23
 8001468:	2200      	movs	r2, #0
 800146a:	0018      	movs	r0, r3
 800146c:	f001 fd3a 	bl	8002ee4 <HAL_GPIO_WritePin>
			printf("Coin acceptor Power ON\n\r");
 8001470:	4b81      	ldr	r3, [pc, #516]	@ (8001678 <Relay_off_time+0x368>)
 8001472:	0018      	movs	r0, r3
 8001474:	f003 f9be 	bl	80047f4 <iprintf>
		  if (HAL_GetTick() - relay_start_time >= 25000)
 8001478:	e1b8      	b.n	80017ec <Relay_off_time+0x4dc>
	 else if(potvalue > 300 && potvalue < 400)
 800147a:	1dbb      	adds	r3, r7, #6
 800147c:	881a      	ldrh	r2, [r3, #0]
 800147e:	2396      	movs	r3, #150	@ 0x96
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	429a      	cmp	r2, r3
 8001484:	d935      	bls.n	80014f2 <Relay_off_time+0x1e2>
 8001486:	1dbb      	adds	r3, r7, #6
 8001488:	881a      	ldrh	r2, [r3, #0]
 800148a:	23c8      	movs	r3, #200	@ 0xc8
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	429a      	cmp	r2, r3
 8001490:	d22f      	bcs.n	80014f2 <Relay_off_time+0x1e2>
		  if (HAL_GetTick() - relay_start_time >= 30000)
 8001492:	f000 fef9 	bl	8002288 <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	4b70      	ldr	r3, [pc, #448]	@ (800165c <Relay_off_time+0x34c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	4a79      	ldr	r2, [pc, #484]	@ (8001684 <Relay_off_time+0x374>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d800      	bhi.n	80014a6 <Relay_off_time+0x196>
 80014a4:	e1a2      	b.n	80017ec <Relay_off_time+0x4dc>
			  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_RESET);
 80014a6:	2380      	movs	r3, #128	@ 0x80
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	486e      	ldr	r0, [pc, #440]	@ (8001664 <Relay_off_time+0x354>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	0019      	movs	r1, r3
 80014b0:	f001 fd18 	bl	8002ee4 <HAL_GPIO_WritePin>
			  printf("return to IDLE\n\r");
 80014b4:	4b6c      	ldr	r3, [pc, #432]	@ (8001668 <Relay_off_time+0x358>)
 80014b6:	0018      	movs	r0, r3
 80014b8:	f003 f99c 	bl	80047f4 <iprintf>
			  state = 0;
 80014bc:	4b6b      	ldr	r3, [pc, #428]	@ (800166c <Relay_off_time+0x35c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
			  coin_pulse = 0;
 80014c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001670 <Relay_off_time+0x360>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
			  initial_display_done = 0;
 80014c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001674 <Relay_off_time+0x364>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(500);
 80014ce:	23fa      	movs	r3, #250	@ 0xfa
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	0018      	movs	r0, r3
 80014d4:	f000 fee2 	bl	800229c <HAL_Delay>
			HAL_GPIO_WritePin(CUTOFF_RELAY_GPIO_Port, CUTOFF_RELAY_Pin, GPIO_PIN_RESET);
 80014d8:	2380      	movs	r3, #128	@ 0x80
 80014da:	0159      	lsls	r1, r3, #5
 80014dc:	2390      	movs	r3, #144	@ 0x90
 80014de:	05db      	lsls	r3, r3, #23
 80014e0:	2200      	movs	r2, #0
 80014e2:	0018      	movs	r0, r3
 80014e4:	f001 fcfe 	bl	8002ee4 <HAL_GPIO_WritePin>
			printf("Coin acceptor Power ON\n\r");
 80014e8:	4b63      	ldr	r3, [pc, #396]	@ (8001678 <Relay_off_time+0x368>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f003 f982 	bl	80047f4 <iprintf>
		  if (HAL_GetTick() - relay_start_time >= 30000)
 80014f0:	e17c      	b.n	80017ec <Relay_off_time+0x4dc>
	 else if(potvalue > 400 && potvalue < 500)
 80014f2:	1dbb      	adds	r3, r7, #6
 80014f4:	881a      	ldrh	r2, [r3, #0]
 80014f6:	23c8      	movs	r3, #200	@ 0xc8
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d935      	bls.n	800156a <Relay_off_time+0x25a>
 80014fe:	1dbb      	adds	r3, r7, #6
 8001500:	881a      	ldrh	r2, [r3, #0]
 8001502:	23fa      	movs	r3, #250	@ 0xfa
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	429a      	cmp	r2, r3
 8001508:	d22f      	bcs.n	800156a <Relay_off_time+0x25a>
		  if (HAL_GetTick() - relay_start_time >= 35000)
 800150a:	f000 febd 	bl	8002288 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	4b52      	ldr	r3, [pc, #328]	@ (800165c <Relay_off_time+0x34c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	4a5c      	ldr	r2, [pc, #368]	@ (8001688 <Relay_off_time+0x378>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d800      	bhi.n	800151e <Relay_off_time+0x20e>
 800151c:	e166      	b.n	80017ec <Relay_off_time+0x4dc>
			  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_RESET);
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	4850      	ldr	r0, [pc, #320]	@ (8001664 <Relay_off_time+0x354>)
 8001524:	2200      	movs	r2, #0
 8001526:	0019      	movs	r1, r3
 8001528:	f001 fcdc 	bl	8002ee4 <HAL_GPIO_WritePin>
			  printf("return to IDLE\n\r");
 800152c:	4b4e      	ldr	r3, [pc, #312]	@ (8001668 <Relay_off_time+0x358>)
 800152e:	0018      	movs	r0, r3
 8001530:	f003 f960 	bl	80047f4 <iprintf>
			  state = 0;
 8001534:	4b4d      	ldr	r3, [pc, #308]	@ (800166c <Relay_off_time+0x35c>)
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
			  coin_pulse = 0;
 800153a:	4b4d      	ldr	r3, [pc, #308]	@ (8001670 <Relay_off_time+0x360>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
			  initial_display_done = 0;
 8001540:	4b4c      	ldr	r3, [pc, #304]	@ (8001674 <Relay_off_time+0x364>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(500);
 8001546:	23fa      	movs	r3, #250	@ 0xfa
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	0018      	movs	r0, r3
 800154c:	f000 fea6 	bl	800229c <HAL_Delay>
			HAL_GPIO_WritePin(CUTOFF_RELAY_GPIO_Port, CUTOFF_RELAY_Pin, GPIO_PIN_RESET);
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	0159      	lsls	r1, r3, #5
 8001554:	2390      	movs	r3, #144	@ 0x90
 8001556:	05db      	lsls	r3, r3, #23
 8001558:	2200      	movs	r2, #0
 800155a:	0018      	movs	r0, r3
 800155c:	f001 fcc2 	bl	8002ee4 <HAL_GPIO_WritePin>
			printf("Coin acceptor Power ON\n\r");
 8001560:	4b45      	ldr	r3, [pc, #276]	@ (8001678 <Relay_off_time+0x368>)
 8001562:	0018      	movs	r0, r3
 8001564:	f003 f946 	bl	80047f4 <iprintf>
		  if (HAL_GetTick() - relay_start_time >= 35000)
 8001568:	e140      	b.n	80017ec <Relay_off_time+0x4dc>
	 else if(potvalue > 500 && potvalue < 600)
 800156a:	1dbb      	adds	r3, r7, #6
 800156c:	881a      	ldrh	r2, [r3, #0]
 800156e:	23fa      	movs	r3, #250	@ 0xfa
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	429a      	cmp	r2, r3
 8001574:	d935      	bls.n	80015e2 <Relay_off_time+0x2d2>
 8001576:	1dbb      	adds	r3, r7, #6
 8001578:	881a      	ldrh	r2, [r3, #0]
 800157a:	2396      	movs	r3, #150	@ 0x96
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	429a      	cmp	r2, r3
 8001580:	d22f      	bcs.n	80015e2 <Relay_off_time+0x2d2>
		  if (HAL_GetTick() - relay_start_time >= 40000)
 8001582:	f000 fe81 	bl	8002288 <HAL_GetTick>
 8001586:	0002      	movs	r2, r0
 8001588:	4b34      	ldr	r3, [pc, #208]	@ (800165c <Relay_off_time+0x34c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	4a3f      	ldr	r2, [pc, #252]	@ (800168c <Relay_off_time+0x37c>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d800      	bhi.n	8001596 <Relay_off_time+0x286>
 8001594:	e12a      	b.n	80017ec <Relay_off_time+0x4dc>
			  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_RESET);
 8001596:	2380      	movs	r3, #128	@ 0x80
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	4832      	ldr	r0, [pc, #200]	@ (8001664 <Relay_off_time+0x354>)
 800159c:	2200      	movs	r2, #0
 800159e:	0019      	movs	r1, r3
 80015a0:	f001 fca0 	bl	8002ee4 <HAL_GPIO_WritePin>
			  printf("return to IDLE\n\r");
 80015a4:	4b30      	ldr	r3, [pc, #192]	@ (8001668 <Relay_off_time+0x358>)
 80015a6:	0018      	movs	r0, r3
 80015a8:	f003 f924 	bl	80047f4 <iprintf>
			  state = 0;
 80015ac:	4b2f      	ldr	r3, [pc, #188]	@ (800166c <Relay_off_time+0x35c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
			  coin_pulse = 0;
 80015b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001670 <Relay_off_time+0x360>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
			  initial_display_done = 0;
 80015b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001674 <Relay_off_time+0x364>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(500);
 80015be:	23fa      	movs	r3, #250	@ 0xfa
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	0018      	movs	r0, r3
 80015c4:	f000 fe6a 	bl	800229c <HAL_Delay>
			HAL_GPIO_WritePin(CUTOFF_RELAY_GPIO_Port, CUTOFF_RELAY_Pin, GPIO_PIN_RESET);
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	0159      	lsls	r1, r3, #5
 80015cc:	2390      	movs	r3, #144	@ 0x90
 80015ce:	05db      	lsls	r3, r3, #23
 80015d0:	2200      	movs	r2, #0
 80015d2:	0018      	movs	r0, r3
 80015d4:	f001 fc86 	bl	8002ee4 <HAL_GPIO_WritePin>
			printf("Coin acceptor Power ON\n\r");
 80015d8:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <Relay_off_time+0x368>)
 80015da:	0018      	movs	r0, r3
 80015dc:	f003 f90a 	bl	80047f4 <iprintf>
		  if (HAL_GetTick() - relay_start_time >= 40000)
 80015e0:	e104      	b.n	80017ec <Relay_off_time+0x4dc>
	 else if(potvalue > 600 && potvalue < 700)
 80015e2:	1dbb      	adds	r3, r7, #6
 80015e4:	881a      	ldrh	r2, [r3, #0]
 80015e6:	2396      	movs	r3, #150	@ 0x96
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d952      	bls.n	8001694 <Relay_off_time+0x384>
 80015ee:	1dbb      	adds	r3, r7, #6
 80015f0:	881a      	ldrh	r2, [r3, #0]
 80015f2:	23af      	movs	r3, #175	@ 0xaf
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d24c      	bcs.n	8001694 <Relay_off_time+0x384>
		  if (HAL_GetTick() - relay_start_time >= 45000)
 80015fa:	f000 fe45 	bl	8002288 <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	4b16      	ldr	r3, [pc, #88]	@ (800165c <Relay_off_time+0x34c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	4a22      	ldr	r2, [pc, #136]	@ (8001690 <Relay_off_time+0x380>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d800      	bhi.n	800160e <Relay_off_time+0x2fe>
 800160c:	e0ee      	b.n	80017ec <Relay_off_time+0x4dc>
			  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_RESET);
 800160e:	2380      	movs	r3, #128	@ 0x80
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	4814      	ldr	r0, [pc, #80]	@ (8001664 <Relay_off_time+0x354>)
 8001614:	2200      	movs	r2, #0
 8001616:	0019      	movs	r1, r3
 8001618:	f001 fc64 	bl	8002ee4 <HAL_GPIO_WritePin>
			  printf("return to IDLE\n\r");
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <Relay_off_time+0x358>)
 800161e:	0018      	movs	r0, r3
 8001620:	f003 f8e8 	bl	80047f4 <iprintf>
			  state = 0;
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <Relay_off_time+0x35c>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
			  coin_pulse = 0;
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <Relay_off_time+0x360>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
			  initial_display_done = 0;
 8001630:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <Relay_off_time+0x364>)
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(500);
 8001636:	23fa      	movs	r3, #250	@ 0xfa
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	0018      	movs	r0, r3
 800163c:	f000 fe2e 	bl	800229c <HAL_Delay>
			HAL_GPIO_WritePin(CUTOFF_RELAY_GPIO_Port, CUTOFF_RELAY_Pin, GPIO_PIN_RESET);
 8001640:	2380      	movs	r3, #128	@ 0x80
 8001642:	0159      	lsls	r1, r3, #5
 8001644:	2390      	movs	r3, #144	@ 0x90
 8001646:	05db      	lsls	r3, r3, #23
 8001648:	2200      	movs	r2, #0
 800164a:	0018      	movs	r0, r3
 800164c:	f001 fc4a 	bl	8002ee4 <HAL_GPIO_WritePin>
			printf("Coin acceptor Power ON\n\r");
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <Relay_off_time+0x368>)
 8001652:	0018      	movs	r0, r3
 8001654:	f003 f8ce 	bl	80047f4 <iprintf>
		  if (HAL_GetTick() - relay_start_time >= 45000)
 8001658:	e0c8      	b.n	80017ec <Relay_off_time+0x4dc>
 800165a:	46c0      	nop			@ (mov r8, r8)
 800165c:	200001c8 	.word	0x200001c8
 8001660:	00003a97 	.word	0x00003a97
 8001664:	48000400 	.word	0x48000400
 8001668:	08005768 	.word	0x08005768
 800166c:	200001bd 	.word	0x200001bd
 8001670:	200001bc 	.word	0x200001bc
 8001674:	200001ac 	.word	0x200001ac
 8001678:	0800577c 	.word	0x0800577c
 800167c:	00004e1f 	.word	0x00004e1f
 8001680:	000061a7 	.word	0x000061a7
 8001684:	0000752f 	.word	0x0000752f
 8001688:	000088b7 	.word	0x000088b7
 800168c:	00009c3f 	.word	0x00009c3f
 8001690:	0000afc7 	.word	0x0000afc7
	 else if(potvalue > 700 && potvalue < 800)
 8001694:	1dbb      	adds	r3, r7, #6
 8001696:	881a      	ldrh	r2, [r3, #0]
 8001698:	23af      	movs	r3, #175	@ 0xaf
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	429a      	cmp	r2, r3
 800169e:	d935      	bls.n	800170c <Relay_off_time+0x3fc>
 80016a0:	1dbb      	adds	r3, r7, #6
 80016a2:	881a      	ldrh	r2, [r3, #0]
 80016a4:	23c8      	movs	r3, #200	@ 0xc8
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d22f      	bcs.n	800170c <Relay_off_time+0x3fc>
		  if (HAL_GetTick() - relay_start_time >= 50000)
 80016ac:	f000 fdec 	bl	8002288 <HAL_GetTick>
 80016b0:	0002      	movs	r2, r0
 80016b2:	4b50      	ldr	r3, [pc, #320]	@ (80017f4 <Relay_off_time+0x4e4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	4a4f      	ldr	r2, [pc, #316]	@ (80017f8 <Relay_off_time+0x4e8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d800      	bhi.n	80016c0 <Relay_off_time+0x3b0>
 80016be:	e095      	b.n	80017ec <Relay_off_time+0x4dc>
			  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_RESET);
 80016c0:	2380      	movs	r3, #128	@ 0x80
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	484d      	ldr	r0, [pc, #308]	@ (80017fc <Relay_off_time+0x4ec>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	0019      	movs	r1, r3
 80016ca:	f001 fc0b 	bl	8002ee4 <HAL_GPIO_WritePin>
			  printf("return to IDLE\n\r");
 80016ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001800 <Relay_off_time+0x4f0>)
 80016d0:	0018      	movs	r0, r3
 80016d2:	f003 f88f 	bl	80047f4 <iprintf>
			  state = 0;
 80016d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001804 <Relay_off_time+0x4f4>)
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
			  coin_pulse = 0;
 80016dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001808 <Relay_off_time+0x4f8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
			  initial_display_done = 0;
 80016e2:	4b4a      	ldr	r3, [pc, #296]	@ (800180c <Relay_off_time+0x4fc>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(500);
 80016e8:	23fa      	movs	r3, #250	@ 0xfa
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	0018      	movs	r0, r3
 80016ee:	f000 fdd5 	bl	800229c <HAL_Delay>
			HAL_GPIO_WritePin(CUTOFF_RELAY_GPIO_Port, CUTOFF_RELAY_Pin, GPIO_PIN_RESET);
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	0159      	lsls	r1, r3, #5
 80016f6:	2390      	movs	r3, #144	@ 0x90
 80016f8:	05db      	lsls	r3, r3, #23
 80016fa:	2200      	movs	r2, #0
 80016fc:	0018      	movs	r0, r3
 80016fe:	f001 fbf1 	bl	8002ee4 <HAL_GPIO_WritePin>
			printf("Coin acceptor Power ON\n\r");
 8001702:	4b43      	ldr	r3, [pc, #268]	@ (8001810 <Relay_off_time+0x500>)
 8001704:	0018      	movs	r0, r3
 8001706:	f003 f875 	bl	80047f4 <iprintf>
		  if (HAL_GetTick() - relay_start_time >= 50000)
 800170a:	e06f      	b.n	80017ec <Relay_off_time+0x4dc>
	 else if(potvalue > 800 && potvalue < 900)
 800170c:	1dbb      	adds	r3, r7, #6
 800170e:	881a      	ldrh	r2, [r3, #0]
 8001710:	23c8      	movs	r3, #200	@ 0xc8
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	429a      	cmp	r2, r3
 8001716:	d934      	bls.n	8001782 <Relay_off_time+0x472>
 8001718:	1dbb      	adds	r3, r7, #6
 800171a:	881a      	ldrh	r2, [r3, #0]
 800171c:	23e1      	movs	r3, #225	@ 0xe1
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	429a      	cmp	r2, r3
 8001722:	d22e      	bcs.n	8001782 <Relay_off_time+0x472>
		  if (HAL_GetTick() - relay_start_time >= 55000)
 8001724:	f000 fdb0 	bl	8002288 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	4b32      	ldr	r3, [pc, #200]	@ (80017f4 <Relay_off_time+0x4e4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	4a38      	ldr	r2, [pc, #224]	@ (8001814 <Relay_off_time+0x504>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d95a      	bls.n	80017ec <Relay_off_time+0x4dc>
			  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_RESET);
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4830      	ldr	r0, [pc, #192]	@ (80017fc <Relay_off_time+0x4ec>)
 800173c:	2200      	movs	r2, #0
 800173e:	0019      	movs	r1, r3
 8001740:	f001 fbd0 	bl	8002ee4 <HAL_GPIO_WritePin>
			  printf("return to IDLE\n\r");
 8001744:	4b2e      	ldr	r3, [pc, #184]	@ (8001800 <Relay_off_time+0x4f0>)
 8001746:	0018      	movs	r0, r3
 8001748:	f003 f854 	bl	80047f4 <iprintf>
			  state = 0;
 800174c:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <Relay_off_time+0x4f4>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
			  coin_pulse = 0;
 8001752:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <Relay_off_time+0x4f8>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
			  initial_display_done = 0;
 8001758:	4b2c      	ldr	r3, [pc, #176]	@ (800180c <Relay_off_time+0x4fc>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(500);
 800175e:	23fa      	movs	r3, #250	@ 0xfa
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	0018      	movs	r0, r3
 8001764:	f000 fd9a 	bl	800229c <HAL_Delay>
			HAL_GPIO_WritePin(CUTOFF_RELAY_GPIO_Port, CUTOFF_RELAY_Pin, GPIO_PIN_RESET);
 8001768:	2380      	movs	r3, #128	@ 0x80
 800176a:	0159      	lsls	r1, r3, #5
 800176c:	2390      	movs	r3, #144	@ 0x90
 800176e:	05db      	lsls	r3, r3, #23
 8001770:	2200      	movs	r2, #0
 8001772:	0018      	movs	r0, r3
 8001774:	f001 fbb6 	bl	8002ee4 <HAL_GPIO_WritePin>
			printf("Coin acceptor Power ON\n\r");
 8001778:	4b25      	ldr	r3, [pc, #148]	@ (8001810 <Relay_off_time+0x500>)
 800177a:	0018      	movs	r0, r3
 800177c:	f003 f83a 	bl	80047f4 <iprintf>
		  if (HAL_GetTick() - relay_start_time >= 55000)
 8001780:	e034      	b.n	80017ec <Relay_off_time+0x4dc>
	 else if(potvalue > 900)
 8001782:	1dbb      	adds	r3, r7, #6
 8001784:	881a      	ldrh	r2, [r3, #0]
 8001786:	23e1      	movs	r3, #225	@ 0xe1
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	429a      	cmp	r2, r3
 800178c:	d92e      	bls.n	80017ec <Relay_off_time+0x4dc>
		  if (HAL_GetTick() - relay_start_time >= 60000)
 800178e:	f000 fd7b 	bl	8002288 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	4b17      	ldr	r3, [pc, #92]	@ (80017f4 <Relay_off_time+0x4e4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	4a1f      	ldr	r2, [pc, #124]	@ (8001818 <Relay_off_time+0x508>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d925      	bls.n	80017ec <Relay_off_time+0x4dc>
			  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_RESET);
 80017a0:	2380      	movs	r3, #128	@ 0x80
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	4815      	ldr	r0, [pc, #84]	@ (80017fc <Relay_off_time+0x4ec>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	0019      	movs	r1, r3
 80017aa:	f001 fb9b 	bl	8002ee4 <HAL_GPIO_WritePin>
			  printf("return to IDLE\n\r");
 80017ae:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <Relay_off_time+0x4f0>)
 80017b0:	0018      	movs	r0, r3
 80017b2:	f003 f81f 	bl	80047f4 <iprintf>
			  state = 0;
 80017b6:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <Relay_off_time+0x4f4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
			  coin_pulse = 0;
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <Relay_off_time+0x4f8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
			  initial_display_done = 0;
 80017c2:	4b12      	ldr	r3, [pc, #72]	@ (800180c <Relay_off_time+0x4fc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(500);
 80017c8:	23fa      	movs	r3, #250	@ 0xfa
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 fd65 	bl	800229c <HAL_Delay>
				HAL_GPIO_WritePin(CUTOFF_RELAY_GPIO_Port, CUTOFF_RELAY_Pin, GPIO_PIN_RESET);
 80017d2:	2380      	movs	r3, #128	@ 0x80
 80017d4:	0159      	lsls	r1, r3, #5
 80017d6:	2390      	movs	r3, #144	@ 0x90
 80017d8:	05db      	lsls	r3, r3, #23
 80017da:	2200      	movs	r2, #0
 80017dc:	0018      	movs	r0, r3
 80017de:	f001 fb81 	bl	8002ee4 <HAL_GPIO_WritePin>
				printf("Coin acceptor Power ON\n\r");
 80017e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <Relay_off_time+0x500>)
 80017e4:	0018      	movs	r0, r3
 80017e6:	f003 f805 	bl	80047f4 <iprintf>
}
 80017ea:	e7ff      	b.n	80017ec <Relay_off_time+0x4dc>
 80017ec:	46c0      	nop			@ (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200001c8 	.word	0x200001c8
 80017f8:	0000c34f 	.word	0x0000c34f
 80017fc:	48000400 	.word	0x48000400
 8001800:	08005768 	.word	0x08005768
 8001804:	200001bd 	.word	0x200001bd
 8001808:	200001bc 	.word	0x200001bc
 800180c:	200001ac 	.word	0x200001ac
 8001810:	0800577c 	.word	0x0800577c
 8001814:	0000d6d7 	.word	0x0000d6d7
 8001818:	0000ea5f 	.word	0x0000ea5f

0800181c <processPulse>:

void processPulse()
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	 if (pulse_interrupt_Flag)
 8001820:	4b44      	ldr	r3, [pc, #272]	@ (8001934 <processPulse+0x118>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d100      	bne.n	800182c <processPulse+0x10>
 800182a:	e07f      	b.n	800192c <processPulse+0x110>
	 {
		HAL_Delay(50);
 800182c:	2032      	movs	r0, #50	@ 0x32
 800182e:	f000 fd35 	bl	800229c <HAL_Delay>
		if ((HAL_GetTick() - pulse_start_time) >= pulse_timeout)
 8001832:	f000 fd29 	bl	8002288 <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	4b3f      	ldr	r3, [pc, #252]	@ (8001938 <processPulse+0x11c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	1ad2      	subs	r2, r2, r3
 800183e:	4b3f      	ldr	r3, [pc, #252]	@ (800193c <processPulse+0x120>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d372      	bcc.n	800192c <processPulse+0x110>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001846:	b672      	cpsid	i
}
 8001848:	46c0      	nop			@ (mov r8, r8)
		{
			__disable_irq();

			HAL_GPIO_WritePin(CUTOFF_RELAY_GPIO_Port, CUTOFF_RELAY_Pin, GPIO_PIN_SET);
 800184a:	2380      	movs	r3, #128	@ 0x80
 800184c:	0159      	lsls	r1, r3, #5
 800184e:	2390      	movs	r3, #144	@ 0x90
 8001850:	05db      	lsls	r3, r3, #23
 8001852:	2201      	movs	r2, #1
 8001854:	0018      	movs	r0, r3
 8001856:	f001 fb45 	bl	8002ee4 <HAL_GPIO_WritePin>
			printf("Coin Acceptor power OFF\n\r");
 800185a:	4b39      	ldr	r3, [pc, #228]	@ (8001940 <processPulse+0x124>)
 800185c:	0018      	movs	r0, r3
 800185e:	f002 ffc9 	bl	80047f4 <iprintf>

			switch (coin_pulse)
 8001862:	4b38      	ldr	r3, [pc, #224]	@ (8001944 <processPulse+0x128>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b09      	cmp	r3, #9
 800186a:	d84c      	bhi.n	8001906 <processPulse+0xea>
 800186c:	009a      	lsls	r2, r3, #2
 800186e:	4b36      	ldr	r3, [pc, #216]	@ (8001948 <processPulse+0x12c>)
 8001870:	18d3      	adds	r3, r2, r3
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	469f      	mov	pc, r3
			{
				case 1:
					printf("1 pulse received\n\r");
 8001876:	4b35      	ldr	r3, [pc, #212]	@ (800194c <processPulse+0x130>)
 8001878:	0018      	movs	r0, r3
 800187a:	f002 ffbb 	bl	80047f4 <iprintf>
					state = 1;
 800187e:	4b34      	ldr	r3, [pc, #208]	@ (8001950 <processPulse+0x134>)
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
					break;
 8001884:	e047      	b.n	8001916 <processPulse+0xfa>
				case 2:
					printf("2 pulses received\n\r");
 8001886:	4b33      	ldr	r3, [pc, #204]	@ (8001954 <processPulse+0x138>)
 8001888:	0018      	movs	r0, r3
 800188a:	f002 ffb3 	bl	80047f4 <iprintf>
					state = 2;
 800188e:	4b30      	ldr	r3, [pc, #192]	@ (8001950 <processPulse+0x134>)
 8001890:	2202      	movs	r2, #2
 8001892:	701a      	strb	r2, [r3, #0]
					break;
 8001894:	e03f      	b.n	8001916 <processPulse+0xfa>
				case 3:
					printf("2 pulses received\n\r");
 8001896:	4b2f      	ldr	r3, [pc, #188]	@ (8001954 <processPulse+0x138>)
 8001898:	0018      	movs	r0, r3
 800189a:	f002 ffab 	bl	80047f4 <iprintf>
					state = 2;
 800189e:	4b2c      	ldr	r3, [pc, #176]	@ (8001950 <processPulse+0x134>)
 80018a0:	2202      	movs	r2, #2
 80018a2:	701a      	strb	r2, [r3, #0]
					break;
 80018a4:	e037      	b.n	8001916 <processPulse+0xfa>
				case 4:
					printf("3 pulses received\n\r");
 80018a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001958 <processPulse+0x13c>)
 80018a8:	0018      	movs	r0, r3
 80018aa:	f002 ffa3 	bl	80047f4 <iprintf>
					state = 5;
 80018ae:	4b28      	ldr	r3, [pc, #160]	@ (8001950 <processPulse+0x134>)
 80018b0:	2205      	movs	r2, #5
 80018b2:	701a      	strb	r2, [r3, #0]
					break;
 80018b4:	e02f      	b.n	8001916 <processPulse+0xfa>
				case 5:
					printf("3 pulses received\n\r");
 80018b6:	4b28      	ldr	r3, [pc, #160]	@ (8001958 <processPulse+0x13c>)
 80018b8:	0018      	movs	r0, r3
 80018ba:	f002 ff9b 	bl	80047f4 <iprintf>
					state = 5;
 80018be:	4b24      	ldr	r3, [pc, #144]	@ (8001950 <processPulse+0x134>)
 80018c0:	2205      	movs	r2, #5
 80018c2:	701a      	strb	r2, [r3, #0]
					break;
 80018c4:	e027      	b.n	8001916 <processPulse+0xfa>
				case 6:
					printf("6 pulses received\n\r");
 80018c6:	4b25      	ldr	r3, [pc, #148]	@ (800195c <processPulse+0x140>)
 80018c8:	0018      	movs	r0, r3
 80018ca:	f002 ff93 	bl	80047f4 <iprintf>
					state = 8;
 80018ce:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <processPulse+0x134>)
 80018d0:	2208      	movs	r2, #8
 80018d2:	701a      	strb	r2, [r3, #0]
					break;
 80018d4:	e01f      	b.n	8001916 <processPulse+0xfa>
				case 7:
					printf("7 pulses received\n\r");
 80018d6:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <processPulse+0x144>)
 80018d8:	0018      	movs	r0, r3
 80018da:	f002 ff8b 	bl	80047f4 <iprintf>
					state = 11;
 80018de:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <processPulse+0x134>)
 80018e0:	220b      	movs	r2, #11
 80018e2:	701a      	strb	r2, [r3, #0]
					break;
 80018e4:	e017      	b.n	8001916 <processPulse+0xfa>
				case 8:
					printf("8 pulses received\n\r");
 80018e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001964 <processPulse+0x148>)
 80018e8:	0018      	movs	r0, r3
 80018ea:	f002 ff83 	bl	80047f4 <iprintf>
					state = 14;
 80018ee:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <processPulse+0x134>)
 80018f0:	220e      	movs	r2, #14
 80018f2:	701a      	strb	r2, [r3, #0]
					break;
 80018f4:	e00f      	b.n	8001916 <processPulse+0xfa>
				case 9:
					printf("9 pulses received\n\r");
 80018f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001968 <processPulse+0x14c>)
 80018f8:	0018      	movs	r0, r3
 80018fa:	f002 ff7b 	bl	80047f4 <iprintf>
					state = 17;
 80018fe:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <processPulse+0x134>)
 8001900:	2211      	movs	r2, #17
 8001902:	701a      	strb	r2, [r3, #0]
					break;
 8001904:	e007      	b.n	8001916 <processPulse+0xfa>
				default:
					printf("Invalid number of pulses\n\r");
 8001906:	4b19      	ldr	r3, [pc, #100]	@ (800196c <processPulse+0x150>)
 8001908:	0018      	movs	r0, r3
 800190a:	f002 ff73 	bl	80047f4 <iprintf>
					state = 0;
 800190e:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <processPulse+0x134>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
					break;
 8001914:	46c0      	nop			@ (mov r8, r8)
			}
			coin_pulse = 0;
 8001916:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <processPulse+0x128>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
			pulse_interrupt_Flag = 0;
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <processPulse+0x118>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
			pulse_start_time = 0;
 8001922:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <processPulse+0x11c>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001928:	b662      	cpsie	i
}
 800192a:	46c0      	nop			@ (mov r8, r8)
			__enable_irq();


		}
	 }
}
 800192c:	46c0      	nop			@ (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			@ (mov r8, r8)
 8001934:	200001ad 	.word	0x200001ad
 8001938:	200001b4 	.word	0x200001b4
 800193c:	20000000 	.word	0x20000000
 8001940:	080057c8 	.word	0x080057c8
 8001944:	200001bc 	.word	0x200001bc
 8001948:	080059cc 	.word	0x080059cc
 800194c:	080057e4 	.word	0x080057e4
 8001950:	200001bd 	.word	0x200001bd
 8001954:	080057f8 	.word	0x080057f8
 8001958:	0800580c 	.word	0x0800580c
 800195c:	08005820 	.word	0x08005820
 8001960:	08005834 	.word	0x08005834
 8001964:	08005848 	.word	0x08005848
 8001968:	0800585c 	.word	0x0800585c
 800196c:	08005870 	.word	0x08005870

08001970 <TM1637_Countdown_20Sec>:

void TM1637_Countdown_20Sec(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
	static bool colon_state = false;
	static uint32_t last_update_time = 0;
	uint8_t display_data[4] = {0x00, 0x00, 0x00, 0x00};
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
    if (HAL_GetTick() - last_update_time >= 1000)
 800197c:	f000 fc84 	bl	8002288 <HAL_GetTick>
 8001980:	0002      	movs	r2, r0
 8001982:	4b36      	ldr	r3, [pc, #216]	@ (8001a5c <TM1637_Countdown_20Sec+0xec>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	1ad2      	subs	r2, r2, r3
 8001988:	23fa      	movs	r3, #250	@ 0xfa
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	429a      	cmp	r2, r3
 800198e:	d360      	bcc.n	8001a52 <TM1637_Countdown_20Sec+0xe2>
    {
        last_update_time = HAL_GetTick();
 8001990:	f000 fc7a 	bl	8002288 <HAL_GetTick>
 8001994:	0002      	movs	r2, r0
 8001996:	4b31      	ldr	r3, [pc, #196]	@ (8001a5c <TM1637_Countdown_20Sec+0xec>)
 8001998:	601a      	str	r2, [r3, #0]
        colon_state = !colon_state;
 800199a:	4b31      	ldr	r3, [pc, #196]	@ (8001a60 <TM1637_Countdown_20Sec+0xf0>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	1e5a      	subs	r2, r3, #1
 80019a0:	4193      	sbcs	r3, r2
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2201      	movs	r2, #1
 80019a6:	4053      	eors	r3, r2
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	1c1a      	adds	r2, r3, #0
 80019ac:	2301      	movs	r3, #1
 80019ae:	4013      	ands	r3, r2
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <TM1637_Countdown_20Sec+0xf0>)
 80019b4:	701a      	strb	r2, [r3, #0]

        display_data[0] = digit_map[0];
 80019b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001a64 <TM1637_Countdown_20Sec+0xf4>)
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	701a      	strb	r2, [r3, #0]
		display_data[1] = digit_map[0];
 80019be:	4b29      	ldr	r3, [pc, #164]	@ (8001a64 <TM1637_Countdown_20Sec+0xf4>)
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	705a      	strb	r2, [r3, #1]
        display_data[2] = digit_map[(countdown_seconds / 10)];
 80019c6:	4b28      	ldr	r3, [pc, #160]	@ (8001a68 <TM1637_Countdown_20Sec+0xf8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	210a      	movs	r1, #10
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7fe fc2f 	bl	8000230 <__divsi3>
 80019d2:	0003      	movs	r3, r0
 80019d4:	001a      	movs	r2, r3
 80019d6:	4b23      	ldr	r3, [pc, #140]	@ (8001a64 <TM1637_Countdown_20Sec+0xf4>)
 80019d8:	5c9a      	ldrb	r2, [r3, r2]
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	709a      	strb	r2, [r3, #2]
        display_data[3] = digit_map[(countdown_seconds % 10)];
 80019de:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <TM1637_Countdown_20Sec+0xf8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	210a      	movs	r1, #10
 80019e4:	0018      	movs	r0, r3
 80019e6:	f7fe fd09 	bl	80003fc <__aeabi_idivmod>
 80019ea:	000b      	movs	r3, r1
 80019ec:	001a      	movs	r2, r3
 80019ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001a64 <TM1637_Countdown_20Sec+0xf4>)
 80019f0:	5c9a      	ldrb	r2, [r3, r2]
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	70da      	strb	r2, [r3, #3]

        if (colon_state)
 80019f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <TM1637_Countdown_20Sec+0xf0>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d008      	beq.n	8001a10 <TM1637_Countdown_20Sec+0xa0>
        {
			display_data[1] |= 0x80;
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	785b      	ldrb	r3, [r3, #1]
 8001a02:	2280      	movs	r2, #128	@ 0x80
 8001a04:	4252      	negs	r2, r2
 8001a06:	4313      	orrs	r3, r2
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	705a      	strb	r2, [r3, #1]
 8001a0e:	e003      	b.n	8001a18 <TM1637_Countdown_20Sec+0xa8>
		} else
		{
			display_data[1] |= 0x00;
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	785a      	ldrb	r2, [r3, #1]
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	705a      	strb	r2, [r3, #1]
		}
        TM1637_WriteData(0xC0, display_data, 4);
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	20c0      	movs	r0, #192	@ 0xc0
 8001a20:	f7fe fdc2 	bl	80005a8 <TM1637_WriteData>
        printf("Countdown: %02d seconds\n", countdown_seconds);
 8001a24:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <TM1637_Countdown_20Sec+0xf8>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <TM1637_Countdown_20Sec+0xfc>)
 8001a2a:	0011      	movs	r1, r2
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f002 fee1 	bl	80047f4 <iprintf>
        countdown_seconds--;
 8001a32:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <TM1637_Countdown_20Sec+0xf8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	1e5a      	subs	r2, r3, #1
 8001a38:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <TM1637_Countdown_20Sec+0xf8>)
 8001a3a:	601a      	str	r2, [r3, #0]
        if (countdown_seconds < 0) {
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <TM1637_Countdown_20Sec+0xf8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	da06      	bge.n	8001a52 <TM1637_Countdown_20Sec+0xe2>
        	countdown_seconds = 0;
 8001a44:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <TM1637_Countdown_20Sec+0xf8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
			printf("20 sec countdown completed\n");
 8001a4a:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <TM1637_Countdown_20Sec+0x100>)
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f002 ff37 	bl	80048c0 <puts>
        }
    }
}
 8001a52:	46c0      	nop			@ (mov r8, r8)
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b002      	add	sp, #8
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	200001cc 	.word	0x200001cc
 8001a60:	200001d0 	.word	0x200001d0
 8001a64:	20000004 	.word	0x20000004
 8001a68:	200001c4 	.word	0x200001c4
 8001a6c:	0800588c 	.word	0x0800588c
 8001a70:	08005634 	.word	0x08005634

08001a74 <show_version>:

void show_version(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
	uint8_t data[4] = {0x00, 0x00, digit_map[15], digit_map[1]};
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	2200      	movs	r2, #0
 8001a84:	705a      	strb	r2, [r3, #1]
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <show_version+0x40>)
 8001a88:	7bda      	ldrb	r2, [r3, #15]
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	709a      	strb	r2, [r3, #2]
 8001a8e:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <show_version+0x40>)
 8001a90:	785a      	ldrb	r2, [r3, #1]
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	70da      	strb	r2, [r3, #3]
	TM1637_WriteData(0xC0, data, 4);
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2204      	movs	r2, #4
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	20c0      	movs	r0, #192	@ 0xc0
 8001a9e:	f7fe fd83 	bl	80005a8 <TM1637_WriteData>
	printf("Program version 1: A1\n\r");
 8001aa2:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <show_version+0x44>)
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f002 fea5 	bl	80047f4 <iprintf>
}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b002      	add	sp, #8
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			@ (mov r8, r8)
 8001ab4:	20000004 	.word	0x20000004
 8001ab8:	080058a8 	.word	0x080058a8

08001abc <Display_fifty>:

void Display_fifty(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
	uint8_t data[4] = {0x00, digit_map[5], digit_map[0], digit_map[10]};
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <Display_fifty+0x40>)
 8001aca:	795a      	ldrb	r2, [r3, #5]
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	705a      	strb	r2, [r3, #1]
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8001afc <Display_fifty+0x40>)
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	709a      	strb	r2, [r3, #2]
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <Display_fifty+0x40>)
 8001ada:	7a9a      	ldrb	r2, [r3, #10]
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	70da      	strb	r2, [r3, #3]
	TM1637_WriteData(0xC0, data, 4);
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	20c0      	movs	r0, #192	@ 0xc0
 8001ae8:	f7fe fd5e 	bl	80005a8 <TM1637_WriteData>
	printf("Displayed 50 F\n\r");
 8001aec:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <Display_fifty+0x44>)
 8001aee:	0018      	movs	r0, r3
 8001af0:	f002 fe80 	bl	80047f4 <iprintf>
}
 8001af4:	46c0      	nop			@ (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000004 	.word	0x20000004
 8001b00:	080058c0 	.word	0x080058c0

08001b04 <Display_01>:

void Display_01(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
	uint8_t data[4] = {0x00, 0x00, digit_map[0], digit_map[1]};
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	705a      	strb	r2, [r3, #1]
 8001b16:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <Display_01+0x40>)
 8001b18:	781a      	ldrb	r2, [r3, #0]
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	709a      	strb	r2, [r3, #2]
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <Display_01+0x40>)
 8001b20:	785a      	ldrb	r2, [r3, #1]
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	70da      	strb	r2, [r3, #3]
	TM1637_WriteData(0xC0, data, 4);
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2204      	movs	r2, #4
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	20c0      	movs	r0, #192	@ 0xc0
 8001b2e:	f7fe fd3b 	bl	80005a8 <TM1637_WriteData>
	printf("displayed 01 \n\r");
 8001b32:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <Display_01+0x44>)
 8001b34:	0018      	movs	r0, r3
 8001b36:	f002 fe5d 	bl	80047f4 <iprintf>
}
 8001b3a:	46c0      	nop			@ (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			@ (mov r8, r8)
 8001b44:	20000004 	.word	0x20000004
 8001b48:	080058d4 	.word	0x080058d4

08001b4c <Display_02>:

void Display_02(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
	uint8_t data[4] = {0x00, 0x00, digit_map[0], digit_map[2]};
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	705a      	strb	r2, [r3, #1]
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <Display_02+0x40>)
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	709a      	strb	r2, [r3, #2]
 8001b66:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <Display_02+0x40>)
 8001b68:	789a      	ldrb	r2, [r3, #2]
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	70da      	strb	r2, [r3, #3]
	TM1637_WriteData(0xC0, data, 4);
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2204      	movs	r2, #4
 8001b72:	0019      	movs	r1, r3
 8001b74:	20c0      	movs	r0, #192	@ 0xc0
 8001b76:	f7fe fd17 	bl	80005a8 <TM1637_WriteData>
	printf("displayed 02 \n\r");
 8001b7a:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <Display_02+0x44>)
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f002 fe39 	bl	80047f4 <iprintf>
}
 8001b82:	46c0      	nop			@ (mov r8, r8)
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b002      	add	sp, #8
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	080058e4 	.word	0x080058e4

08001b94 <Display_03>:

void Display_03(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
	uint8_t data[4] = {0x00, 0x00, digit_map[0], digit_map[3]};
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	705a      	strb	r2, [r3, #1]
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <Display_03+0x40>)
 8001ba8:	781a      	ldrb	r2, [r3, #0]
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	709a      	strb	r2, [r3, #2]
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <Display_03+0x40>)
 8001bb0:	78da      	ldrb	r2, [r3, #3]
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	70da      	strb	r2, [r3, #3]
	TM1637_WriteData(0xC0, data, 4);
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	2204      	movs	r2, #4
 8001bba:	0019      	movs	r1, r3
 8001bbc:	20c0      	movs	r0, #192	@ 0xc0
 8001bbe:	f7fe fcf3 	bl	80005a8 <TM1637_WriteData>
	printf("displayed 03 \n\r");
 8001bc2:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <Display_03+0x44>)
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f002 fe15 	bl	80047f4 <iprintf>
}
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b002      	add	sp, #8
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			@ (mov r8, r8)
 8001bd4:	20000004 	.word	0x20000004
 8001bd8:	080058f4 	.word	0x080058f4

08001bdc <Display_SC01>:

void Display_SC01(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
	uint8_t data[4] = {digit_map[13], digit_map[14], digit_map[0], digit_map[1]};
 8001be2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <Display_SC01+0x44>)
 8001be4:	7b5a      	ldrb	r2, [r3, #13]
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	4b0d      	ldr	r3, [pc, #52]	@ (8001c20 <Display_SC01+0x44>)
 8001bec:	7b9a      	ldrb	r2, [r3, #14]
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	705a      	strb	r2, [r3, #1]
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <Display_SC01+0x44>)
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	709a      	strb	r2, [r3, #2]
 8001bfa:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <Display_SC01+0x44>)
 8001bfc:	785a      	ldrb	r2, [r3, #1]
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	70da      	strb	r2, [r3, #3]
	TM1637_WriteData(0xC0, data, 4);
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2204      	movs	r2, #4
 8001c06:	0019      	movs	r1, r3
 8001c08:	20c0      	movs	r0, #192	@ 0xc0
 8001c0a:	f7fe fccd 	bl	80005a8 <TM1637_WriteData>
	printf("displayed SC01\n\r");
 8001c0e:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <Display_SC01+0x48>)
 8001c10:	0018      	movs	r0, r3
 8001c12:	f002 fdef 	bl	80047f4 <iprintf>
}
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b002      	add	sp, #8
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	20000004 	.word	0x20000004
 8001c24:	08005904 	.word	0x08005904

08001c28 <Display_SC02>:

void Display_SC02(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
	uint8_t data[4] = {digit_map[13], digit_map[14], digit_map[0], digit_map[2]};
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <Display_SC02+0x44>)
 8001c30:	7b5a      	ldrb	r2, [r3, #13]
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <Display_SC02+0x44>)
 8001c38:	7b9a      	ldrb	r2, [r3, #14]
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	705a      	strb	r2, [r3, #1]
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <Display_SC02+0x44>)
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	709a      	strb	r2, [r3, #2]
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <Display_SC02+0x44>)
 8001c48:	789a      	ldrb	r2, [r3, #2]
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	70da      	strb	r2, [r3, #3]
	TM1637_WriteData(0xC0, data, 4);
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	2204      	movs	r2, #4
 8001c52:	0019      	movs	r1, r3
 8001c54:	20c0      	movs	r0, #192	@ 0xc0
 8001c56:	f7fe fca7 	bl	80005a8 <TM1637_WriteData>
	printf("displayed SC02\n\r");
 8001c5a:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <Display_SC02+0x48>)
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f002 fdc9 	bl	80047f4 <iprintf>
}
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b002      	add	sp, #8
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	46c0      	nop			@ (mov r8, r8)
 8001c6c:	20000004 	.word	0x20000004
 8001c70:	08005918 	.word	0x08005918

08001c74 <Display_OFF>:

void Display_OFF(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
	uint8_t data[4] = {digit_map[16], digit_map[0], digit_map[17], digit_map[0]};
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb8 <Display_OFF+0x44>)
 8001c7c:	7c1a      	ldrb	r2, [r3, #16]
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	701a      	strb	r2, [r3, #0]
 8001c82:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <Display_OFF+0x44>)
 8001c84:	781a      	ldrb	r2, [r3, #0]
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	705a      	strb	r2, [r3, #1]
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <Display_OFF+0x44>)
 8001c8c:	7c5a      	ldrb	r2, [r3, #17]
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	709a      	strb	r2, [r3, #2]
 8001c92:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <Display_OFF+0x44>)
 8001c94:	781a      	ldrb	r2, [r3, #0]
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	70da      	strb	r2, [r3, #3]
	TM1637_WriteData(0xC0, data, 4);
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	20c0      	movs	r0, #192	@ 0xc0
 8001ca2:	f7fe fc81 	bl	80005a8 <TM1637_WriteData>
	printf("displayed HOLD, wait coin process still processing\n\r");
 8001ca6:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <Display_OFF+0x48>)
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f002 fda3 	bl	80047f4 <iprintf>
}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b002      	add	sp, #8
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	20000004 	.word	0x20000004
 8001cbc:	0800592c 	.word	0x0800592c

08001cc0 <DisplayDashes>:


void DisplayDashes(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
    uint8_t data[4] = {digit_map[12],digit_map[12], digit_map[12], digit_map[12]};
 8001cc6:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <DisplayDashes+0x64>)
 8001cc8:	7b1a      	ldrb	r2, [r3, #12]
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <DisplayDashes+0x64>)
 8001cd0:	7b1a      	ldrb	r2, [r3, #12]
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	705a      	strb	r2, [r3, #1]
 8001cd6:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <DisplayDashes+0x64>)
 8001cd8:	7b1a      	ldrb	r2, [r3, #12]
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	709a      	strb	r2, [r3, #2]
 8001cde:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <DisplayDashes+0x64>)
 8001ce0:	7b1a      	ldrb	r2, [r3, #12]
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	70da      	strb	r2, [r3, #3]
    TM1637_WriteData(0xC0, data, 4);
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	2204      	movs	r2, #4
 8001cea:	0019      	movs	r1, r3
 8001cec:	20c0      	movs	r0, #192	@ 0xc0
 8001cee:	f7fe fc5b 	bl	80005a8 <TM1637_WriteData>
    //printf("Display Dashes\n\r");
    HAL_GPIO_WritePin(SIGNAL_4_GPIO_Port, SIGNAL_4_Pin, GPIO_PIN_SET);
 8001cf2:	2390      	movs	r3, #144	@ 0x90
 8001cf4:	05db      	lsls	r3, r3, #23
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2108      	movs	r1, #8
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f001 f8f2 	bl	8002ee4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_SET);
 8001d00:	2390      	movs	r3, #144	@ 0x90
 8001d02:	05db      	lsls	r3, r3, #23
 8001d04:	2201      	movs	r2, #1
 8001d06:	2110      	movs	r1, #16
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f001 f8eb 	bl	8002ee4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SIGNAL_6_GPIO_Port, SIGNAL_6_Pin, GPIO_PIN_SET);
 8001d0e:	2390      	movs	r3, #144	@ 0x90
 8001d10:	05db      	lsls	r3, r3, #23
 8001d12:	2201      	movs	r2, #1
 8001d14:	2120      	movs	r1, #32
 8001d16:	0018      	movs	r0, r3
 8001d18:	f001 f8e4 	bl	8002ee4 <HAL_GPIO_WritePin>
}
 8001d1c:	46c0      	nop			@ (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b002      	add	sp, #8
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000004 	.word	0x20000004

08001d28 <TM1637_DisplayOFF>:

void TM1637_DisplayOFF(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
	uint8_t data[4] = {0x00, digit_map[0], digit_map[10], digit_map[10]};
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <TM1637_DisplayOFF+0x40>)
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	705a      	strb	r2, [r3, #1]
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <TM1637_DisplayOFF+0x40>)
 8001d3e:	7a9a      	ldrb	r2, [r3, #10]
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	709a      	strb	r2, [r3, #2]
 8001d44:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <TM1637_DisplayOFF+0x40>)
 8001d46:	7a9a      	ldrb	r2, [r3, #10]
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	70da      	strb	r2, [r3, #3]
	TM1637_WriteData(0xC0, data, 4);
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	2204      	movs	r2, #4
 8001d50:	0019      	movs	r1, r3
 8001d52:	20c0      	movs	r0, #192	@ 0xc0
 8001d54:	f7fe fc28 	bl	80005a8 <TM1637_WriteData>
	printf("Displayed OFF");
 8001d58:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <TM1637_DisplayOFF+0x44>)
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f002 fd4a 	bl	80047f4 <iprintf>
}
 8001d60:	46c0      	nop			@ (mov r8, r8)
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b002      	add	sp, #8
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	08005964 	.word	0x08005964

08001d70 <__io_putchar>:

#ifdef __GNUC__
#define UART_printf   int __io_putchar(int ch)
UART_printf
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001d78:	2301      	movs	r3, #1
 8001d7a:	425b      	negs	r3, r3
 8001d7c:	1d39      	adds	r1, r7, #4
 8001d7e:	4804      	ldr	r0, [pc, #16]	@ (8001d90 <__io_putchar+0x20>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	f002 f863 	bl	8003e4c <HAL_UART_Transmit>
	return ch;
 8001d86:	687b      	ldr	r3, [r7, #4]
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b002      	add	sp, #8
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000124 	.word	0x20000124

08001d94 <HAL_GPIO_EXTI_Callback>:
#endif

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	1dbb      	adds	r3, r7, #6
 8001d9e:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == COIN_Pin)
 8001da0:	1dbb      	adds	r3, r7, #6
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	2b80      	cmp	r3, #128	@ 0x80
 8001da6:	d124      	bne.n	8001df2 <HAL_GPIO_EXTI_Callback+0x5e>
	{
		uint32_t current_time = HAL_GetTick();
 8001da8:	f000 fa6e 	bl	8002288 <HAL_GetTick>
 8001dac:	0003      	movs	r3, r0
 8001dae:	60fb      	str	r3, [r7, #12]

		if ((current_time - last_pulse_time) > 50)
 8001db0:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_GPIO_EXTI_Callback+0x68>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b32      	cmp	r3, #50	@ 0x32
 8001dba:	d91a      	bls.n	8001df2 <HAL_GPIO_EXTI_Callback+0x5e>
		{
			last_pulse_time = current_time;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <HAL_GPIO_EXTI_Callback+0x68>)
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	601a      	str	r2, [r3, #0]
			if (pulse_interrupt_Flag == 0)
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d103      	bne.n	8001dd4 <HAL_GPIO_EXTI_Callback+0x40>
			{
				coin_pulse = 1;
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <HAL_GPIO_EXTI_Callback+0x70>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e006      	b.n	8001de2 <HAL_GPIO_EXTI_Callback+0x4e>
			}
			else
			{
				coin_pulse++;
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_GPIO_EXTI_Callback+0x70>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_GPIO_EXTI_Callback+0x70>)
 8001de0:	701a      	strb	r2, [r3, #0]
			}
			pulse_interrupt_Flag = 1;
 8001de2:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
			pulse_start_time = HAL_GetTick();
 8001de8:	f000 fa4e 	bl	8002288 <HAL_GetTick>
 8001dec:	0002      	movs	r2, r0
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_GPIO_EXTI_Callback+0x74>)
 8001df0:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b004      	add	sp, #16
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			@ (mov r8, r8)
 8001dfc:	200001b8 	.word	0x200001b8
 8001e00:	200001ad 	.word	0x200001ad
 8001e04:	200001bc 	.word	0x200001bc
 8001e08:	200001b4 	.word	0x200001b4

08001e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e10:	b672      	cpsid	i
}
 8001e12:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e14:	46c0      	nop			@ (mov r8, r8)
 8001e16:	e7fd      	b.n	8001e14 <Error_Handler+0x8>

08001e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <HAL_MspInit+0x44>)
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <HAL_MspInit+0x44>)
 8001e24:	2101      	movs	r1, #1
 8001e26:	430a      	orrs	r2, r1
 8001e28:	619a      	str	r2, [r3, #24]
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <HAL_MspInit+0x44>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4013      	ands	r3, r2
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <HAL_MspInit+0x44>)
 8001e38:	69da      	ldr	r2, [r3, #28]
 8001e3a:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <HAL_MspInit+0x44>)
 8001e3c:	2180      	movs	r1, #128	@ 0x80
 8001e3e:	0549      	lsls	r1, r1, #21
 8001e40:	430a      	orrs	r2, r1
 8001e42:	61da      	str	r2, [r3, #28]
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <HAL_MspInit+0x44>)
 8001e46:	69da      	ldr	r2, [r3, #28]
 8001e48:	2380      	movs	r3, #128	@ 0x80
 8001e4a:	055b      	lsls	r3, r3, #21
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b002      	add	sp, #8
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			@ (mov r8, r8)
 8001e5c:	40021000 	.word	0x40021000

08001e60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b08b      	sub	sp, #44	@ 0x2c
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	2414      	movs	r4, #20
 8001e6a:	193b      	adds	r3, r7, r4
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	2314      	movs	r3, #20
 8001e70:	001a      	movs	r2, r3
 8001e72:	2100      	movs	r1, #0
 8001e74:	f002 fe1a 	bl	8004aac <memset>
  if(hadc->Instance==ADC1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a18      	ldr	r2, [pc, #96]	@ (8001ee0 <HAL_ADC_MspInit+0x80>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d12a      	bne.n	8001ed8 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e82:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <HAL_ADC_MspInit+0x84>)
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <HAL_ADC_MspInit+0x84>)
 8001e88:	2180      	movs	r1, #128	@ 0x80
 8001e8a:	0089      	lsls	r1, r1, #2
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	619a      	str	r2, [r3, #24]
 8001e90:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <HAL_ADC_MspInit+0x84>)
 8001e92:	699a      	ldr	r2, [r3, #24]
 8001e94:	2380      	movs	r3, #128	@ 0x80
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <HAL_ADC_MspInit+0x84>)
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	4b10      	ldr	r3, [pc, #64]	@ (8001ee4 <HAL_ADC_MspInit+0x84>)
 8001ea4:	2180      	movs	r1, #128	@ 0x80
 8001ea6:	02c9      	lsls	r1, r1, #11
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	615a      	str	r2, [r3, #20]
 8001eac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee4 <HAL_ADC_MspInit+0x84>)
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	02db      	lsls	r3, r3, #11
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = ADC_ADJ_Pin;
 8001eba:	193b      	adds	r3, r7, r4
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec0:	193b      	adds	r3, r7, r4
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	193b      	adds	r3, r7, r4
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_ADJ_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	193b      	adds	r3, r7, r4
 8001ece:	4a06      	ldr	r2, [pc, #24]	@ (8001ee8 <HAL_ADC_MspInit+0x88>)
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	0010      	movs	r0, r2
 8001ed4:	f000 fe96 	bl	8002c04 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ed8:	46c0      	nop			@ (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b00b      	add	sp, #44	@ 0x2c
 8001ede:	bd90      	pop	{r4, r7, pc}
 8001ee0:	40012400 	.word	0x40012400
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	48000400 	.word	0x48000400

08001eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f30 <HAL_TIM_Base_MspInit+0x44>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d113      	bne.n	8001f26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001efe:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <HAL_TIM_Base_MspInit+0x48>)
 8001f00:	69da      	ldr	r2, [r3, #28]
 8001f02:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <HAL_TIM_Base_MspInit+0x48>)
 8001f04:	2110      	movs	r1, #16
 8001f06:	430a      	orrs	r2, r1
 8001f08:	61da      	str	r2, [r3, #28]
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_TIM_Base_MspInit+0x48>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	2210      	movs	r2, #16
 8001f10:	4013      	ands	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	2011      	movs	r0, #17
 8001f1c:	f000 fe40 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001f20:	2011      	movs	r0, #17
 8001f22:	f000 fe52 	bl	8002bca <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001f26:	46c0      	nop			@ (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b004      	add	sp, #16
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	40001000 	.word	0x40001000
 8001f34:	40021000 	.word	0x40021000

08001f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b08b      	sub	sp, #44	@ 0x2c
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	2414      	movs	r4, #20
 8001f42:	193b      	adds	r3, r7, r4
 8001f44:	0018      	movs	r0, r3
 8001f46:	2314      	movs	r3, #20
 8001f48:	001a      	movs	r2, r3
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	f002 fdae 	bl	8004aac <memset>
  if(huart->Instance==USART1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1d      	ldr	r2, [pc, #116]	@ (8001fcc <HAL_UART_MspInit+0x94>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d133      	bne.n	8001fc2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <HAL_UART_MspInit+0x98>)
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd0 <HAL_UART_MspInit+0x98>)
 8001f60:	2180      	movs	r1, #128	@ 0x80
 8001f62:	01c9      	lsls	r1, r1, #7
 8001f64:	430a      	orrs	r2, r1
 8001f66:	619a      	str	r2, [r3, #24]
 8001f68:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <HAL_UART_MspInit+0x98>)
 8001f6a:	699a      	ldr	r2, [r3, #24]
 8001f6c:	2380      	movs	r3, #128	@ 0x80
 8001f6e:	01db      	lsls	r3, r3, #7
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <HAL_UART_MspInit+0x98>)
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <HAL_UART_MspInit+0x98>)
 8001f7c:	2180      	movs	r1, #128	@ 0x80
 8001f7e:	0289      	lsls	r1, r1, #10
 8001f80:	430a      	orrs	r2, r1
 8001f82:	615a      	str	r2, [r3, #20]
 8001f84:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <HAL_UART_MspInit+0x98>)
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	2380      	movs	r3, #128	@ 0x80
 8001f8a:	029b      	lsls	r3, r3, #10
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f92:	193b      	adds	r3, r7, r4
 8001f94:	22c0      	movs	r2, #192	@ 0xc0
 8001f96:	00d2      	lsls	r2, r2, #3
 8001f98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	0021      	movs	r1, r4
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	187b      	adds	r3, r7, r1
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fa8:	187b      	adds	r3, r7, r1
 8001faa:	2203      	movs	r2, #3
 8001fac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001fae:	187b      	adds	r3, r7, r1
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	187a      	adds	r2, r7, r1
 8001fb6:	2390      	movs	r3, #144	@ 0x90
 8001fb8:	05db      	lsls	r3, r3, #23
 8001fba:	0011      	movs	r1, r2
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f000 fe21 	bl	8002c04 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b00b      	add	sp, #44	@ 0x2c
 8001fc8:	bd90      	pop	{r4, r7, pc}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	40013800 	.word	0x40013800
 8001fd0:	40021000 	.word	0x40021000

08001fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fd8:	46c0      	nop			@ (mov r8, r8)
 8001fda:	e7fd      	b.n	8001fd8 <NMI_Handler+0x4>

08001fdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe0:	46c0      	nop			@ (mov r8, r8)
 8001fe2:	e7fd      	b.n	8001fe0 <HardFault_Handler+0x4>

08001fe4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001fe8:	46c0      	nop			@ (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ffc:	f000 f932 	bl	8002264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  current_time_ms++;
 8002000:	4b03      	ldr	r3, [pc, #12]	@ (8002010 <SysTick_Handler+0x18>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	4b02      	ldr	r3, [pc, #8]	@ (8002010 <SysTick_Handler+0x18>)
 8002008:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200001b0 	.word	0x200001b0

08002014 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COIN_Pin);
 8002018:	2080      	movs	r0, #128	@ 0x80
 800201a:	f000 ff81 	bl	8002f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <TIM6_IRQHandler+0x14>)
 800202a:	0018      	movs	r0, r3
 800202c:	f001 fd10 	bl	8003a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002030:	46c0      	nop			@ (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	200000dc 	.word	0x200000dc

0800203c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	e00a      	b.n	8002064 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800204e:	e000      	b.n	8002052 <_read+0x16>
 8002050:	bf00      	nop
 8002052:	0001      	movs	r1, r0
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	60ba      	str	r2, [r7, #8]
 800205a:	b2ca      	uxtb	r2, r1
 800205c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3301      	adds	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	429a      	cmp	r2, r3
 800206a:	dbf0      	blt.n	800204e <_read+0x12>
  }

  return len;
 800206c:	687b      	ldr	r3, [r7, #4]
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b006      	add	sp, #24
 8002074:	bd80      	pop	{r7, pc}

08002076 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	e009      	b.n	800209c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	60ba      	str	r2, [r7, #8]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	0018      	movs	r0, r3
 8002092:	f7ff fe6d 	bl	8001d70 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	3301      	adds	r3, #1
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	dbf1      	blt.n	8002088 <_write+0x12>
  }
  return len;
 80020a4:	687b      	ldr	r3, [r7, #4]
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b006      	add	sp, #24
 80020ac:	bd80      	pop	{r7, pc}

080020ae <_close>:

int _close(int file)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020b6:	2301      	movs	r3, #1
 80020b8:	425b      	negs	r3, r3
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b002      	add	sp, #8
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2280      	movs	r2, #128	@ 0x80
 80020d0:	0192      	lsls	r2, r2, #6
 80020d2:	605a      	str	r2, [r3, #4]
  return 0;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	b002      	add	sp, #8
 80020dc:	bd80      	pop	{r7, pc}

080020de <_isatty>:

int _isatty(int file)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020e6:	2301      	movs	r3, #1
}
 80020e8:	0018      	movs	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b002      	add	sp, #8
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b004      	add	sp, #16
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	@ (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800211c:	4b13      	ldr	r3, [pc, #76]	@ (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	@ (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	@ (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	18d3      	adds	r3, r2, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002138:	f002 fd0e 	bl	8004b58 <__errno>
 800213c:	0003      	movs	r3, r0
 800213e:	220c      	movs	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002142:	2301      	movs	r3, #1
 8002144:	425b      	negs	r3, r3
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	@ (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	@ (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	18d2      	adds	r2, r2, r3
 8002156:	4b05      	ldr	r3, [pc, #20]	@ (800216c <_sbrk+0x64>)
 8002158:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	0018      	movs	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	b006      	add	sp, #24
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20002000 	.word	0x20002000
 8002168:	00000400 	.word	0x00000400
 800216c:	200001d4 	.word	0x200001d4
 8002170:	20000328 	.word	0x20000328

08002174 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002178:	46c0      	nop			@ (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002180:	480d      	ldr	r0, [pc, #52]	@ (80021b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002182:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002184:	f7ff fff6 	bl	8002174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002188:	480c      	ldr	r0, [pc, #48]	@ (80021bc <LoopForever+0x6>)
  ldr r1, =_edata
 800218a:	490d      	ldr	r1, [pc, #52]	@ (80021c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800218c:	4a0d      	ldr	r2, [pc, #52]	@ (80021c4 <LoopForever+0xe>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002190:	e002      	b.n	8002198 <LoopCopyDataInit>

08002192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002196:	3304      	adds	r3, #4

08002198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800219c:	d3f9      	bcc.n	8002192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219e:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021a0:	4c0a      	ldr	r4, [pc, #40]	@ (80021cc <LoopForever+0x16>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a4:	e001      	b.n	80021aa <LoopFillZerobss>

080021a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a8:	3204      	adds	r2, #4

080021aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ac:	d3fb      	bcc.n	80021a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021ae:	f002 fcd9 	bl	8004b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021b2:	f7fe fa37 	bl	8000624 <main>

080021b6 <LoopForever>:

LoopForever:
    b LoopForever
 80021b6:	e7fe      	b.n	80021b6 <LoopForever>
  ldr   r0, =_estack
 80021b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80021bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80021c4:	08005a68 	.word	0x08005a68
  ldr r2, =_sbss
 80021c8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80021cc:	20000328 	.word	0x20000328

080021d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021d0:	e7fe      	b.n	80021d0 <ADC1_IRQHandler>
	...

080021d4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d8:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <HAL_Init+0x24>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <HAL_Init+0x24>)
 80021de:	2110      	movs	r1, #16
 80021e0:	430a      	orrs	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80021e4:	2003      	movs	r0, #3
 80021e6:	f000 f809 	bl	80021fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ea:	f7ff fe15 	bl	8001e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	40022000 	.word	0x40022000

080021fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002204:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <HAL_InitTick+0x5c>)
 8002206:	681c      	ldr	r4, [r3, #0]
 8002208:	4b14      	ldr	r3, [pc, #80]	@ (800225c <HAL_InitTick+0x60>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	0019      	movs	r1, r3
 800220e:	23fa      	movs	r3, #250	@ 0xfa
 8002210:	0098      	lsls	r0, r3, #2
 8002212:	f7fd ff83 	bl	800011c <__udivsi3>
 8002216:	0003      	movs	r3, r0
 8002218:	0019      	movs	r1, r3
 800221a:	0020      	movs	r0, r4
 800221c:	f7fd ff7e 	bl	800011c <__udivsi3>
 8002220:	0003      	movs	r3, r0
 8002222:	0018      	movs	r0, r3
 8002224:	f000 fce1 	bl	8002bea <HAL_SYSTICK_Config>
 8002228:	1e03      	subs	r3, r0, #0
 800222a:	d001      	beq.n	8002230 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e00f      	b.n	8002250 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d80b      	bhi.n	800224e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	2301      	movs	r3, #1
 800223a:	425b      	negs	r3, r3
 800223c:	2200      	movs	r2, #0
 800223e:	0018      	movs	r0, r3
 8002240:	f000 fcae 	bl	8002ba0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_InitTick+0x64>)
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	e000      	b.n	8002250 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b003      	add	sp, #12
 8002256:	bd90      	pop	{r4, r7, pc}
 8002258:	20000018 	.word	0x20000018
 800225c:	20000020 	.word	0x20000020
 8002260:	2000001c 	.word	0x2000001c

08002264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002268:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <HAL_IncTick+0x1c>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	001a      	movs	r2, r3
 800226e:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <HAL_IncTick+0x20>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	18d2      	adds	r2, r2, r3
 8002274:	4b03      	ldr	r3, [pc, #12]	@ (8002284 <HAL_IncTick+0x20>)
 8002276:	601a      	str	r2, [r3, #0]
}
 8002278:	46c0      	nop			@ (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	20000020 	.word	0x20000020
 8002284:	200001d8 	.word	0x200001d8

08002288 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  return uwTick;
 800228c:	4b02      	ldr	r3, [pc, #8]	@ (8002298 <HAL_GetTick+0x10>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			@ (mov r8, r8)
 8002298:	200001d8 	.word	0x200001d8

0800229c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff fff0 	bl	8002288 <HAL_GetTick>
 80022a8:	0003      	movs	r3, r0
 80022aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3301      	adds	r3, #1
 80022b4:	d005      	beq.n	80022c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b6:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <HAL_Delay+0x44>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	001a      	movs	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	189b      	adds	r3, r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	f7ff ffe0 	bl	8002288 <HAL_GetTick>
 80022c8:	0002      	movs	r2, r0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d8f7      	bhi.n	80022c4 <HAL_Delay+0x28>
  {
  }
}
 80022d4:	46c0      	nop			@ (mov r8, r8)
 80022d6:	46c0      	nop			@ (mov r8, r8)
 80022d8:	46bd      	mov	sp, r7
 80022da:	b004      	add	sp, #16
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	20000020 	.word	0x20000020

080022e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ec:	230f      	movs	r3, #15
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e125      	b.n	800254e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10a      	bne.n	8002320 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2234      	movs	r2, #52	@ 0x34
 8002314:	2100      	movs	r1, #0
 8002316:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	0018      	movs	r0, r3
 800231c:	f7ff fda0 	bl	8001e60 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002324:	2210      	movs	r2, #16
 8002326:	4013      	ands	r3, r2
 8002328:	d000      	beq.n	800232c <HAL_ADC_Init+0x48>
 800232a:	e103      	b.n	8002534 <HAL_ADC_Init+0x250>
 800232c:	230f      	movs	r3, #15
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d000      	beq.n	8002338 <HAL_ADC_Init+0x54>
 8002336:	e0fd      	b.n	8002534 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2204      	movs	r2, #4
 8002340:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002342:	d000      	beq.n	8002346 <HAL_ADC_Init+0x62>
 8002344:	e0f6      	b.n	8002534 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234a:	4a83      	ldr	r2, [pc, #524]	@ (8002558 <HAL_ADC_Init+0x274>)
 800234c:	4013      	ands	r3, r2
 800234e:	2202      	movs	r2, #2
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2203      	movs	r2, #3
 800235e:	4013      	ands	r3, r2
 8002360:	2b01      	cmp	r3, #1
 8002362:	d112      	bne.n	800238a <HAL_ADC_Init+0xa6>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2201      	movs	r2, #1
 800236c:	4013      	ands	r3, r2
 800236e:	2b01      	cmp	r3, #1
 8002370:	d009      	beq.n	8002386 <HAL_ADC_Init+0xa2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	2380      	movs	r3, #128	@ 0x80
 800237a:	021b      	lsls	r3, r3, #8
 800237c:	401a      	ands	r2, r3
 800237e:	2380      	movs	r3, #128	@ 0x80
 8002380:	021b      	lsls	r3, r3, #8
 8002382:	429a      	cmp	r2, r3
 8002384:	d101      	bne.n	800238a <HAL_ADC_Init+0xa6>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_ADC_Init+0xa8>
 800238a:	2300      	movs	r3, #0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d116      	bne.n	80023be <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2218      	movs	r2, #24
 8002398:	4393      	bics	r3, r2
 800239a:	0019      	movs	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	0899      	lsrs	r1, r3, #2
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4964      	ldr	r1, [pc, #400]	@ (800255c <HAL_ADC_Init+0x278>)
 80023ca:	400a      	ands	r2, r1
 80023cc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7e1b      	ldrb	r3, [r3, #24]
 80023d2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7e5b      	ldrb	r3, [r3, #25]
 80023d8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023da:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	7e9b      	ldrb	r3, [r3, #26]
 80023e0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80023e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d002      	beq.n	80023f2 <HAL_ADC_Init+0x10e>
 80023ec:	2380      	movs	r3, #128	@ 0x80
 80023ee:	015b      	lsls	r3, r3, #5
 80023f0:	e000      	b.n	80023f4 <HAL_ADC_Init+0x110>
 80023f2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80023f4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80023fa:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d101      	bne.n	8002408 <HAL_ADC_Init+0x124>
 8002404:	2304      	movs	r3, #4
 8002406:	e000      	b.n	800240a <HAL_ADC_Init+0x126>
 8002408:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800240a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2124      	movs	r1, #36	@ 0x24
 8002410:	5c5b      	ldrb	r3, [r3, r1]
 8002412:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002414:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4313      	orrs	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7edb      	ldrb	r3, [r3, #27]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d115      	bne.n	8002450 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7e9b      	ldrb	r3, [r3, #26]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d105      	bne.n	8002438 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2280      	movs	r2, #128	@ 0x80
 8002430:	0252      	lsls	r2, r2, #9
 8002432:	4313      	orrs	r3, r2
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	e00b      	b.n	8002450 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243c:	2220      	movs	r2, #32
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002448:	2201      	movs	r2, #1
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69da      	ldr	r2, [r3, #28]
 8002454:	23c2      	movs	r3, #194	@ 0xc2
 8002456:	33ff      	adds	r3, #255	@ 0xff
 8002458:	429a      	cmp	r2, r3
 800245a:	d007      	beq.n	800246c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002464:	4313      	orrs	r3, r2
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	4313      	orrs	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68d9      	ldr	r1, [r3, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002480:	2380      	movs	r3, #128	@ 0x80
 8002482:	055b      	lsls	r3, r3, #21
 8002484:	429a      	cmp	r2, r3
 8002486:	d01b      	beq.n	80024c0 <HAL_ADC_Init+0x1dc>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248c:	2b01      	cmp	r3, #1
 800248e:	d017      	beq.n	80024c0 <HAL_ADC_Init+0x1dc>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	2b02      	cmp	r3, #2
 8002496:	d013      	beq.n	80024c0 <HAL_ADC_Init+0x1dc>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249c:	2b03      	cmp	r3, #3
 800249e:	d00f      	beq.n	80024c0 <HAL_ADC_Init+0x1dc>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d00b      	beq.n	80024c0 <HAL_ADC_Init+0x1dc>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ac:	2b05      	cmp	r3, #5
 80024ae:	d007      	beq.n	80024c0 <HAL_ADC_Init+0x1dc>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	2b06      	cmp	r3, #6
 80024b6:	d003      	beq.n	80024c0 <HAL_ADC_Init+0x1dc>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024bc:	2b07      	cmp	r3, #7
 80024be:	d112      	bne.n	80024e6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2107      	movs	r1, #7
 80024cc:	438a      	bics	r2, r1
 80024ce:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6959      	ldr	r1, [r3, #20]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024da:	2207      	movs	r2, #7
 80024dc:	401a      	ands	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002560 <HAL_ADC_Init+0x27c>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d10b      	bne.n	800250e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002500:	2203      	movs	r2, #3
 8002502:	4393      	bics	r3, r2
 8002504:	2201      	movs	r2, #1
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800250c:	e01c      	b.n	8002548 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002512:	2212      	movs	r2, #18
 8002514:	4393      	bics	r3, r2
 8002516:	2210      	movs	r2, #16
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002522:	2201      	movs	r2, #1
 8002524:	431a      	orrs	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800252a:	230f      	movs	r3, #15
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002532:	e009      	b.n	8002548 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002538:	2210      	movs	r2, #16
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002540:	230f      	movs	r3, #15
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002548:	230f      	movs	r3, #15
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	781b      	ldrb	r3, [r3, #0]
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	b004      	add	sp, #16
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	fffffefd 	.word	0xfffffefd
 800255c:	fffe0219 	.word	0xfffe0219
 8002560:	833fffe7 	.word	0x833fffe7

08002564 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800256c:	230f      	movs	r3, #15
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2204      	movs	r2, #4
 800257c:	4013      	ands	r3, r2
 800257e:	d138      	bne.n	80025f2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2234      	movs	r2, #52	@ 0x34
 8002584:	5c9b      	ldrb	r3, [r3, r2]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_ADC_Start+0x2a>
 800258a:	2302      	movs	r3, #2
 800258c:	e038      	b.n	8002600 <HAL_ADC_Start+0x9c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2234      	movs	r2, #52	@ 0x34
 8002592:	2101      	movs	r1, #1
 8002594:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	7e5b      	ldrb	r3, [r3, #25]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d007      	beq.n	80025ae <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800259e:	230f      	movs	r3, #15
 80025a0:	18fc      	adds	r4, r7, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	0018      	movs	r0, r3
 80025a6:	f000 f9cb 	bl	8002940 <ADC_Enable>
 80025aa:	0003      	movs	r3, r0
 80025ac:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025ae:	230f      	movs	r3, #15
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d120      	bne.n	80025fa <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025bc:	4a12      	ldr	r2, [pc, #72]	@ (8002608 <HAL_ADC_Start+0xa4>)
 80025be:	4013      	ands	r3, r2
 80025c0:	2280      	movs	r2, #128	@ 0x80
 80025c2:	0052      	lsls	r2, r2, #1
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2234      	movs	r2, #52	@ 0x34
 80025d4:	2100      	movs	r1, #0
 80025d6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	221c      	movs	r2, #28
 80025de:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2104      	movs	r1, #4
 80025ec:	430a      	orrs	r2, r1
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	e003      	b.n	80025fa <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025f2:	230f      	movs	r3, #15
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	2202      	movs	r2, #2
 80025f8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025fa:	230f      	movs	r3, #15
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	781b      	ldrb	r3, [r3, #0]
}
 8002600:	0018      	movs	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	b005      	add	sp, #20
 8002606:	bd90      	pop	{r4, r7, pc}
 8002608:	fffff0fe 	.word	0xfffff0fe

0800260c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	2b08      	cmp	r3, #8
 800261c:	d102      	bne.n	8002624 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800261e:	2308      	movs	r3, #8
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	e014      	b.n	800264e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	4013      	ands	r3, r2
 800262e:	2b01      	cmp	r3, #1
 8002630:	d10b      	bne.n	800264a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002636:	2220      	movs	r2, #32
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2234      	movs	r2, #52	@ 0x34
 8002642:	2100      	movs	r1, #0
 8002644:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e071      	b.n	800272e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800264a:	230c      	movs	r3, #12
 800264c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800264e:	f7ff fe1b 	bl	8002288 <HAL_GetTick>
 8002652:	0003      	movs	r3, r0
 8002654:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002656:	e01f      	b.n	8002698 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	3301      	adds	r3, #1
 800265c:	d01c      	beq.n	8002698 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <HAL_ADC_PollForConversion+0x68>
 8002664:	f7ff fe10 	bl	8002288 <HAL_GetTick>
 8002668:	0002      	movs	r2, r0
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d211      	bcs.n	8002698 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4013      	ands	r3, r2
 800267e:	d10b      	bne.n	8002698 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002684:	2204      	movs	r2, #4
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2234      	movs	r2, #52	@ 0x34
 8002690:	2100      	movs	r1, #0
 8002692:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e04a      	b.n	800272e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4013      	ands	r3, r2
 80026a2:	d0d9      	beq.n	8002658 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a8:	2280      	movs	r2, #128	@ 0x80
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	23c0      	movs	r3, #192	@ 0xc0
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	4013      	ands	r3, r2
 80026be:	d12d      	bne.n	800271c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d129      	bne.n	800271c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2208      	movs	r2, #8
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d122      	bne.n	800271c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2204      	movs	r2, #4
 80026de:	4013      	ands	r3, r2
 80026e0:	d110      	bne.n	8002704 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	210c      	movs	r1, #12
 80026ee:	438a      	bics	r2, r1
 80026f0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f6:	4a10      	ldr	r2, [pc, #64]	@ (8002738 <HAL_ADC_PollForConversion+0x12c>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	2201      	movs	r2, #1
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	639a      	str	r2, [r3, #56]	@ 0x38
 8002702:	e00b      	b.n	800271c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002708:	2220      	movs	r2, #32
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002714:	2201      	movs	r2, #1
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	7e1b      	ldrb	r3, [r3, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d103      	bne.n	800272c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	220c      	movs	r2, #12
 800272a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b004      	add	sp, #16
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			@ (mov r8, r8)
 8002738:	fffffefe 	.word	0xfffffefe

0800273c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b002      	add	sp, #8
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800275e:	230f      	movs	r3, #15
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	2200      	movs	r2, #0
 8002764:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800276e:	2380      	movs	r3, #128	@ 0x80
 8002770:	055b      	lsls	r3, r3, #21
 8002772:	429a      	cmp	r2, r3
 8002774:	d011      	beq.n	800279a <HAL_ADC_ConfigChannel+0x46>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277a:	2b01      	cmp	r3, #1
 800277c:	d00d      	beq.n	800279a <HAL_ADC_ConfigChannel+0x46>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002782:	2b02      	cmp	r3, #2
 8002784:	d009      	beq.n	800279a <HAL_ADC_ConfigChannel+0x46>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278a:	2b03      	cmp	r3, #3
 800278c:	d005      	beq.n	800279a <HAL_ADC_ConfigChannel+0x46>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002792:	2b04      	cmp	r3, #4
 8002794:	d001      	beq.n	800279a <HAL_ADC_ConfigChannel+0x46>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2234      	movs	r2, #52	@ 0x34
 800279e:	5c9b      	ldrb	r3, [r3, r2]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x54>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e0bb      	b.n	8002920 <HAL_ADC_ConfigChannel+0x1cc>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2234      	movs	r2, #52	@ 0x34
 80027ac:	2101      	movs	r1, #1
 80027ae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2204      	movs	r2, #4
 80027b8:	4013      	ands	r3, r2
 80027ba:	d000      	beq.n	80027be <HAL_ADC_ConfigChannel+0x6a>
 80027bc:	e09f      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4a59      	ldr	r2, [pc, #356]	@ (8002928 <HAL_ADC_ConfigChannel+0x1d4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d100      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x76>
 80027c8:	e077      	b.n	80028ba <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2201      	movs	r2, #1
 80027d6:	409a      	lsls	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027e4:	2380      	movs	r3, #128	@ 0x80
 80027e6:	055b      	lsls	r3, r3, #21
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d037      	beq.n	800285c <HAL_ADC_ConfigChannel+0x108>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d033      	beq.n	800285c <HAL_ADC_ConfigChannel+0x108>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d02f      	beq.n	800285c <HAL_ADC_ConfigChannel+0x108>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	2b03      	cmp	r3, #3
 8002802:	d02b      	beq.n	800285c <HAL_ADC_ConfigChannel+0x108>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002808:	2b04      	cmp	r3, #4
 800280a:	d027      	beq.n	800285c <HAL_ADC_ConfigChannel+0x108>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002810:	2b05      	cmp	r3, #5
 8002812:	d023      	beq.n	800285c <HAL_ADC_ConfigChannel+0x108>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002818:	2b06      	cmp	r3, #6
 800281a:	d01f      	beq.n	800285c <HAL_ADC_ConfigChannel+0x108>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002820:	2b07      	cmp	r3, #7
 8002822:	d01b      	beq.n	800285c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	2107      	movs	r1, #7
 8002830:	400b      	ands	r3, r1
 8002832:	429a      	cmp	r2, r3
 8002834:	d012      	beq.n	800285c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2107      	movs	r1, #7
 8002842:	438a      	bics	r2, r1
 8002844:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6959      	ldr	r1, [r3, #20]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2207      	movs	r2, #7
 8002852:	401a      	ands	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b10      	cmp	r3, #16
 8002862:	d003      	beq.n	800286c <HAL_ADC_ConfigChannel+0x118>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b11      	cmp	r3, #17
 800286a:	d152      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800286c:	4b2f      	ldr	r3, [pc, #188]	@ (800292c <HAL_ADC_ConfigChannel+0x1d8>)
 800286e:	6819      	ldr	r1, [r3, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b10      	cmp	r3, #16
 8002876:	d102      	bne.n	800287e <HAL_ADC_ConfigChannel+0x12a>
 8002878:	2380      	movs	r3, #128	@ 0x80
 800287a:	041b      	lsls	r3, r3, #16
 800287c:	e001      	b.n	8002882 <HAL_ADC_ConfigChannel+0x12e>
 800287e:	2380      	movs	r3, #128	@ 0x80
 8002880:	03db      	lsls	r3, r3, #15
 8002882:	4a2a      	ldr	r2, [pc, #168]	@ (800292c <HAL_ADC_ConfigChannel+0x1d8>)
 8002884:	430b      	orrs	r3, r1
 8002886:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b10      	cmp	r3, #16
 800288e:	d140      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002890:	4b27      	ldr	r3, [pc, #156]	@ (8002930 <HAL_ADC_ConfigChannel+0x1dc>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4927      	ldr	r1, [pc, #156]	@ (8002934 <HAL_ADC_ConfigChannel+0x1e0>)
 8002896:	0018      	movs	r0, r3
 8002898:	f7fd fc40 	bl	800011c <__udivsi3>
 800289c:	0003      	movs	r3, r0
 800289e:	001a      	movs	r2, r3
 80028a0:	0013      	movs	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	189b      	adds	r3, r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028aa:	e002      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f9      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x158>
 80028b8:	e02b      	b.n	8002912 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2101      	movs	r1, #1
 80028c6:	4099      	lsls	r1, r3
 80028c8:	000b      	movs	r3, r1
 80028ca:	43d9      	mvns	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	400a      	ands	r2, r1
 80028d2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d003      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0x190>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b11      	cmp	r3, #17
 80028e2:	d116      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80028e4:	4b11      	ldr	r3, [pc, #68]	@ (800292c <HAL_ADC_ConfigChannel+0x1d8>)
 80028e6:	6819      	ldr	r1, [r3, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b10      	cmp	r3, #16
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x1a0>
 80028f0:	4a11      	ldr	r2, [pc, #68]	@ (8002938 <HAL_ADC_ConfigChannel+0x1e4>)
 80028f2:	e000      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x1a2>
 80028f4:	4a11      	ldr	r2, [pc, #68]	@ (800293c <HAL_ADC_ConfigChannel+0x1e8>)
 80028f6:	4b0d      	ldr	r3, [pc, #52]	@ (800292c <HAL_ADC_ConfigChannel+0x1d8>)
 80028f8:	400a      	ands	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	e009      	b.n	8002912 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002902:	2220      	movs	r2, #32
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 800290a:	230f      	movs	r3, #15
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2234      	movs	r2, #52	@ 0x34
 8002916:	2100      	movs	r1, #0
 8002918:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800291a:	230f      	movs	r3, #15
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	781b      	ldrb	r3, [r3, #0]
}
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	b004      	add	sp, #16
 8002926:	bd80      	pop	{r7, pc}
 8002928:	00001001 	.word	0x00001001
 800292c:	40012708 	.word	0x40012708
 8002930:	20000018 	.word	0x20000018
 8002934:	000f4240 	.word	0x000f4240
 8002938:	ff7fffff 	.word	0xff7fffff
 800293c:	ffbfffff 	.word	0xffbfffff

08002940 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2203      	movs	r2, #3
 8002958:	4013      	ands	r3, r2
 800295a:	2b01      	cmp	r3, #1
 800295c:	d112      	bne.n	8002984 <ADC_Enable+0x44>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2201      	movs	r2, #1
 8002966:	4013      	ands	r3, r2
 8002968:	2b01      	cmp	r3, #1
 800296a:	d009      	beq.n	8002980 <ADC_Enable+0x40>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	2380      	movs	r3, #128	@ 0x80
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	401a      	ands	r2, r3
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	429a      	cmp	r2, r3
 800297e:	d101      	bne.n	8002984 <ADC_Enable+0x44>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <ADC_Enable+0x46>
 8002984:	2300      	movs	r3, #0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d152      	bne.n	8002a30 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a2a      	ldr	r2, [pc, #168]	@ (8002a3c <ADC_Enable+0xfc>)
 8002992:	4013      	ands	r3, r2
 8002994:	d00d      	beq.n	80029b2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800299a:	2210      	movs	r2, #16
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a6:	2201      	movs	r2, #1
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e03f      	b.n	8002a32 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2101      	movs	r1, #1
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a40 <ADC_Enable+0x100>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	491f      	ldr	r1, [pc, #124]	@ (8002a44 <ADC_Enable+0x104>)
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7fd fba7 	bl	800011c <__udivsi3>
 80029ce:	0003      	movs	r3, r0
 80029d0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029d2:	e002      	b.n	80029da <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f9      	bne.n	80029d4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80029e0:	f7ff fc52 	bl	8002288 <HAL_GetTick>
 80029e4:	0003      	movs	r3, r0
 80029e6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029e8:	e01b      	b.n	8002a22 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029ea:	f7ff fc4d 	bl	8002288 <HAL_GetTick>
 80029ee:	0002      	movs	r2, r0
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d914      	bls.n	8002a22 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2201      	movs	r2, #1
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d00d      	beq.n	8002a22 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a16:	2201      	movs	r2, #1
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e007      	b.n	8002a32 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d1dc      	bne.n	80029ea <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b004      	add	sp, #16
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			@ (mov r8, r8)
 8002a3c:	80000017 	.word	0x80000017
 8002a40:	20000018 	.word	0x20000018
 8002a44:	000f4240 	.word	0x000f4240

08002a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	0002      	movs	r2, r0
 8002a50:	1dfb      	adds	r3, r7, #7
 8002a52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a54:	1dfb      	adds	r3, r7, #7
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a5a:	d809      	bhi.n	8002a70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5c:	1dfb      	adds	r3, r7, #7
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	001a      	movs	r2, r3
 8002a62:	231f      	movs	r3, #31
 8002a64:	401a      	ands	r2, r3
 8002a66:	4b04      	ldr	r3, [pc, #16]	@ (8002a78 <__NVIC_EnableIRQ+0x30>)
 8002a68:	2101      	movs	r1, #1
 8002a6a:	4091      	lsls	r1, r2
 8002a6c:	000a      	movs	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]
  }
}
 8002a70:	46c0      	nop			@ (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b002      	add	sp, #8
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	e000e100 	.word	0xe000e100

08002a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	0002      	movs	r2, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	1dfb      	adds	r3, r7, #7
 8002a88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a8a:	1dfb      	adds	r3, r7, #7
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a90:	d828      	bhi.n	8002ae4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a92:	4a2f      	ldr	r2, [pc, #188]	@ (8002b50 <__NVIC_SetPriority+0xd4>)
 8002a94:	1dfb      	adds	r3, r7, #7
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	b25b      	sxtb	r3, r3
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	33c0      	adds	r3, #192	@ 0xc0
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	589b      	ldr	r3, [r3, r2]
 8002aa2:	1dfa      	adds	r2, r7, #7
 8002aa4:	7812      	ldrb	r2, [r2, #0]
 8002aa6:	0011      	movs	r1, r2
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	400a      	ands	r2, r1
 8002aac:	00d2      	lsls	r2, r2, #3
 8002aae:	21ff      	movs	r1, #255	@ 0xff
 8002ab0:	4091      	lsls	r1, r2
 8002ab2:	000a      	movs	r2, r1
 8002ab4:	43d2      	mvns	r2, r2
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	019b      	lsls	r3, r3, #6
 8002abe:	22ff      	movs	r2, #255	@ 0xff
 8002ac0:	401a      	ands	r2, r3
 8002ac2:	1dfb      	adds	r3, r7, #7
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	2303      	movs	r3, #3
 8002aca:	4003      	ands	r3, r0
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ad0:	481f      	ldr	r0, [pc, #124]	@ (8002b50 <__NVIC_SetPriority+0xd4>)
 8002ad2:	1dfb      	adds	r3, r7, #7
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	b25b      	sxtb	r3, r3
 8002ad8:	089b      	lsrs	r3, r3, #2
 8002ada:	430a      	orrs	r2, r1
 8002adc:	33c0      	adds	r3, #192	@ 0xc0
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002ae2:	e031      	b.n	8002b48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b54 <__NVIC_SetPriority+0xd8>)
 8002ae6:	1dfb      	adds	r3, r7, #7
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	0019      	movs	r1, r3
 8002aec:	230f      	movs	r3, #15
 8002aee:	400b      	ands	r3, r1
 8002af0:	3b08      	subs	r3, #8
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	3306      	adds	r3, #6
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	18d3      	adds	r3, r2, r3
 8002afa:	3304      	adds	r3, #4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	1dfa      	adds	r2, r7, #7
 8002b00:	7812      	ldrb	r2, [r2, #0]
 8002b02:	0011      	movs	r1, r2
 8002b04:	2203      	movs	r2, #3
 8002b06:	400a      	ands	r2, r1
 8002b08:	00d2      	lsls	r2, r2, #3
 8002b0a:	21ff      	movs	r1, #255	@ 0xff
 8002b0c:	4091      	lsls	r1, r2
 8002b0e:	000a      	movs	r2, r1
 8002b10:	43d2      	mvns	r2, r2
 8002b12:	401a      	ands	r2, r3
 8002b14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	019b      	lsls	r3, r3, #6
 8002b1a:	22ff      	movs	r2, #255	@ 0xff
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	1dfb      	adds	r3, r7, #7
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	0018      	movs	r0, r3
 8002b24:	2303      	movs	r3, #3
 8002b26:	4003      	ands	r3, r0
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b2c:	4809      	ldr	r0, [pc, #36]	@ (8002b54 <__NVIC_SetPriority+0xd8>)
 8002b2e:	1dfb      	adds	r3, r7, #7
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	001c      	movs	r4, r3
 8002b34:	230f      	movs	r3, #15
 8002b36:	4023      	ands	r3, r4
 8002b38:	3b08      	subs	r3, #8
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	3306      	adds	r3, #6
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	18c3      	adds	r3, r0, r3
 8002b44:	3304      	adds	r3, #4
 8002b46:	601a      	str	r2, [r3, #0]
}
 8002b48:	46c0      	nop			@ (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b003      	add	sp, #12
 8002b4e:	bd90      	pop	{r4, r7, pc}
 8002b50:	e000e100 	.word	0xe000e100
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	1e5a      	subs	r2, r3, #1
 8002b64:	2380      	movs	r3, #128	@ 0x80
 8002b66:	045b      	lsls	r3, r3, #17
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d301      	bcc.n	8002b70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e010      	b.n	8002b92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b70:	4b0a      	ldr	r3, [pc, #40]	@ (8002b9c <SysTick_Config+0x44>)
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	3a01      	subs	r2, #1
 8002b76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b78:	2301      	movs	r3, #1
 8002b7a:	425b      	negs	r3, r3
 8002b7c:	2103      	movs	r1, #3
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f7ff ff7c 	bl	8002a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b84:	4b05      	ldr	r3, [pc, #20]	@ (8002b9c <SysTick_Config+0x44>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8a:	4b04      	ldr	r3, [pc, #16]	@ (8002b9c <SysTick_Config+0x44>)
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	0018      	movs	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b002      	add	sp, #8
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			@ (mov r8, r8)
 8002b9c:	e000e010 	.word	0xe000e010

08002ba0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	210f      	movs	r1, #15
 8002bac:	187b      	adds	r3, r7, r1
 8002bae:	1c02      	adds	r2, r0, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	187b      	adds	r3, r7, r1
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	b25b      	sxtb	r3, r3
 8002bba:	0011      	movs	r1, r2
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7ff ff5d 	bl	8002a7c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002bc2:	46c0      	nop			@ (mov r8, r8)
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b004      	add	sp, #16
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	0002      	movs	r2, r0
 8002bd2:	1dfb      	adds	r3, r7, #7
 8002bd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd6:	1dfb      	adds	r3, r7, #7
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	b25b      	sxtb	r3, r3
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff ff33 	bl	8002a48 <__NVIC_EnableIRQ>
}
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b002      	add	sp, #8
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f7ff ffaf 	bl	8002b58 <SysTick_Config>
 8002bfa:	0003      	movs	r3, r0
}
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b002      	add	sp, #8
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c12:	e14f      	b.n	8002eb4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2101      	movs	r1, #1
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4091      	lsls	r1, r2
 8002c1e:	000a      	movs	r2, r1
 8002c20:	4013      	ands	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d100      	bne.n	8002c2c <HAL_GPIO_Init+0x28>
 8002c2a:	e140      	b.n	8002eae <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2203      	movs	r2, #3
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d005      	beq.n	8002c44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d130      	bne.n	8002ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	409a      	lsls	r2, r3
 8002c52:	0013      	movs	r3, r2
 8002c54:	43da      	mvns	r2, r3
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	409a      	lsls	r2, r3
 8002c66:	0013      	movs	r3, r2
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	0013      	movs	r3, r2
 8002c82:	43da      	mvns	r2, r3
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	2201      	movs	r2, #1
 8002c92:	401a      	ands	r2, r3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	409a      	lsls	r2, r3
 8002c98:	0013      	movs	r3, r2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2203      	movs	r2, #3
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d017      	beq.n	8002ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	0013      	movs	r3, r2
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	0013      	movs	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d123      	bne.n	8002d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	08da      	lsrs	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3208      	adds	r2, #8
 8002cf6:	0092      	lsls	r2, r2, #2
 8002cf8:	58d3      	ldr	r3, [r2, r3]
 8002cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2207      	movs	r2, #7
 8002d00:	4013      	ands	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	220f      	movs	r2, #15
 8002d06:	409a      	lsls	r2, r3
 8002d08:	0013      	movs	r3, r2
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2107      	movs	r1, #7
 8002d1a:	400b      	ands	r3, r1
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	0013      	movs	r3, r2
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	08da      	lsrs	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3208      	adds	r2, #8
 8002d30:	0092      	lsls	r2, r2, #2
 8002d32:	6939      	ldr	r1, [r7, #16]
 8002d34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	2203      	movs	r2, #3
 8002d42:	409a      	lsls	r2, r3
 8002d44:	0013      	movs	r3, r2
 8002d46:	43da      	mvns	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2203      	movs	r2, #3
 8002d54:	401a      	ands	r2, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	0013      	movs	r3, r2
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	23c0      	movs	r3, #192	@ 0xc0
 8002d70:	029b      	lsls	r3, r3, #10
 8002d72:	4013      	ands	r3, r2
 8002d74:	d100      	bne.n	8002d78 <HAL_GPIO_Init+0x174>
 8002d76:	e09a      	b.n	8002eae <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d78:	4b54      	ldr	r3, [pc, #336]	@ (8002ecc <HAL_GPIO_Init+0x2c8>)
 8002d7a:	699a      	ldr	r2, [r3, #24]
 8002d7c:	4b53      	ldr	r3, [pc, #332]	@ (8002ecc <HAL_GPIO_Init+0x2c8>)
 8002d7e:	2101      	movs	r1, #1
 8002d80:	430a      	orrs	r2, r1
 8002d82:	619a      	str	r2, [r3, #24]
 8002d84:	4b51      	ldr	r3, [pc, #324]	@ (8002ecc <HAL_GPIO_Init+0x2c8>)
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d90:	4a4f      	ldr	r2, [pc, #316]	@ (8002ed0 <HAL_GPIO_Init+0x2cc>)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	3302      	adds	r3, #2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	589b      	ldr	r3, [r3, r2]
 8002d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2203      	movs	r2, #3
 8002da2:	4013      	ands	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	220f      	movs	r2, #15
 8002da8:	409a      	lsls	r2, r3
 8002daa:	0013      	movs	r3, r2
 8002dac:	43da      	mvns	r2, r3
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4013      	ands	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	2390      	movs	r3, #144	@ 0x90
 8002db8:	05db      	lsls	r3, r3, #23
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d013      	beq.n	8002de6 <HAL_GPIO_Init+0x1e2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a44      	ldr	r2, [pc, #272]	@ (8002ed4 <HAL_GPIO_Init+0x2d0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00d      	beq.n	8002de2 <HAL_GPIO_Init+0x1de>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a43      	ldr	r2, [pc, #268]	@ (8002ed8 <HAL_GPIO_Init+0x2d4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d007      	beq.n	8002dde <HAL_GPIO_Init+0x1da>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a42      	ldr	r2, [pc, #264]	@ (8002edc <HAL_GPIO_Init+0x2d8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_GPIO_Init+0x1d6>
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e006      	b.n	8002de8 <HAL_GPIO_Init+0x1e4>
 8002dda:	2305      	movs	r3, #5
 8002ddc:	e004      	b.n	8002de8 <HAL_GPIO_Init+0x1e4>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e002      	b.n	8002de8 <HAL_GPIO_Init+0x1e4>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_GPIO_Init+0x1e4>
 8002de6:	2300      	movs	r3, #0
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	2103      	movs	r1, #3
 8002dec:	400a      	ands	r2, r1
 8002dee:	0092      	lsls	r2, r2, #2
 8002df0:	4093      	lsls	r3, r2
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002df8:	4935      	ldr	r1, [pc, #212]	@ (8002ed0 <HAL_GPIO_Init+0x2cc>)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	3302      	adds	r3, #2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e06:	4b36      	ldr	r3, [pc, #216]	@ (8002ee0 <HAL_GPIO_Init+0x2dc>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	2380      	movs	r3, #128	@ 0x80
 8002e1c:	035b      	lsls	r3, r3, #13
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee0 <HAL_GPIO_Init+0x2dc>)
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002e30:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee0 <HAL_GPIO_Init+0x2dc>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	2380      	movs	r3, #128	@ 0x80
 8002e46:	039b      	lsls	r3, r3, #14
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e54:	4b22      	ldr	r3, [pc, #136]	@ (8002ee0 <HAL_GPIO_Init+0x2dc>)
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002e5a:	4b21      	ldr	r3, [pc, #132]	@ (8002ee0 <HAL_GPIO_Init+0x2dc>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	43da      	mvns	r2, r3
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	2380      	movs	r3, #128	@ 0x80
 8002e70:	029b      	lsls	r3, r3, #10
 8002e72:	4013      	ands	r3, r2
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ee0 <HAL_GPIO_Init+0x2dc>)
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002e84:	4b16      	ldr	r3, [pc, #88]	@ (8002ee0 <HAL_GPIO_Init+0x2dc>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	43da      	mvns	r2, r3
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	2380      	movs	r3, #128	@ 0x80
 8002e9a:	025b      	lsls	r3, r3, #9
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <HAL_GPIO_Init+0x2dc>)
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	40da      	lsrs	r2, r3
 8002ebc:	1e13      	subs	r3, r2, #0
 8002ebe:	d000      	beq.n	8002ec2 <HAL_GPIO_Init+0x2be>
 8002ec0:	e6a8      	b.n	8002c14 <HAL_GPIO_Init+0x10>
  } 
}
 8002ec2:	46c0      	nop			@ (mov r8, r8)
 8002ec4:	46c0      	nop			@ (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b006      	add	sp, #24
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40010000 	.word	0x40010000
 8002ed4:	48000400 	.word	0x48000400
 8002ed8:	48000800 	.word	0x48000800
 8002edc:	48000c00 	.word	0x48000c00
 8002ee0:	40010400 	.word	0x40010400

08002ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	0008      	movs	r0, r1
 8002eee:	0011      	movs	r1, r2
 8002ef0:	1cbb      	adds	r3, r7, #2
 8002ef2:	1c02      	adds	r2, r0, #0
 8002ef4:	801a      	strh	r2, [r3, #0]
 8002ef6:	1c7b      	adds	r3, r7, #1
 8002ef8:	1c0a      	adds	r2, r1, #0
 8002efa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002efc:	1c7b      	adds	r3, r7, #1
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f04:	1cbb      	adds	r3, r7, #2
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f0c:	e003      	b.n	8002f16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f0e:	1cbb      	adds	r3, r7, #2
 8002f10:	881a      	ldrh	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b002      	add	sp, #8
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	0002      	movs	r2, r0
 8002f28:	1dbb      	adds	r3, r7, #6
 8002f2a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f2c:	4b09      	ldr	r3, [pc, #36]	@ (8002f54 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	1dba      	adds	r2, r7, #6
 8002f32:	8812      	ldrh	r2, [r2, #0]
 8002f34:	4013      	ands	r3, r2
 8002f36:	d008      	beq.n	8002f4a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f38:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002f3a:	1dba      	adds	r2, r7, #6
 8002f3c:	8812      	ldrh	r2, [r2, #0]
 8002f3e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f40:	1dbb      	adds	r3, r7, #6
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7fe ff25 	bl	8001d94 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b002      	add	sp, #8
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			@ (mov r8, r8)
 8002f54:	40010400 	.word	0x40010400

08002f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e301      	b.n	800356e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	4013      	ands	r3, r2
 8002f72:	d100      	bne.n	8002f76 <HAL_RCC_OscConfig+0x1e>
 8002f74:	e08d      	b.n	8003092 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f76:	4bc3      	ldr	r3, [pc, #780]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d00e      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f82:	4bc0      	ldr	r3, [pc, #768]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	220c      	movs	r2, #12
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d116      	bne.n	8002fbc <HAL_RCC_OscConfig+0x64>
 8002f8e:	4bbd      	ldr	r3, [pc, #756]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	025b      	lsls	r3, r3, #9
 8002f96:	401a      	ands	r2, r3
 8002f98:	2380      	movs	r3, #128	@ 0x80
 8002f9a:	025b      	lsls	r3, r3, #9
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d10d      	bne.n	8002fbc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa0:	4bb8      	ldr	r3, [pc, #736]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2380      	movs	r3, #128	@ 0x80
 8002fa6:	029b      	lsls	r3, r3, #10
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d100      	bne.n	8002fae <HAL_RCC_OscConfig+0x56>
 8002fac:	e070      	b.n	8003090 <HAL_RCC_OscConfig+0x138>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d000      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x60>
 8002fb6:	e06b      	b.n	8003090 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e2d8      	b.n	800356e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x7c>
 8002fc4:	4baf      	ldr	r3, [pc, #700]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4bae      	ldr	r3, [pc, #696]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8002fca:	2180      	movs	r1, #128	@ 0x80
 8002fcc:	0249      	lsls	r1, r1, #9
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	e02f      	b.n	8003034 <HAL_RCC_OscConfig+0xdc>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10c      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x9e>
 8002fdc:	4ba9      	ldr	r3, [pc, #676]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4ba8      	ldr	r3, [pc, #672]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8002fe2:	49a9      	ldr	r1, [pc, #676]	@ (8003288 <HAL_RCC_OscConfig+0x330>)
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	4ba6      	ldr	r3, [pc, #664]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4ba5      	ldr	r3, [pc, #660]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8002fee:	49a7      	ldr	r1, [pc, #668]	@ (800328c <HAL_RCC_OscConfig+0x334>)
 8002ff0:	400a      	ands	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e01e      	b.n	8003034 <HAL_RCC_OscConfig+0xdc>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b05      	cmp	r3, #5
 8002ffc:	d10e      	bne.n	800301c <HAL_RCC_OscConfig+0xc4>
 8002ffe:	4ba1      	ldr	r3, [pc, #644]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	4ba0      	ldr	r3, [pc, #640]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8003004:	2180      	movs	r1, #128	@ 0x80
 8003006:	02c9      	lsls	r1, r1, #11
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	4b9d      	ldr	r3, [pc, #628]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b9c      	ldr	r3, [pc, #624]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8003012:	2180      	movs	r1, #128	@ 0x80
 8003014:	0249      	lsls	r1, r1, #9
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	e00b      	b.n	8003034 <HAL_RCC_OscConfig+0xdc>
 800301c:	4b99      	ldr	r3, [pc, #612]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4b98      	ldr	r3, [pc, #608]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8003022:	4999      	ldr	r1, [pc, #612]	@ (8003288 <HAL_RCC_OscConfig+0x330>)
 8003024:	400a      	ands	r2, r1
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	4b96      	ldr	r3, [pc, #600]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b95      	ldr	r3, [pc, #596]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 800302e:	4997      	ldr	r1, [pc, #604]	@ (800328c <HAL_RCC_OscConfig+0x334>)
 8003030:	400a      	ands	r2, r1
 8003032:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d014      	beq.n	8003066 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7ff f924 	bl	8002288 <HAL_GetTick>
 8003040:	0003      	movs	r3, r0
 8003042:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003046:	f7ff f91f 	bl	8002288 <HAL_GetTick>
 800304a:	0002      	movs	r2, r0
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b64      	cmp	r3, #100	@ 0x64
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e28a      	b.n	800356e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003058:	4b8a      	ldr	r3, [pc, #552]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	2380      	movs	r3, #128	@ 0x80
 800305e:	029b      	lsls	r3, r3, #10
 8003060:	4013      	ands	r3, r2
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0xee>
 8003064:	e015      	b.n	8003092 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003066:	f7ff f90f 	bl	8002288 <HAL_GetTick>
 800306a:	0003      	movs	r3, r0
 800306c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003070:	f7ff f90a 	bl	8002288 <HAL_GetTick>
 8003074:	0002      	movs	r2, r0
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	@ 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e275      	b.n	800356e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003082:	4b80      	ldr	r3, [pc, #512]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	2380      	movs	r3, #128	@ 0x80
 8003088:	029b      	lsls	r3, r3, #10
 800308a:	4013      	ands	r3, r2
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x118>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2202      	movs	r2, #2
 8003098:	4013      	ands	r3, r2
 800309a:	d100      	bne.n	800309e <HAL_RCC_OscConfig+0x146>
 800309c:	e069      	b.n	8003172 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800309e:	4b79      	ldr	r3, [pc, #484]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	220c      	movs	r2, #12
 80030a4:	4013      	ands	r3, r2
 80030a6:	d00b      	beq.n	80030c0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030a8:	4b76      	ldr	r3, [pc, #472]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	220c      	movs	r2, #12
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d11c      	bne.n	80030ee <HAL_RCC_OscConfig+0x196>
 80030b4:	4b73      	ldr	r3, [pc, #460]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	2380      	movs	r3, #128	@ 0x80
 80030ba:	025b      	lsls	r3, r3, #9
 80030bc:	4013      	ands	r3, r2
 80030be:	d116      	bne.n	80030ee <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c0:	4b70      	ldr	r3, [pc, #448]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2202      	movs	r2, #2
 80030c6:	4013      	ands	r3, r2
 80030c8:	d005      	beq.n	80030d6 <HAL_RCC_OscConfig+0x17e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e24b      	b.n	800356e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d6:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	22f8      	movs	r2, #248	@ 0xf8
 80030dc:	4393      	bics	r3, r2
 80030de:	0019      	movs	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	00da      	lsls	r2, r3, #3
 80030e6:	4b67      	ldr	r3, [pc, #412]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 80030e8:	430a      	orrs	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ec:	e041      	b.n	8003172 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d024      	beq.n	8003140 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f6:	4b63      	ldr	r3, [pc, #396]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4b62      	ldr	r3, [pc, #392]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 80030fc:	2101      	movs	r1, #1
 80030fe:	430a      	orrs	r2, r1
 8003100:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7ff f8c1 	bl	8002288 <HAL_GetTick>
 8003106:	0003      	movs	r3, r0
 8003108:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310c:	f7ff f8bc 	bl	8002288 <HAL_GetTick>
 8003110:	0002      	movs	r2, r0
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e227      	b.n	800356e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311e:	4b59      	ldr	r3, [pc, #356]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2202      	movs	r2, #2
 8003124:	4013      	ands	r3, r2
 8003126:	d0f1      	beq.n	800310c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b56      	ldr	r3, [pc, #344]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	22f8      	movs	r2, #248	@ 0xf8
 800312e:	4393      	bics	r3, r2
 8003130:	0019      	movs	r1, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	00da      	lsls	r2, r3, #3
 8003138:	4b52      	ldr	r3, [pc, #328]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 800313a:	430a      	orrs	r2, r1
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	e018      	b.n	8003172 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003140:	4b50      	ldr	r3, [pc, #320]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b4f      	ldr	r3, [pc, #316]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8003146:	2101      	movs	r1, #1
 8003148:	438a      	bics	r2, r1
 800314a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7ff f89c 	bl	8002288 <HAL_GetTick>
 8003150:	0003      	movs	r3, r0
 8003152:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003156:	f7ff f897 	bl	8002288 <HAL_GetTick>
 800315a:	0002      	movs	r2, r0
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e202      	b.n	800356e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003168:	4b46      	ldr	r3, [pc, #280]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2202      	movs	r2, #2
 800316e:	4013      	ands	r3, r2
 8003170:	d1f1      	bne.n	8003156 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2208      	movs	r2, #8
 8003178:	4013      	ands	r3, r2
 800317a:	d036      	beq.n	80031ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d019      	beq.n	80031b8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003184:	4b3f      	ldr	r3, [pc, #252]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8003186:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003188:	4b3e      	ldr	r3, [pc, #248]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 800318a:	2101      	movs	r1, #1
 800318c:	430a      	orrs	r2, r1
 800318e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003190:	f7ff f87a 	bl	8002288 <HAL_GetTick>
 8003194:	0003      	movs	r3, r0
 8003196:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800319a:	f7ff f875 	bl	8002288 <HAL_GetTick>
 800319e:	0002      	movs	r2, r0
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e1e0      	b.n	800356e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ac:	4b35      	ldr	r3, [pc, #212]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	2202      	movs	r2, #2
 80031b2:	4013      	ands	r3, r2
 80031b4:	d0f1      	beq.n	800319a <HAL_RCC_OscConfig+0x242>
 80031b6:	e018      	b.n	80031ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b8:	4b32      	ldr	r3, [pc, #200]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 80031ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031bc:	4b31      	ldr	r3, [pc, #196]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 80031be:	2101      	movs	r1, #1
 80031c0:	438a      	bics	r2, r1
 80031c2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c4:	f7ff f860 	bl	8002288 <HAL_GetTick>
 80031c8:	0003      	movs	r3, r0
 80031ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ce:	f7ff f85b 	bl	8002288 <HAL_GetTick>
 80031d2:	0002      	movs	r2, r0
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1c6      	b.n	800356e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e0:	4b28      	ldr	r3, [pc, #160]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	2202      	movs	r2, #2
 80031e6:	4013      	ands	r3, r2
 80031e8:	d1f1      	bne.n	80031ce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2204      	movs	r2, #4
 80031f0:	4013      	ands	r3, r2
 80031f2:	d100      	bne.n	80031f6 <HAL_RCC_OscConfig+0x29e>
 80031f4:	e0b4      	b.n	8003360 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f6:	201f      	movs	r0, #31
 80031f8:	183b      	adds	r3, r7, r0
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fe:	4b21      	ldr	r3, [pc, #132]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8003200:	69da      	ldr	r2, [r3, #28]
 8003202:	2380      	movs	r3, #128	@ 0x80
 8003204:	055b      	lsls	r3, r3, #21
 8003206:	4013      	ands	r3, r2
 8003208:	d110      	bne.n	800322c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	4b1e      	ldr	r3, [pc, #120]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 800320c:	69da      	ldr	r2, [r3, #28]
 800320e:	4b1d      	ldr	r3, [pc, #116]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8003210:	2180      	movs	r1, #128	@ 0x80
 8003212:	0549      	lsls	r1, r1, #21
 8003214:	430a      	orrs	r2, r1
 8003216:	61da      	str	r2, [r3, #28]
 8003218:	4b1a      	ldr	r3, [pc, #104]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 800321a:	69da      	ldr	r2, [r3, #28]
 800321c:	2380      	movs	r3, #128	@ 0x80
 800321e:	055b      	lsls	r3, r3, #21
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003226:	183b      	adds	r3, r7, r0
 8003228:	2201      	movs	r2, #1
 800322a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322c:	4b18      	ldr	r3, [pc, #96]	@ (8003290 <HAL_RCC_OscConfig+0x338>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	2380      	movs	r3, #128	@ 0x80
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4013      	ands	r3, r2
 8003236:	d11a      	bne.n	800326e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003238:	4b15      	ldr	r3, [pc, #84]	@ (8003290 <HAL_RCC_OscConfig+0x338>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b14      	ldr	r3, [pc, #80]	@ (8003290 <HAL_RCC_OscConfig+0x338>)
 800323e:	2180      	movs	r1, #128	@ 0x80
 8003240:	0049      	lsls	r1, r1, #1
 8003242:	430a      	orrs	r2, r1
 8003244:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003246:	f7ff f81f 	bl	8002288 <HAL_GetTick>
 800324a:	0003      	movs	r3, r0
 800324c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003250:	f7ff f81a 	bl	8002288 <HAL_GetTick>
 8003254:	0002      	movs	r2, r0
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	@ 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e185      	b.n	800356e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003262:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <HAL_RCC_OscConfig+0x338>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	2380      	movs	r3, #128	@ 0x80
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4013      	ands	r3, r2
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d10e      	bne.n	8003294 <HAL_RCC_OscConfig+0x33c>
 8003276:	4b03      	ldr	r3, [pc, #12]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 8003278:	6a1a      	ldr	r2, [r3, #32]
 800327a:	4b02      	ldr	r3, [pc, #8]	@ (8003284 <HAL_RCC_OscConfig+0x32c>)
 800327c:	2101      	movs	r1, #1
 800327e:	430a      	orrs	r2, r1
 8003280:	621a      	str	r2, [r3, #32]
 8003282:	e035      	b.n	80032f0 <HAL_RCC_OscConfig+0x398>
 8003284:	40021000 	.word	0x40021000
 8003288:	fffeffff 	.word	0xfffeffff
 800328c:	fffbffff 	.word	0xfffbffff
 8003290:	40007000 	.word	0x40007000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10c      	bne.n	80032b6 <HAL_RCC_OscConfig+0x35e>
 800329c:	4bb6      	ldr	r3, [pc, #728]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 800329e:	6a1a      	ldr	r2, [r3, #32]
 80032a0:	4bb5      	ldr	r3, [pc, #724]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80032a2:	2101      	movs	r1, #1
 80032a4:	438a      	bics	r2, r1
 80032a6:	621a      	str	r2, [r3, #32]
 80032a8:	4bb3      	ldr	r3, [pc, #716]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	4bb2      	ldr	r3, [pc, #712]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80032ae:	2104      	movs	r1, #4
 80032b0:	438a      	bics	r2, r1
 80032b2:	621a      	str	r2, [r3, #32]
 80032b4:	e01c      	b.n	80032f0 <HAL_RCC_OscConfig+0x398>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x380>
 80032be:	4bae      	ldr	r3, [pc, #696]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80032c0:	6a1a      	ldr	r2, [r3, #32]
 80032c2:	4bad      	ldr	r3, [pc, #692]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80032c4:	2104      	movs	r1, #4
 80032c6:	430a      	orrs	r2, r1
 80032c8:	621a      	str	r2, [r3, #32]
 80032ca:	4bab      	ldr	r3, [pc, #684]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80032cc:	6a1a      	ldr	r2, [r3, #32]
 80032ce:	4baa      	ldr	r3, [pc, #680]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80032d0:	2101      	movs	r1, #1
 80032d2:	430a      	orrs	r2, r1
 80032d4:	621a      	str	r2, [r3, #32]
 80032d6:	e00b      	b.n	80032f0 <HAL_RCC_OscConfig+0x398>
 80032d8:	4ba7      	ldr	r3, [pc, #668]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80032da:	6a1a      	ldr	r2, [r3, #32]
 80032dc:	4ba6      	ldr	r3, [pc, #664]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80032de:	2101      	movs	r1, #1
 80032e0:	438a      	bics	r2, r1
 80032e2:	621a      	str	r2, [r3, #32]
 80032e4:	4ba4      	ldr	r3, [pc, #656]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80032e6:	6a1a      	ldr	r2, [r3, #32]
 80032e8:	4ba3      	ldr	r3, [pc, #652]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80032ea:	2104      	movs	r1, #4
 80032ec:	438a      	bics	r2, r1
 80032ee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d014      	beq.n	8003322 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f8:	f7fe ffc6 	bl	8002288 <HAL_GetTick>
 80032fc:	0003      	movs	r3, r0
 80032fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003300:	e009      	b.n	8003316 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f7fe ffc1 	bl	8002288 <HAL_GetTick>
 8003306:	0002      	movs	r2, r0
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	4a9b      	ldr	r2, [pc, #620]	@ (800357c <HAL_RCC_OscConfig+0x624>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e12b      	b.n	800356e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003316:	4b98      	ldr	r3, [pc, #608]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	2202      	movs	r2, #2
 800331c:	4013      	ands	r3, r2
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x3aa>
 8003320:	e013      	b.n	800334a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003322:	f7fe ffb1 	bl	8002288 <HAL_GetTick>
 8003326:	0003      	movs	r3, r0
 8003328:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332a:	e009      	b.n	8003340 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7fe ffac 	bl	8002288 <HAL_GetTick>
 8003330:	0002      	movs	r2, r0
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	4a91      	ldr	r2, [pc, #580]	@ (800357c <HAL_RCC_OscConfig+0x624>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e116      	b.n	800356e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003340:	4b8d      	ldr	r3, [pc, #564]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	2202      	movs	r2, #2
 8003346:	4013      	ands	r3, r2
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800334a:	231f      	movs	r3, #31
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d105      	bne.n	8003360 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003354:	4b88      	ldr	r3, [pc, #544]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	4b87      	ldr	r3, [pc, #540]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 800335a:	4989      	ldr	r1, [pc, #548]	@ (8003580 <HAL_RCC_OscConfig+0x628>)
 800335c:	400a      	ands	r2, r1
 800335e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2210      	movs	r2, #16
 8003366:	4013      	ands	r3, r2
 8003368:	d063      	beq.n	8003432 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d12a      	bne.n	80033c8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003372:	4b81      	ldr	r3, [pc, #516]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 8003374:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003376:	4b80      	ldr	r3, [pc, #512]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 8003378:	2104      	movs	r1, #4
 800337a:	430a      	orrs	r2, r1
 800337c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800337e:	4b7e      	ldr	r3, [pc, #504]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 8003380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003382:	4b7d      	ldr	r3, [pc, #500]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 8003384:	2101      	movs	r1, #1
 8003386:	430a      	orrs	r2, r1
 8003388:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338a:	f7fe ff7d 	bl	8002288 <HAL_GetTick>
 800338e:	0003      	movs	r3, r0
 8003390:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003394:	f7fe ff78 	bl	8002288 <HAL_GetTick>
 8003398:	0002      	movs	r2, r0
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e0e3      	b.n	800356e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80033a6:	4b74      	ldr	r3, [pc, #464]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80033a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033aa:	2202      	movs	r2, #2
 80033ac:	4013      	ands	r3, r2
 80033ae:	d0f1      	beq.n	8003394 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033b0:	4b71      	ldr	r3, [pc, #452]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80033b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b4:	22f8      	movs	r2, #248	@ 0xf8
 80033b6:	4393      	bics	r3, r2
 80033b8:	0019      	movs	r1, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	00da      	lsls	r2, r3, #3
 80033c0:	4b6d      	ldr	r3, [pc, #436]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80033c2:	430a      	orrs	r2, r1
 80033c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80033c6:	e034      	b.n	8003432 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	3305      	adds	r3, #5
 80033ce:	d111      	bne.n	80033f4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80033d0:	4b69      	ldr	r3, [pc, #420]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80033d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033d4:	4b68      	ldr	r3, [pc, #416]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80033d6:	2104      	movs	r1, #4
 80033d8:	438a      	bics	r2, r1
 80033da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033dc:	4b66      	ldr	r3, [pc, #408]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80033de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e0:	22f8      	movs	r2, #248	@ 0xf8
 80033e2:	4393      	bics	r3, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	00da      	lsls	r2, r3, #3
 80033ec:	4b62      	ldr	r3, [pc, #392]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80033ee:	430a      	orrs	r2, r1
 80033f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80033f2:	e01e      	b.n	8003432 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80033f4:	4b60      	ldr	r3, [pc, #384]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80033f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033f8:	4b5f      	ldr	r3, [pc, #380]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80033fa:	2104      	movs	r1, #4
 80033fc:	430a      	orrs	r2, r1
 80033fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003400:	4b5d      	ldr	r3, [pc, #372]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 8003402:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003404:	4b5c      	ldr	r3, [pc, #368]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 8003406:	2101      	movs	r1, #1
 8003408:	438a      	bics	r2, r1
 800340a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340c:	f7fe ff3c 	bl	8002288 <HAL_GetTick>
 8003410:	0003      	movs	r3, r0
 8003412:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003416:	f7fe ff37 	bl	8002288 <HAL_GetTick>
 800341a:	0002      	movs	r2, r0
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e0a2      	b.n	800356e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003428:	4b53      	ldr	r3, [pc, #332]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 800342a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342c:	2202      	movs	r2, #2
 800342e:	4013      	ands	r3, r2
 8003430:	d1f1      	bne.n	8003416 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d100      	bne.n	800343c <HAL_RCC_OscConfig+0x4e4>
 800343a:	e097      	b.n	800356c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800343c:	4b4e      	ldr	r3, [pc, #312]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	220c      	movs	r2, #12
 8003442:	4013      	ands	r3, r2
 8003444:	2b08      	cmp	r3, #8
 8003446:	d100      	bne.n	800344a <HAL_RCC_OscConfig+0x4f2>
 8003448:	e06b      	b.n	8003522 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d14c      	bne.n	80034ec <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003452:	4b49      	ldr	r3, [pc, #292]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b48      	ldr	r3, [pc, #288]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 8003458:	494a      	ldr	r1, [pc, #296]	@ (8003584 <HAL_RCC_OscConfig+0x62c>)
 800345a:	400a      	ands	r2, r1
 800345c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7fe ff13 	bl	8002288 <HAL_GetTick>
 8003462:	0003      	movs	r3, r0
 8003464:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003468:	f7fe ff0e 	bl	8002288 <HAL_GetTick>
 800346c:	0002      	movs	r2, r0
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e079      	b.n	800356e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800347a:	4b3f      	ldr	r3, [pc, #252]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	2380      	movs	r3, #128	@ 0x80
 8003480:	049b      	lsls	r3, r3, #18
 8003482:	4013      	ands	r3, r2
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003486:	4b3c      	ldr	r3, [pc, #240]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 8003488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348a:	220f      	movs	r2, #15
 800348c:	4393      	bics	r3, r2
 800348e:	0019      	movs	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003494:	4b38      	ldr	r3, [pc, #224]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 8003496:	430a      	orrs	r2, r1
 8003498:	62da      	str	r2, [r3, #44]	@ 0x2c
 800349a:	4b37      	ldr	r3, [pc, #220]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4a3a      	ldr	r2, [pc, #232]	@ (8003588 <HAL_RCC_OscConfig+0x630>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	0019      	movs	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	431a      	orrs	r2, r3
 80034ae:	4b32      	ldr	r3, [pc, #200]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b4:	4b30      	ldr	r3, [pc, #192]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80034ba:	2180      	movs	r1, #128	@ 0x80
 80034bc:	0449      	lsls	r1, r1, #17
 80034be:	430a      	orrs	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fe fee1 	bl	8002288 <HAL_GetTick>
 80034c6:	0003      	movs	r3, r0
 80034c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fe fedc 	bl	8002288 <HAL_GetTick>
 80034d0:	0002      	movs	r2, r0
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e047      	b.n	800356e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034de:	4b26      	ldr	r3, [pc, #152]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	2380      	movs	r3, #128	@ 0x80
 80034e4:	049b      	lsls	r3, r3, #18
 80034e6:	4013      	ands	r3, r2
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x574>
 80034ea:	e03f      	b.n	800356c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ec:	4b22      	ldr	r3, [pc, #136]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	4b21      	ldr	r3, [pc, #132]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 80034f2:	4924      	ldr	r1, [pc, #144]	@ (8003584 <HAL_RCC_OscConfig+0x62c>)
 80034f4:	400a      	ands	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fe fec6 	bl	8002288 <HAL_GetTick>
 80034fc:	0003      	movs	r3, r0
 80034fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003502:	f7fe fec1 	bl	8002288 <HAL_GetTick>
 8003506:	0002      	movs	r2, r0
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e02c      	b.n	800356e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003514:	4b18      	ldr	r3, [pc, #96]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	2380      	movs	r3, #128	@ 0x80
 800351a:	049b      	lsls	r3, r3, #18
 800351c:	4013      	ands	r3, r2
 800351e:	d1f0      	bne.n	8003502 <HAL_RCC_OscConfig+0x5aa>
 8003520:	e024      	b.n	800356c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e01f      	b.n	800356e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800352e:	4b12      	ldr	r3, [pc, #72]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003534:	4b10      	ldr	r3, [pc, #64]	@ (8003578 <HAL_RCC_OscConfig+0x620>)
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	2380      	movs	r3, #128	@ 0x80
 800353e:	025b      	lsls	r3, r3, #9
 8003540:	401a      	ands	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	429a      	cmp	r2, r3
 8003548:	d10e      	bne.n	8003568 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	220f      	movs	r2, #15
 800354e:	401a      	ands	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003554:	429a      	cmp	r2, r3
 8003556:	d107      	bne.n	8003568 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	23f0      	movs	r3, #240	@ 0xf0
 800355c:	039b      	lsls	r3, r3, #14
 800355e:	401a      	ands	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	0018      	movs	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	b008      	add	sp, #32
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			@ (mov r8, r8)
 8003578:	40021000 	.word	0x40021000
 800357c:	00001388 	.word	0x00001388
 8003580:	efffffff 	.word	0xefffffff
 8003584:	feffffff 	.word	0xfeffffff
 8003588:	ffc2ffff 	.word	0xffc2ffff

0800358c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0b3      	b.n	8003708 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a0:	4b5b      	ldr	r3, [pc, #364]	@ (8003710 <HAL_RCC_ClockConfig+0x184>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2201      	movs	r2, #1
 80035a6:	4013      	ands	r3, r2
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d911      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b58      	ldr	r3, [pc, #352]	@ (8003710 <HAL_RCC_ClockConfig+0x184>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2201      	movs	r2, #1
 80035b4:	4393      	bics	r3, r2
 80035b6:	0019      	movs	r1, r3
 80035b8:	4b55      	ldr	r3, [pc, #340]	@ (8003710 <HAL_RCC_ClockConfig+0x184>)
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c0:	4b53      	ldr	r3, [pc, #332]	@ (8003710 <HAL_RCC_ClockConfig+0x184>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2201      	movs	r2, #1
 80035c6:	4013      	ands	r3, r2
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e09a      	b.n	8003708 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2202      	movs	r2, #2
 80035d8:	4013      	ands	r3, r2
 80035da:	d015      	beq.n	8003608 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2204      	movs	r2, #4
 80035e2:	4013      	ands	r3, r2
 80035e4:	d006      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035e6:	4b4b      	ldr	r3, [pc, #300]	@ (8003714 <HAL_RCC_ClockConfig+0x188>)
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003714 <HAL_RCC_ClockConfig+0x188>)
 80035ec:	21e0      	movs	r1, #224	@ 0xe0
 80035ee:	00c9      	lsls	r1, r1, #3
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f4:	4b47      	ldr	r3, [pc, #284]	@ (8003714 <HAL_RCC_ClockConfig+0x188>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	22f0      	movs	r2, #240	@ 0xf0
 80035fa:	4393      	bics	r3, r2
 80035fc:	0019      	movs	r1, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	4b44      	ldr	r3, [pc, #272]	@ (8003714 <HAL_RCC_ClockConfig+0x188>)
 8003604:	430a      	orrs	r2, r1
 8003606:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2201      	movs	r2, #1
 800360e:	4013      	ands	r3, r2
 8003610:	d040      	beq.n	8003694 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d107      	bne.n	800362a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	4b3e      	ldr	r3, [pc, #248]	@ (8003714 <HAL_RCC_ClockConfig+0x188>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	2380      	movs	r3, #128	@ 0x80
 8003620:	029b      	lsls	r3, r3, #10
 8003622:	4013      	ands	r3, r2
 8003624:	d114      	bne.n	8003650 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e06e      	b.n	8003708 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d107      	bne.n	8003642 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003632:	4b38      	ldr	r3, [pc, #224]	@ (8003714 <HAL_RCC_ClockConfig+0x188>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	2380      	movs	r3, #128	@ 0x80
 8003638:	049b      	lsls	r3, r3, #18
 800363a:	4013      	ands	r3, r2
 800363c:	d108      	bne.n	8003650 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e062      	b.n	8003708 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003642:	4b34      	ldr	r3, [pc, #208]	@ (8003714 <HAL_RCC_ClockConfig+0x188>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2202      	movs	r2, #2
 8003648:	4013      	ands	r3, r2
 800364a:	d101      	bne.n	8003650 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e05b      	b.n	8003708 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003650:	4b30      	ldr	r3, [pc, #192]	@ (8003714 <HAL_RCC_ClockConfig+0x188>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2203      	movs	r2, #3
 8003656:	4393      	bics	r3, r2
 8003658:	0019      	movs	r1, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	4b2d      	ldr	r3, [pc, #180]	@ (8003714 <HAL_RCC_ClockConfig+0x188>)
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003664:	f7fe fe10 	bl	8002288 <HAL_GetTick>
 8003668:	0003      	movs	r3, r0
 800366a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366c:	e009      	b.n	8003682 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800366e:	f7fe fe0b 	bl	8002288 <HAL_GetTick>
 8003672:	0002      	movs	r2, r0
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	4a27      	ldr	r2, [pc, #156]	@ (8003718 <HAL_RCC_ClockConfig+0x18c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e042      	b.n	8003708 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	4b24      	ldr	r3, [pc, #144]	@ (8003714 <HAL_RCC_ClockConfig+0x188>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	220c      	movs	r2, #12
 8003688:	401a      	ands	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	429a      	cmp	r2, r3
 8003692:	d1ec      	bne.n	800366e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003694:	4b1e      	ldr	r3, [pc, #120]	@ (8003710 <HAL_RCC_ClockConfig+0x184>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2201      	movs	r2, #1
 800369a:	4013      	ands	r3, r2
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d211      	bcs.n	80036c6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003710 <HAL_RCC_ClockConfig+0x184>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2201      	movs	r2, #1
 80036a8:	4393      	bics	r3, r2
 80036aa:	0019      	movs	r1, r3
 80036ac:	4b18      	ldr	r3, [pc, #96]	@ (8003710 <HAL_RCC_ClockConfig+0x184>)
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b4:	4b16      	ldr	r3, [pc, #88]	@ (8003710 <HAL_RCC_ClockConfig+0x184>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2201      	movs	r2, #1
 80036ba:	4013      	ands	r3, r2
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d001      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e020      	b.n	8003708 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2204      	movs	r2, #4
 80036cc:	4013      	ands	r3, r2
 80036ce:	d009      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036d0:	4b10      	ldr	r3, [pc, #64]	@ (8003714 <HAL_RCC_ClockConfig+0x188>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	4a11      	ldr	r2, [pc, #68]	@ (800371c <HAL_RCC_ClockConfig+0x190>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	0019      	movs	r1, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	4b0d      	ldr	r3, [pc, #52]	@ (8003714 <HAL_RCC_ClockConfig+0x188>)
 80036e0:	430a      	orrs	r2, r1
 80036e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036e4:	f000 f820 	bl	8003728 <HAL_RCC_GetSysClockFreq>
 80036e8:	0001      	movs	r1, r0
 80036ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003714 <HAL_RCC_ClockConfig+0x188>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	091b      	lsrs	r3, r3, #4
 80036f0:	220f      	movs	r2, #15
 80036f2:	4013      	ands	r3, r2
 80036f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003720 <HAL_RCC_ClockConfig+0x194>)
 80036f6:	5cd3      	ldrb	r3, [r2, r3]
 80036f8:	000a      	movs	r2, r1
 80036fa:	40da      	lsrs	r2, r3
 80036fc:	4b09      	ldr	r3, [pc, #36]	@ (8003724 <HAL_RCC_ClockConfig+0x198>)
 80036fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003700:	2003      	movs	r0, #3
 8003702:	f7fe fd7b 	bl	80021fc <HAL_InitTick>
  
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	0018      	movs	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	b004      	add	sp, #16
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40022000 	.word	0x40022000
 8003714:	40021000 	.word	0x40021000
 8003718:	00001388 	.word	0x00001388
 800371c:	fffff8ff 	.word	0xfffff8ff
 8003720:	080059f4 	.word	0x080059f4
 8003724:	20000018 	.word	0x20000018

08003728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	2300      	movs	r3, #0
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	2300      	movs	r3, #0
 800373c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003742:	4b20      	ldr	r3, [pc, #128]	@ (80037c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	220c      	movs	r2, #12
 800374c:	4013      	ands	r3, r2
 800374e:	2b04      	cmp	r3, #4
 8003750:	d002      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x30>
 8003752:	2b08      	cmp	r3, #8
 8003754:	d003      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x36>
 8003756:	e02c      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003758:	4b1b      	ldr	r3, [pc, #108]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800375a:	613b      	str	r3, [r7, #16]
      break;
 800375c:	e02c      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	0c9b      	lsrs	r3, r3, #18
 8003762:	220f      	movs	r2, #15
 8003764:	4013      	ands	r3, r2
 8003766:	4a19      	ldr	r2, [pc, #100]	@ (80037cc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003768:	5cd3      	ldrb	r3, [r2, r3]
 800376a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800376c:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003770:	220f      	movs	r2, #15
 8003772:	4013      	ands	r3, r2
 8003774:	4a16      	ldr	r2, [pc, #88]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003776:	5cd3      	ldrb	r3, [r2, r3]
 8003778:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	2380      	movs	r3, #128	@ 0x80
 800377e:	025b      	lsls	r3, r3, #9
 8003780:	4013      	ands	r3, r2
 8003782:	d009      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	4810      	ldr	r0, [pc, #64]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003788:	f7fc fcc8 	bl	800011c <__udivsi3>
 800378c:	0003      	movs	r3, r0
 800378e:	001a      	movs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4353      	muls	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e009      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	000a      	movs	r2, r1
 800379c:	0152      	lsls	r2, r2, #5
 800379e:	1a52      	subs	r2, r2, r1
 80037a0:	0193      	lsls	r3, r2, #6
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	185b      	adds	r3, r3, r1
 80037a8:	021b      	lsls	r3, r3, #8
 80037aa:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	613b      	str	r3, [r7, #16]
      break;
 80037b0:	e002      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037b4:	613b      	str	r3, [r7, #16]
      break;
 80037b6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037b8:	693b      	ldr	r3, [r7, #16]
}
 80037ba:	0018      	movs	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	b006      	add	sp, #24
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			@ (mov r8, r8)
 80037c4:	40021000 	.word	0x40021000
 80037c8:	007a1200 	.word	0x007a1200
 80037cc:	08005a0c 	.word	0x08005a0c
 80037d0:	08005a1c 	.word	0x08005a1c

080037d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d8:	4b02      	ldr	r3, [pc, #8]	@ (80037e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80037da:	681b      	ldr	r3, [r3, #0]
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	20000018 	.word	0x20000018

080037e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80037ec:	f7ff fff2 	bl	80037d4 <HAL_RCC_GetHCLKFreq>
 80037f0:	0001      	movs	r1, r0
 80037f2:	4b06      	ldr	r3, [pc, #24]	@ (800380c <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	0a1b      	lsrs	r3, r3, #8
 80037f8:	2207      	movs	r2, #7
 80037fa:	4013      	ands	r3, r2
 80037fc:	4a04      	ldr	r2, [pc, #16]	@ (8003810 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037fe:	5cd3      	ldrb	r3, [r2, r3]
 8003800:	40d9      	lsrs	r1, r3
 8003802:	000b      	movs	r3, r1
}    
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	40021000 	.word	0x40021000
 8003810:	08005a04 	.word	0x08005a04

08003814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	2380      	movs	r3, #128	@ 0x80
 800382a:	025b      	lsls	r3, r3, #9
 800382c:	4013      	ands	r3, r2
 800382e:	d100      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003830:	e08e      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003832:	2017      	movs	r0, #23
 8003834:	183b      	adds	r3, r7, r0
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383a:	4b57      	ldr	r3, [pc, #348]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	2380      	movs	r3, #128	@ 0x80
 8003840:	055b      	lsls	r3, r3, #21
 8003842:	4013      	ands	r3, r2
 8003844:	d110      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	4b54      	ldr	r3, [pc, #336]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003848:	69da      	ldr	r2, [r3, #28]
 800384a:	4b53      	ldr	r3, [pc, #332]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800384c:	2180      	movs	r1, #128	@ 0x80
 800384e:	0549      	lsls	r1, r1, #21
 8003850:	430a      	orrs	r2, r1
 8003852:	61da      	str	r2, [r3, #28]
 8003854:	4b50      	ldr	r3, [pc, #320]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	2380      	movs	r3, #128	@ 0x80
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	4013      	ands	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003862:	183b      	adds	r3, r7, r0
 8003864:	2201      	movs	r2, #1
 8003866:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003868:	4b4c      	ldr	r3, [pc, #304]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	2380      	movs	r3, #128	@ 0x80
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	4013      	ands	r3, r2
 8003872:	d11a      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003874:	4b49      	ldr	r3, [pc, #292]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b48      	ldr	r3, [pc, #288]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800387a:	2180      	movs	r1, #128	@ 0x80
 800387c:	0049      	lsls	r1, r1, #1
 800387e:	430a      	orrs	r2, r1
 8003880:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003882:	f7fe fd01 	bl	8002288 <HAL_GetTick>
 8003886:	0003      	movs	r3, r0
 8003888:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388a:	e008      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388c:	f7fe fcfc 	bl	8002288 <HAL_GetTick>
 8003890:	0002      	movs	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	@ 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e077      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389e:	4b3f      	ldr	r3, [pc, #252]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	2380      	movs	r3, #128	@ 0x80
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4013      	ands	r3, r2
 80038a8:	d0f0      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038ac:	6a1a      	ldr	r2, [r3, #32]
 80038ae:	23c0      	movs	r3, #192	@ 0xc0
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4013      	ands	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d034      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	23c0      	movs	r3, #192	@ 0xc0
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4013      	ands	r3, r2
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d02c      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038cc:	4b32      	ldr	r3, [pc, #200]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	4a33      	ldr	r2, [pc, #204]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038d6:	4b30      	ldr	r3, [pc, #192]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038d8:	6a1a      	ldr	r2, [r3, #32]
 80038da:	4b2f      	ldr	r3, [pc, #188]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038dc:	2180      	movs	r1, #128	@ 0x80
 80038de:	0249      	lsls	r1, r1, #9
 80038e0:	430a      	orrs	r2, r1
 80038e2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038e6:	6a1a      	ldr	r2, [r3, #32]
 80038e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038ea:	492e      	ldr	r1, [pc, #184]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80038ec:	400a      	ands	r2, r1
 80038ee:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038f0:	4b29      	ldr	r3, [pc, #164]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	4013      	ands	r3, r2
 80038fc:	d013      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7fe fcc3 	bl	8002288 <HAL_GetTick>
 8003902:	0003      	movs	r3, r0
 8003904:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003906:	e009      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003908:	f7fe fcbe 	bl	8002288 <HAL_GetTick>
 800390c:	0002      	movs	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	4a25      	ldr	r2, [pc, #148]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d901      	bls.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e038      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391c:	4b1e      	ldr	r3, [pc, #120]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	2202      	movs	r2, #2
 8003922:	4013      	ands	r3, r2
 8003924:	d0f0      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003926:	4b1c      	ldr	r3, [pc, #112]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	4a1d      	ldr	r2, [pc, #116]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800392c:	4013      	ands	r3, r2
 800392e:	0019      	movs	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	4b18      	ldr	r3, [pc, #96]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003936:	430a      	orrs	r2, r1
 8003938:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800393a:	2317      	movs	r3, #23
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003944:	4b14      	ldr	r3, [pc, #80]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	4b13      	ldr	r3, [pc, #76]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800394a:	4918      	ldr	r1, [pc, #96]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800394c:	400a      	ands	r2, r1
 800394e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2201      	movs	r2, #1
 8003956:	4013      	ands	r3, r2
 8003958:	d009      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800395a:	4b0f      	ldr	r3, [pc, #60]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	2203      	movs	r2, #3
 8003960:	4393      	bics	r3, r2
 8003962:	0019      	movs	r1, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800396a:	430a      	orrs	r2, r1
 800396c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2220      	movs	r2, #32
 8003974:	4013      	ands	r3, r2
 8003976:	d009      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003978:	4b07      	ldr	r3, [pc, #28]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800397a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397c:	2210      	movs	r2, #16
 800397e:	4393      	bics	r3, r2
 8003980:	0019      	movs	r1, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	4b04      	ldr	r3, [pc, #16]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003988:	430a      	orrs	r2, r1
 800398a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	0018      	movs	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	b006      	add	sp, #24
 8003994:	bd80      	pop	{r7, pc}
 8003996:	46c0      	nop			@ (mov r8, r8)
 8003998:	40021000 	.word	0x40021000
 800399c:	40007000 	.word	0x40007000
 80039a0:	fffffcff 	.word	0xfffffcff
 80039a4:	fffeffff 	.word	0xfffeffff
 80039a8:	00001388 	.word	0x00001388
 80039ac:	efffffff 	.word	0xefffffff

080039b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e042      	b.n	8003a48 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	223d      	movs	r2, #61	@ 0x3d
 80039c6:	5c9b      	ldrb	r3, [r3, r2]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d107      	bne.n	80039de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	223c      	movs	r2, #60	@ 0x3c
 80039d2:	2100      	movs	r1, #0
 80039d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	0018      	movs	r0, r3
 80039da:	f7fe fa87 	bl	8001eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	223d      	movs	r2, #61	@ 0x3d
 80039e2:	2102      	movs	r1, #2
 80039e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3304      	adds	r3, #4
 80039ee:	0019      	movs	r1, r3
 80039f0:	0010      	movs	r0, r2
 80039f2:	f000 f943 	bl	8003c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2246      	movs	r2, #70	@ 0x46
 80039fa:	2101      	movs	r1, #1
 80039fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	223e      	movs	r2, #62	@ 0x3e
 8003a02:	2101      	movs	r1, #1
 8003a04:	5499      	strb	r1, [r3, r2]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	223f      	movs	r2, #63	@ 0x3f
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	5499      	strb	r1, [r3, r2]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2240      	movs	r2, #64	@ 0x40
 8003a12:	2101      	movs	r1, #1
 8003a14:	5499      	strb	r1, [r3, r2]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2241      	movs	r2, #65	@ 0x41
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2242      	movs	r2, #66	@ 0x42
 8003a22:	2101      	movs	r1, #1
 8003a24:	5499      	strb	r1, [r3, r2]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2243      	movs	r2, #67	@ 0x43
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	5499      	strb	r1, [r3, r2]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2244      	movs	r2, #68	@ 0x44
 8003a32:	2101      	movs	r1, #1
 8003a34:	5499      	strb	r1, [r3, r2]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2245      	movs	r2, #69	@ 0x45
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	223d      	movs	r2, #61	@ 0x3d
 8003a42:	2101      	movs	r1, #1
 8003a44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	0018      	movs	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d021      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2202      	movs	r2, #2
 8003a74:	4013      	ands	r3, r2
 8003a76:	d01d      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	4252      	negs	r2, r2
 8003a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2203      	movs	r2, #3
 8003a90:	4013      	ands	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	0018      	movs	r0, r3
 8003a98:	f000 f8d8 	bl	8003c4c <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e007      	b.n	8003aae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f000 f8cb 	bl	8003c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f000 f8d7 	bl	8003c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d022      	beq.n	8003b02 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2204      	movs	r2, #4
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d01e      	beq.n	8003b02 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2205      	movs	r2, #5
 8003aca:	4252      	negs	r2, r2
 8003acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	23c0      	movs	r3, #192	@ 0xc0
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d004      	beq.n	8003aec <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f000 f8b1 	bl	8003c4c <HAL_TIM_IC_CaptureCallback>
 8003aea:	e007      	b.n	8003afc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 f8a4 	bl	8003c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	0018      	movs	r0, r3
 8003af8:	f000 f8b0 	bl	8003c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2208      	movs	r2, #8
 8003b06:	4013      	ands	r3, r2
 8003b08:	d021      	beq.n	8003b4e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2208      	movs	r2, #8
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d01d      	beq.n	8003b4e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2209      	movs	r2, #9
 8003b18:	4252      	negs	r2, r2
 8003b1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2204      	movs	r2, #4
 8003b20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	2203      	movs	r2, #3
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	0018      	movs	r0, r3
 8003b32:	f000 f88b 	bl	8003c4c <HAL_TIM_IC_CaptureCallback>
 8003b36:	e007      	b.n	8003b48 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f000 f87e 	bl	8003c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	0018      	movs	r0, r3
 8003b44:	f000 f88a 	bl	8003c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2210      	movs	r2, #16
 8003b52:	4013      	ands	r3, r2
 8003b54:	d022      	beq.n	8003b9c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2210      	movs	r2, #16
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d01e      	beq.n	8003b9c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2211      	movs	r2, #17
 8003b64:	4252      	negs	r2, r2
 8003b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2208      	movs	r2, #8
 8003b6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	23c0      	movs	r3, #192	@ 0xc0
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d004      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f000 f864 	bl	8003c4c <HAL_TIM_IC_CaptureCallback>
 8003b84:	e007      	b.n	8003b96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f000 f857 	bl	8003c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	0018      	movs	r0, r3
 8003b92:	f000 f863 	bl	8003c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d00c      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d008      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	4252      	negs	r2, r2
 8003bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f000 f837 	bl	8003c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2280      	movs	r2, #128	@ 0x80
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d00c      	beq.n	8003be0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2280      	movs	r2, #128	@ 0x80
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d008      	beq.n	8003be0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2281      	movs	r2, #129	@ 0x81
 8003bd4:	4252      	negs	r2, r2
 8003bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f000 f8da 	bl	8003d94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2240      	movs	r2, #64	@ 0x40
 8003be4:	4013      	ands	r3, r2
 8003be6:	d00c      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2240      	movs	r2, #64	@ 0x40
 8003bec:	4013      	ands	r3, r2
 8003bee:	d008      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2241      	movs	r2, #65	@ 0x41
 8003bf6:	4252      	negs	r2, r2
 8003bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f000 f835 	bl	8003c6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2220      	movs	r2, #32
 8003c06:	4013      	ands	r3, r2
 8003c08:	d00c      	beq.n	8003c24 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d008      	beq.n	8003c24 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2221      	movs	r2, #33	@ 0x21
 8003c18:	4252      	negs	r2, r2
 8003c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 f8b0 	bl	8003d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c24:	46c0      	nop			@ (mov r8, r8)
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b004      	add	sp, #16
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c34:	46c0      	nop			@ (mov r8, r8)
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b002      	add	sp, #8
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c44:	46c0      	nop			@ (mov r8, r8)
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b002      	add	sp, #8
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c54:	46c0      	nop			@ (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b002      	add	sp, #8
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c64:	46c0      	nop			@ (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c74:	46c0      	nop			@ (mov r8, r8)
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a36      	ldr	r2, [pc, #216]	@ (8003d68 <TIM_Base_SetConfig+0xec>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_Base_SetConfig+0x20>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a35      	ldr	r2, [pc, #212]	@ (8003d6c <TIM_Base_SetConfig+0xf0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d108      	bne.n	8003cae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2270      	movs	r2, #112	@ 0x70
 8003ca0:	4393      	bics	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8003d68 <TIM_Base_SetConfig+0xec>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <TIM_Base_SetConfig+0x62>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a2c      	ldr	r2, [pc, #176]	@ (8003d6c <TIM_Base_SetConfig+0xf0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00f      	beq.n	8003cde <TIM_Base_SetConfig+0x62>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8003d70 <TIM_Base_SetConfig+0xf4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00b      	beq.n	8003cde <TIM_Base_SetConfig+0x62>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8003d74 <TIM_Base_SetConfig+0xf8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <TIM_Base_SetConfig+0x62>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a29      	ldr	r2, [pc, #164]	@ (8003d78 <TIM_Base_SetConfig+0xfc>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d003      	beq.n	8003cde <TIM_Base_SetConfig+0x62>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a28      	ldr	r2, [pc, #160]	@ (8003d7c <TIM_Base_SetConfig+0x100>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d108      	bne.n	8003cf0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4a27      	ldr	r2, [pc, #156]	@ (8003d80 <TIM_Base_SetConfig+0x104>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2280      	movs	r2, #128	@ 0x80
 8003cf4:	4393      	bics	r3, r2
 8003cf6:	001a      	movs	r2, r3
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a13      	ldr	r2, [pc, #76]	@ (8003d68 <TIM_Base_SetConfig+0xec>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00b      	beq.n	8003d36 <TIM_Base_SetConfig+0xba>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a14      	ldr	r2, [pc, #80]	@ (8003d74 <TIM_Base_SetConfig+0xf8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d007      	beq.n	8003d36 <TIM_Base_SetConfig+0xba>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a13      	ldr	r2, [pc, #76]	@ (8003d78 <TIM_Base_SetConfig+0xfc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d003      	beq.n	8003d36 <TIM_Base_SetConfig+0xba>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a12      	ldr	r2, [pc, #72]	@ (8003d7c <TIM_Base_SetConfig+0x100>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d103      	bne.n	8003d3e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d106      	bne.n	8003d5e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	2201      	movs	r2, #1
 8003d56:	4393      	bics	r3, r2
 8003d58:	001a      	movs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	611a      	str	r2, [r3, #16]
  }
}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b004      	add	sp, #16
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40002000 	.word	0x40002000
 8003d74:	40014000 	.word	0x40014000
 8003d78:	40014400 	.word	0x40014400
 8003d7c:	40014800 	.word	0x40014800
 8003d80:	fffffcff 	.word	0xfffffcff

08003d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d8c:	46c0      	nop			@ (mov r8, r8)
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b002      	add	sp, #8
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d9c:	46c0      	nop			@ (mov r8, r8)
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b002      	add	sp, #8
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e044      	b.n	8003e40 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d107      	bne.n	8003dce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2278      	movs	r2, #120	@ 0x78
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7fe f8b5 	bl	8001f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2224      	movs	r2, #36	@ 0x24
 8003dd2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2101      	movs	r1, #1
 8003de0:	438a      	bics	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	0018      	movs	r0, r3
 8003df0:	f000 fa0c 	bl	800420c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	0018      	movs	r0, r3
 8003df8:	f000 f8c8 	bl	8003f8c <UART_SetConfig>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e01c      	b.n	8003e40 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	490d      	ldr	r1, [pc, #52]	@ (8003e48 <HAL_UART_Init+0xa4>)
 8003e12:	400a      	ands	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2108      	movs	r1, #8
 8003e22:	438a      	bics	r2, r1
 8003e24:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2101      	movs	r1, #1
 8003e32:	430a      	orrs	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f000 fa9b 	bl	8004374 <UART_CheckIdleState>
 8003e3e:	0003      	movs	r3, r0
}
 8003e40:	0018      	movs	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b002      	add	sp, #8
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	fffff7ff 	.word	0xfffff7ff

08003e4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	@ 0x28
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	1dbb      	adds	r3, r7, #6
 8003e5a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d000      	beq.n	8003e66 <HAL_UART_Transmit+0x1a>
 8003e64:	e08c      	b.n	8003f80 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_UART_Transmit+0x28>
 8003e6c:	1dbb      	adds	r3, r7, #6
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e084      	b.n	8003f82 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	2380      	movs	r3, #128	@ 0x80
 8003e7e:	015b      	lsls	r3, r3, #5
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d109      	bne.n	8003e98 <HAL_UART_Transmit+0x4c>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	4013      	ands	r3, r2
 8003e92:	d001      	beq.n	8003e98 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e074      	b.n	8003f82 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2284      	movs	r2, #132	@ 0x84
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2221      	movs	r2, #33	@ 0x21
 8003ea4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ea6:	f7fe f9ef 	bl	8002288 <HAL_GetTick>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1dba      	adds	r2, r7, #6
 8003eb2:	2150      	movs	r1, #80	@ 0x50
 8003eb4:	8812      	ldrh	r2, [r2, #0]
 8003eb6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1dba      	adds	r2, r7, #6
 8003ebc:	2152      	movs	r1, #82	@ 0x52
 8003ebe:	8812      	ldrh	r2, [r2, #0]
 8003ec0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	2380      	movs	r3, #128	@ 0x80
 8003ec8:	015b      	lsls	r3, r3, #5
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d108      	bne.n	8003ee0 <HAL_UART_Transmit+0x94>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d104      	bne.n	8003ee0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	e003      	b.n	8003ee8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ee8:	e02f      	b.n	8003f4a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	0013      	movs	r3, r2
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2180      	movs	r1, #128	@ 0x80
 8003ef8:	f000 fae4 	bl	80044c4 <UART_WaitOnFlagUntilTimeout>
 8003efc:	1e03      	subs	r3, r0, #0
 8003efe:	d004      	beq.n	8003f0a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e03b      	b.n	8003f82 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10b      	bne.n	8003f28 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	881a      	ldrh	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	05d2      	lsls	r2, r2, #23
 8003f1a:	0dd2      	lsrs	r2, r2, #23
 8003f1c:	b292      	uxth	r2, r2
 8003f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	3302      	adds	r3, #2
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	e007      	b.n	8003f38 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	781a      	ldrb	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	3301      	adds	r3, #1
 8003f36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2252      	movs	r2, #82	@ 0x52
 8003f3c:	5a9b      	ldrh	r3, [r3, r2]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b299      	uxth	r1, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2252      	movs	r2, #82	@ 0x52
 8003f48:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2252      	movs	r2, #82	@ 0x52
 8003f4e:	5a9b      	ldrh	r3, [r3, r2]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1c9      	bne.n	8003eea <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	0013      	movs	r3, r2
 8003f60:	2200      	movs	r2, #0
 8003f62:	2140      	movs	r1, #64	@ 0x40
 8003f64:	f000 faae 	bl	80044c4 <UART_WaitOnFlagUntilTimeout>
 8003f68:	1e03      	subs	r3, r0, #0
 8003f6a:	d004      	beq.n	8003f76 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e005      	b.n	8003f82 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e000      	b.n	8003f82 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003f80:	2302      	movs	r3, #2
  }
}
 8003f82:	0018      	movs	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b008      	add	sp, #32
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f94:	231e      	movs	r3, #30
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	2200      	movs	r2, #0
 8003f9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a8d      	ldr	r2, [pc, #564]	@ (80041f0 <UART_SetConfig+0x264>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	0019      	movs	r1, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4a88      	ldr	r2, [pc, #544]	@ (80041f4 <UART_SetConfig+0x268>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4a7f      	ldr	r2, [pc, #508]	@ (80041f8 <UART_SetConfig+0x26c>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	430a      	orrs	r2, r1
 8004006:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a7b      	ldr	r2, [pc, #492]	@ (80041fc <UART_SetConfig+0x270>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d127      	bne.n	8004062 <UART_SetConfig+0xd6>
 8004012:	4b7b      	ldr	r3, [pc, #492]	@ (8004200 <UART_SetConfig+0x274>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004016:	2203      	movs	r2, #3
 8004018:	4013      	ands	r3, r2
 800401a:	2b03      	cmp	r3, #3
 800401c:	d00d      	beq.n	800403a <UART_SetConfig+0xae>
 800401e:	d81b      	bhi.n	8004058 <UART_SetConfig+0xcc>
 8004020:	2b02      	cmp	r3, #2
 8004022:	d014      	beq.n	800404e <UART_SetConfig+0xc2>
 8004024:	d818      	bhi.n	8004058 <UART_SetConfig+0xcc>
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <UART_SetConfig+0xa4>
 800402a:	2b01      	cmp	r3, #1
 800402c:	d00a      	beq.n	8004044 <UART_SetConfig+0xb8>
 800402e:	e013      	b.n	8004058 <UART_SetConfig+0xcc>
 8004030:	231f      	movs	r3, #31
 8004032:	18fb      	adds	r3, r7, r3
 8004034:	2200      	movs	r2, #0
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	e021      	b.n	800407e <UART_SetConfig+0xf2>
 800403a:	231f      	movs	r3, #31
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	2202      	movs	r2, #2
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	e01c      	b.n	800407e <UART_SetConfig+0xf2>
 8004044:	231f      	movs	r3, #31
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	2204      	movs	r2, #4
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	e017      	b.n	800407e <UART_SetConfig+0xf2>
 800404e:	231f      	movs	r3, #31
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	2208      	movs	r2, #8
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	e012      	b.n	800407e <UART_SetConfig+0xf2>
 8004058:	231f      	movs	r3, #31
 800405a:	18fb      	adds	r3, r7, r3
 800405c:	2210      	movs	r2, #16
 800405e:	701a      	strb	r2, [r3, #0]
 8004060:	e00d      	b.n	800407e <UART_SetConfig+0xf2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a67      	ldr	r2, [pc, #412]	@ (8004204 <UART_SetConfig+0x278>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d104      	bne.n	8004076 <UART_SetConfig+0xea>
 800406c:	231f      	movs	r3, #31
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	2200      	movs	r2, #0
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	e003      	b.n	800407e <UART_SetConfig+0xf2>
 8004076:	231f      	movs	r3, #31
 8004078:	18fb      	adds	r3, r7, r3
 800407a:	2210      	movs	r2, #16
 800407c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69da      	ldr	r2, [r3, #28]
 8004082:	2380      	movs	r3, #128	@ 0x80
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	429a      	cmp	r2, r3
 8004088:	d15c      	bne.n	8004144 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800408a:	231f      	movs	r3, #31
 800408c:	18fb      	adds	r3, r7, r3
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b08      	cmp	r3, #8
 8004092:	d015      	beq.n	80040c0 <UART_SetConfig+0x134>
 8004094:	dc18      	bgt.n	80040c8 <UART_SetConfig+0x13c>
 8004096:	2b04      	cmp	r3, #4
 8004098:	d00d      	beq.n	80040b6 <UART_SetConfig+0x12a>
 800409a:	dc15      	bgt.n	80040c8 <UART_SetConfig+0x13c>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <UART_SetConfig+0x11a>
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d005      	beq.n	80040b0 <UART_SetConfig+0x124>
 80040a4:	e010      	b.n	80040c8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040a6:	f7ff fb9f 	bl	80037e8 <HAL_RCC_GetPCLK1Freq>
 80040aa:	0003      	movs	r3, r0
 80040ac:	61bb      	str	r3, [r7, #24]
        break;
 80040ae:	e012      	b.n	80040d6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040b0:	4b55      	ldr	r3, [pc, #340]	@ (8004208 <UART_SetConfig+0x27c>)
 80040b2:	61bb      	str	r3, [r7, #24]
        break;
 80040b4:	e00f      	b.n	80040d6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b6:	f7ff fb37 	bl	8003728 <HAL_RCC_GetSysClockFreq>
 80040ba:	0003      	movs	r3, r0
 80040bc:	61bb      	str	r3, [r7, #24]
        break;
 80040be:	e00a      	b.n	80040d6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040c0:	2380      	movs	r3, #128	@ 0x80
 80040c2:	021b      	lsls	r3, r3, #8
 80040c4:	61bb      	str	r3, [r7, #24]
        break;
 80040c6:	e006      	b.n	80040d6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040cc:	231e      	movs	r3, #30
 80040ce:	18fb      	adds	r3, r7, r3
 80040d0:	2201      	movs	r2, #1
 80040d2:	701a      	strb	r2, [r3, #0]
        break;
 80040d4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d100      	bne.n	80040de <UART_SetConfig+0x152>
 80040dc:	e07a      	b.n	80041d4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	005a      	lsls	r2, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	085b      	lsrs	r3, r3, #1
 80040e8:	18d2      	adds	r2, r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	0019      	movs	r1, r3
 80040f0:	0010      	movs	r0, r2
 80040f2:	f7fc f813 	bl	800011c <__udivsi3>
 80040f6:	0003      	movs	r3, r0
 80040f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b0f      	cmp	r3, #15
 80040fe:	d91c      	bls.n	800413a <UART_SetConfig+0x1ae>
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	2380      	movs	r3, #128	@ 0x80
 8004104:	025b      	lsls	r3, r3, #9
 8004106:	429a      	cmp	r2, r3
 8004108:	d217      	bcs.n	800413a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	b29a      	uxth	r2, r3
 800410e:	200e      	movs	r0, #14
 8004110:	183b      	adds	r3, r7, r0
 8004112:	210f      	movs	r1, #15
 8004114:	438a      	bics	r2, r1
 8004116:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	085b      	lsrs	r3, r3, #1
 800411c:	b29b      	uxth	r3, r3
 800411e:	2207      	movs	r2, #7
 8004120:	4013      	ands	r3, r2
 8004122:	b299      	uxth	r1, r3
 8004124:	183b      	adds	r3, r7, r0
 8004126:	183a      	adds	r2, r7, r0
 8004128:	8812      	ldrh	r2, [r2, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	183a      	adds	r2, r7, r0
 8004134:	8812      	ldrh	r2, [r2, #0]
 8004136:	60da      	str	r2, [r3, #12]
 8004138:	e04c      	b.n	80041d4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800413a:	231e      	movs	r3, #30
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	e047      	b.n	80041d4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004144:	231f      	movs	r3, #31
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b08      	cmp	r3, #8
 800414c:	d015      	beq.n	800417a <UART_SetConfig+0x1ee>
 800414e:	dc18      	bgt.n	8004182 <UART_SetConfig+0x1f6>
 8004150:	2b04      	cmp	r3, #4
 8004152:	d00d      	beq.n	8004170 <UART_SetConfig+0x1e4>
 8004154:	dc15      	bgt.n	8004182 <UART_SetConfig+0x1f6>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <UART_SetConfig+0x1d4>
 800415a:	2b02      	cmp	r3, #2
 800415c:	d005      	beq.n	800416a <UART_SetConfig+0x1de>
 800415e:	e010      	b.n	8004182 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004160:	f7ff fb42 	bl	80037e8 <HAL_RCC_GetPCLK1Freq>
 8004164:	0003      	movs	r3, r0
 8004166:	61bb      	str	r3, [r7, #24]
        break;
 8004168:	e012      	b.n	8004190 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800416a:	4b27      	ldr	r3, [pc, #156]	@ (8004208 <UART_SetConfig+0x27c>)
 800416c:	61bb      	str	r3, [r7, #24]
        break;
 800416e:	e00f      	b.n	8004190 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004170:	f7ff fada 	bl	8003728 <HAL_RCC_GetSysClockFreq>
 8004174:	0003      	movs	r3, r0
 8004176:	61bb      	str	r3, [r7, #24]
        break;
 8004178:	e00a      	b.n	8004190 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800417a:	2380      	movs	r3, #128	@ 0x80
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	61bb      	str	r3, [r7, #24]
        break;
 8004180:	e006      	b.n	8004190 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004186:	231e      	movs	r3, #30
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	2201      	movs	r2, #1
 800418c:	701a      	strb	r2, [r3, #0]
        break;
 800418e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01e      	beq.n	80041d4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	085a      	lsrs	r2, r3, #1
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	18d2      	adds	r2, r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	0019      	movs	r1, r3
 80041a6:	0010      	movs	r0, r2
 80041a8:	f7fb ffb8 	bl	800011c <__udivsi3>
 80041ac:	0003      	movs	r3, r0
 80041ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b0f      	cmp	r3, #15
 80041b4:	d90a      	bls.n	80041cc <UART_SetConfig+0x240>
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	2380      	movs	r3, #128	@ 0x80
 80041ba:	025b      	lsls	r3, r3, #9
 80041bc:	429a      	cmp	r2, r3
 80041be:	d205      	bcs.n	80041cc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60da      	str	r2, [r3, #12]
 80041ca:	e003      	b.n	80041d4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80041cc:	231e      	movs	r3, #30
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	2201      	movs	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041e0:	231e      	movs	r3, #30
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	781b      	ldrb	r3, [r3, #0]
}
 80041e6:	0018      	movs	r0, r3
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b008      	add	sp, #32
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	46c0      	nop			@ (mov r8, r8)
 80041f0:	ffff69f3 	.word	0xffff69f3
 80041f4:	ffffcfff 	.word	0xffffcfff
 80041f8:	fffff4ff 	.word	0xfffff4ff
 80041fc:	40013800 	.word	0x40013800
 8004200:	40021000 	.word	0x40021000
 8004204:	40004400 	.word	0x40004400
 8004208:	007a1200 	.word	0x007a1200

0800420c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	2208      	movs	r2, #8
 800421a:	4013      	ands	r3, r2
 800421c:	d00b      	beq.n	8004236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4a4a      	ldr	r2, [pc, #296]	@ (8004350 <UART_AdvFeatureConfig+0x144>)
 8004226:	4013      	ands	r3, r2
 8004228:	0019      	movs	r1, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	2201      	movs	r2, #1
 800423c:	4013      	ands	r3, r2
 800423e:	d00b      	beq.n	8004258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	4a43      	ldr	r2, [pc, #268]	@ (8004354 <UART_AdvFeatureConfig+0x148>)
 8004248:	4013      	ands	r3, r2
 800424a:	0019      	movs	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	2202      	movs	r2, #2
 800425e:	4013      	ands	r3, r2
 8004260:	d00b      	beq.n	800427a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4a3b      	ldr	r2, [pc, #236]	@ (8004358 <UART_AdvFeatureConfig+0x14c>)
 800426a:	4013      	ands	r3, r2
 800426c:	0019      	movs	r1, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	2204      	movs	r2, #4
 8004280:	4013      	ands	r3, r2
 8004282:	d00b      	beq.n	800429c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	4a34      	ldr	r2, [pc, #208]	@ (800435c <UART_AdvFeatureConfig+0x150>)
 800428c:	4013      	ands	r3, r2
 800428e:	0019      	movs	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a0:	2210      	movs	r2, #16
 80042a2:	4013      	ands	r3, r2
 80042a4:	d00b      	beq.n	80042be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004360 <UART_AdvFeatureConfig+0x154>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	0019      	movs	r1, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c2:	2220      	movs	r2, #32
 80042c4:	4013      	ands	r3, r2
 80042c6:	d00b      	beq.n	80042e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	4a25      	ldr	r2, [pc, #148]	@ (8004364 <UART_AdvFeatureConfig+0x158>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	0019      	movs	r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e4:	2240      	movs	r2, #64	@ 0x40
 80042e6:	4013      	ands	r3, r2
 80042e8:	d01d      	beq.n	8004326 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004368 <UART_AdvFeatureConfig+0x15c>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	0019      	movs	r1, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004306:	2380      	movs	r3, #128	@ 0x80
 8004308:	035b      	lsls	r3, r3, #13
 800430a:	429a      	cmp	r2, r3
 800430c:	d10b      	bne.n	8004326 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	4a15      	ldr	r2, [pc, #84]	@ (800436c <UART_AdvFeatureConfig+0x160>)
 8004316:	4013      	ands	r3, r2
 8004318:	0019      	movs	r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	2280      	movs	r2, #128	@ 0x80
 800432c:	4013      	ands	r3, r2
 800432e:	d00b      	beq.n	8004348 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4a0e      	ldr	r2, [pc, #56]	@ (8004370 <UART_AdvFeatureConfig+0x164>)
 8004338:	4013      	ands	r3, r2
 800433a:	0019      	movs	r1, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
  }
}
 8004348:	46c0      	nop			@ (mov r8, r8)
 800434a:	46bd      	mov	sp, r7
 800434c:	b002      	add	sp, #8
 800434e:	bd80      	pop	{r7, pc}
 8004350:	ffff7fff 	.word	0xffff7fff
 8004354:	fffdffff 	.word	0xfffdffff
 8004358:	fffeffff 	.word	0xfffeffff
 800435c:	fffbffff 	.word	0xfffbffff
 8004360:	ffffefff 	.word	0xffffefff
 8004364:	ffffdfff 	.word	0xffffdfff
 8004368:	ffefffff 	.word	0xffefffff
 800436c:	ff9fffff 	.word	0xff9fffff
 8004370:	fff7ffff 	.word	0xfff7ffff

08004374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b092      	sub	sp, #72	@ 0x48
 8004378:	af02      	add	r7, sp, #8
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2284      	movs	r2, #132	@ 0x84
 8004380:	2100      	movs	r1, #0
 8004382:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004384:	f7fd ff80 	bl	8002288 <HAL_GetTick>
 8004388:	0003      	movs	r3, r0
 800438a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2208      	movs	r2, #8
 8004394:	4013      	ands	r3, r2
 8004396:	2b08      	cmp	r3, #8
 8004398:	d12c      	bne.n	80043f4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800439a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800439c:	2280      	movs	r2, #128	@ 0x80
 800439e:	0391      	lsls	r1, r2, #14
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4a46      	ldr	r2, [pc, #280]	@ (80044bc <UART_CheckIdleState+0x148>)
 80043a4:	9200      	str	r2, [sp, #0]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f000 f88c 	bl	80044c4 <UART_WaitOnFlagUntilTimeout>
 80043ac:	1e03      	subs	r3, r0, #0
 80043ae:	d021      	beq.n	80043f4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043b0:	f3ef 8310 	mrs	r3, PRIMASK
 80043b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043ba:	2301      	movs	r3, #1
 80043bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c0:	f383 8810 	msr	PRIMASK, r3
}
 80043c4:	46c0      	nop			@ (mov r8, r8)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2180      	movs	r1, #128	@ 0x80
 80043d2:	438a      	bics	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043dc:	f383 8810 	msr	PRIMASK, r3
}
 80043e0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2278      	movs	r2, #120	@ 0x78
 80043ec:	2100      	movs	r1, #0
 80043ee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e05f      	b.n	80044b4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2204      	movs	r2, #4
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d146      	bne.n	8004490 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004404:	2280      	movs	r2, #128	@ 0x80
 8004406:	03d1      	lsls	r1, r2, #15
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4a2c      	ldr	r2, [pc, #176]	@ (80044bc <UART_CheckIdleState+0x148>)
 800440c:	9200      	str	r2, [sp, #0]
 800440e:	2200      	movs	r2, #0
 8004410:	f000 f858 	bl	80044c4 <UART_WaitOnFlagUntilTimeout>
 8004414:	1e03      	subs	r3, r0, #0
 8004416:	d03b      	beq.n	8004490 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004418:	f3ef 8310 	mrs	r3, PRIMASK
 800441c:	60fb      	str	r3, [r7, #12]
  return(result);
 800441e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004420:	637b      	str	r3, [r7, #52]	@ 0x34
 8004422:	2301      	movs	r3, #1
 8004424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f383 8810 	msr	PRIMASK, r3
}
 800442c:	46c0      	nop			@ (mov r8, r8)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4921      	ldr	r1, [pc, #132]	@ (80044c0 <UART_CheckIdleState+0x14c>)
 800443a:	400a      	ands	r2, r1
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004440:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f383 8810 	msr	PRIMASK, r3
}
 8004448:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800444a:	f3ef 8310 	mrs	r3, PRIMASK
 800444e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004450:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004452:	633b      	str	r3, [r7, #48]	@ 0x30
 8004454:	2301      	movs	r3, #1
 8004456:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f383 8810 	msr	PRIMASK, r3
}
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2101      	movs	r1, #1
 800446c:	438a      	bics	r2, r1
 800446e:	609a      	str	r2, [r3, #8]
 8004470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004472:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	f383 8810 	msr	PRIMASK, r3
}
 800447a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2280      	movs	r2, #128	@ 0x80
 8004480:	2120      	movs	r1, #32
 8004482:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2278      	movs	r2, #120	@ 0x78
 8004488:	2100      	movs	r1, #0
 800448a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e011      	b.n	80044b4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2280      	movs	r2, #128	@ 0x80
 800449a:	2120      	movs	r1, #32
 800449c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2278      	movs	r2, #120	@ 0x78
 80044ae:	2100      	movs	r1, #0
 80044b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	0018      	movs	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b010      	add	sp, #64	@ 0x40
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	01ffffff 	.word	0x01ffffff
 80044c0:	fffffedf 	.word	0xfffffedf

080044c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	1dfb      	adds	r3, r7, #7
 80044d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d4:	e051      	b.n	800457a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	3301      	adds	r3, #1
 80044da:	d04e      	beq.n	800457a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044dc:	f7fd fed4 	bl	8002288 <HAL_GetTick>
 80044e0:	0002      	movs	r2, r0
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d302      	bcc.n	80044f2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e051      	b.n	800459a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2204      	movs	r2, #4
 80044fe:	4013      	ands	r3, r2
 8004500:	d03b      	beq.n	800457a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b80      	cmp	r3, #128	@ 0x80
 8004506:	d038      	beq.n	800457a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b40      	cmp	r3, #64	@ 0x40
 800450c:	d035      	beq.n	800457a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	2208      	movs	r2, #8
 8004516:	4013      	ands	r3, r2
 8004518:	2b08      	cmp	r3, #8
 800451a:	d111      	bne.n	8004540 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2208      	movs	r2, #8
 8004522:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	0018      	movs	r0, r3
 8004528:	f000 f83c 	bl	80045a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2284      	movs	r2, #132	@ 0x84
 8004530:	2108      	movs	r1, #8
 8004532:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2278      	movs	r2, #120	@ 0x78
 8004538:	2100      	movs	r1, #0
 800453a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e02c      	b.n	800459a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69da      	ldr	r2, [r3, #28]
 8004546:	2380      	movs	r3, #128	@ 0x80
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	401a      	ands	r2, r3
 800454c:	2380      	movs	r3, #128	@ 0x80
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	429a      	cmp	r2, r3
 8004552:	d112      	bne.n	800457a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2280      	movs	r2, #128	@ 0x80
 800455a:	0112      	lsls	r2, r2, #4
 800455c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	0018      	movs	r0, r3
 8004562:	f000 f81f 	bl	80045a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2284      	movs	r2, #132	@ 0x84
 800456a:	2120      	movs	r1, #32
 800456c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2278      	movs	r2, #120	@ 0x78
 8004572:	2100      	movs	r1, #0
 8004574:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e00f      	b.n	800459a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	4013      	ands	r3, r2
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	425a      	negs	r2, r3
 800458a:	4153      	adcs	r3, r2
 800458c:	b2db      	uxtb	r3, r3
 800458e:	001a      	movs	r2, r3
 8004590:	1dfb      	adds	r3, r7, #7
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d09e      	beq.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	0018      	movs	r0, r3
 800459c:	46bd      	mov	sp, r7
 800459e:	b004      	add	sp, #16
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08e      	sub	sp, #56	@ 0x38
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ac:	f3ef 8310 	mrs	r3, PRIMASK
 80045b0:	617b      	str	r3, [r7, #20]
  return(result);
 80045b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80045b6:	2301      	movs	r3, #1
 80045b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	f383 8810 	msr	PRIMASK, r3
}
 80045c0:	46c0      	nop			@ (mov r8, r8)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4926      	ldr	r1, [pc, #152]	@ (8004668 <UART_EndRxTransfer+0xc4>)
 80045ce:	400a      	ands	r2, r1
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f383 8810 	msr	PRIMASK, r3
}
 80045dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045de:	f3ef 8310 	mrs	r3, PRIMASK
 80045e2:	623b      	str	r3, [r7, #32]
  return(result);
 80045e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80045e8:	2301      	movs	r3, #1
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ee:	f383 8810 	msr	PRIMASK, r3
}
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2101      	movs	r1, #1
 8004600:	438a      	bics	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
 8004604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004606:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460a:	f383 8810 	msr	PRIMASK, r3
}
 800460e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004614:	2b01      	cmp	r3, #1
 8004616:	d118      	bne.n	800464a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004618:	f3ef 8310 	mrs	r3, PRIMASK
 800461c:	60bb      	str	r3, [r7, #8]
  return(result);
 800461e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004622:	2301      	movs	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f383 8810 	msr	PRIMASK, r3
}
 800462c:	46c0      	nop			@ (mov r8, r8)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2110      	movs	r1, #16
 800463a:	438a      	bics	r2, r1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004640:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f383 8810 	msr	PRIMASK, r3
}
 8004648:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2280      	movs	r2, #128	@ 0x80
 800464e:	2120      	movs	r1, #32
 8004650:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800465e:	46c0      	nop			@ (mov r8, r8)
 8004660:	46bd      	mov	sp, r7
 8004662:	b00e      	add	sp, #56	@ 0x38
 8004664:	bd80      	pop	{r7, pc}
 8004666:	46c0      	nop			@ (mov r8, r8)
 8004668:	fffffedf 	.word	0xfffffedf

0800466c <std>:
 800466c:	2300      	movs	r3, #0
 800466e:	b510      	push	{r4, lr}
 8004670:	0004      	movs	r4, r0
 8004672:	6003      	str	r3, [r0, #0]
 8004674:	6043      	str	r3, [r0, #4]
 8004676:	6083      	str	r3, [r0, #8]
 8004678:	8181      	strh	r1, [r0, #12]
 800467a:	6643      	str	r3, [r0, #100]	@ 0x64
 800467c:	81c2      	strh	r2, [r0, #14]
 800467e:	6103      	str	r3, [r0, #16]
 8004680:	6143      	str	r3, [r0, #20]
 8004682:	6183      	str	r3, [r0, #24]
 8004684:	0019      	movs	r1, r3
 8004686:	2208      	movs	r2, #8
 8004688:	305c      	adds	r0, #92	@ 0x5c
 800468a:	f000 fa0f 	bl	8004aac <memset>
 800468e:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <std+0x50>)
 8004690:	6224      	str	r4, [r4, #32]
 8004692:	6263      	str	r3, [r4, #36]	@ 0x24
 8004694:	4b0a      	ldr	r3, [pc, #40]	@ (80046c0 <std+0x54>)
 8004696:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004698:	4b0a      	ldr	r3, [pc, #40]	@ (80046c4 <std+0x58>)
 800469a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800469c:	4b0a      	ldr	r3, [pc, #40]	@ (80046c8 <std+0x5c>)
 800469e:	6323      	str	r3, [r4, #48]	@ 0x30
 80046a0:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <std+0x60>)
 80046a2:	429c      	cmp	r4, r3
 80046a4:	d005      	beq.n	80046b2 <std+0x46>
 80046a6:	4b0a      	ldr	r3, [pc, #40]	@ (80046d0 <std+0x64>)
 80046a8:	429c      	cmp	r4, r3
 80046aa:	d002      	beq.n	80046b2 <std+0x46>
 80046ac:	4b09      	ldr	r3, [pc, #36]	@ (80046d4 <std+0x68>)
 80046ae:	429c      	cmp	r4, r3
 80046b0:	d103      	bne.n	80046ba <std+0x4e>
 80046b2:	0020      	movs	r0, r4
 80046b4:	3058      	adds	r0, #88	@ 0x58
 80046b6:	f000 fa79 	bl	8004bac <__retarget_lock_init_recursive>
 80046ba:	bd10      	pop	{r4, pc}
 80046bc:	080048d5 	.word	0x080048d5
 80046c0:	080048fd 	.word	0x080048fd
 80046c4:	08004935 	.word	0x08004935
 80046c8:	08004961 	.word	0x08004961
 80046cc:	200001dc 	.word	0x200001dc
 80046d0:	20000244 	.word	0x20000244
 80046d4:	200002ac 	.word	0x200002ac

080046d8 <stdio_exit_handler>:
 80046d8:	b510      	push	{r4, lr}
 80046da:	4a03      	ldr	r2, [pc, #12]	@ (80046e8 <stdio_exit_handler+0x10>)
 80046dc:	4903      	ldr	r1, [pc, #12]	@ (80046ec <stdio_exit_handler+0x14>)
 80046de:	4804      	ldr	r0, [pc, #16]	@ (80046f0 <stdio_exit_handler+0x18>)
 80046e0:	f000 f86c 	bl	80047bc <_fwalk_sglue>
 80046e4:	bd10      	pop	{r4, pc}
 80046e6:	46c0      	nop			@ (mov r8, r8)
 80046e8:	20000024 	.word	0x20000024
 80046ec:	0800543d 	.word	0x0800543d
 80046f0:	20000034 	.word	0x20000034

080046f4 <cleanup_stdio>:
 80046f4:	6841      	ldr	r1, [r0, #4]
 80046f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <cleanup_stdio+0x30>)
 80046f8:	b510      	push	{r4, lr}
 80046fa:	0004      	movs	r4, r0
 80046fc:	4299      	cmp	r1, r3
 80046fe:	d001      	beq.n	8004704 <cleanup_stdio+0x10>
 8004700:	f000 fe9c 	bl	800543c <_fflush_r>
 8004704:	68a1      	ldr	r1, [r4, #8]
 8004706:	4b08      	ldr	r3, [pc, #32]	@ (8004728 <cleanup_stdio+0x34>)
 8004708:	4299      	cmp	r1, r3
 800470a:	d002      	beq.n	8004712 <cleanup_stdio+0x1e>
 800470c:	0020      	movs	r0, r4
 800470e:	f000 fe95 	bl	800543c <_fflush_r>
 8004712:	68e1      	ldr	r1, [r4, #12]
 8004714:	4b05      	ldr	r3, [pc, #20]	@ (800472c <cleanup_stdio+0x38>)
 8004716:	4299      	cmp	r1, r3
 8004718:	d002      	beq.n	8004720 <cleanup_stdio+0x2c>
 800471a:	0020      	movs	r0, r4
 800471c:	f000 fe8e 	bl	800543c <_fflush_r>
 8004720:	bd10      	pop	{r4, pc}
 8004722:	46c0      	nop			@ (mov r8, r8)
 8004724:	200001dc 	.word	0x200001dc
 8004728:	20000244 	.word	0x20000244
 800472c:	200002ac 	.word	0x200002ac

08004730 <global_stdio_init.part.0>:
 8004730:	b510      	push	{r4, lr}
 8004732:	4b09      	ldr	r3, [pc, #36]	@ (8004758 <global_stdio_init.part.0+0x28>)
 8004734:	4a09      	ldr	r2, [pc, #36]	@ (800475c <global_stdio_init.part.0+0x2c>)
 8004736:	2104      	movs	r1, #4
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	4809      	ldr	r0, [pc, #36]	@ (8004760 <global_stdio_init.part.0+0x30>)
 800473c:	2200      	movs	r2, #0
 800473e:	f7ff ff95 	bl	800466c <std>
 8004742:	2201      	movs	r2, #1
 8004744:	2109      	movs	r1, #9
 8004746:	4807      	ldr	r0, [pc, #28]	@ (8004764 <global_stdio_init.part.0+0x34>)
 8004748:	f7ff ff90 	bl	800466c <std>
 800474c:	2202      	movs	r2, #2
 800474e:	2112      	movs	r1, #18
 8004750:	4805      	ldr	r0, [pc, #20]	@ (8004768 <global_stdio_init.part.0+0x38>)
 8004752:	f7ff ff8b 	bl	800466c <std>
 8004756:	bd10      	pop	{r4, pc}
 8004758:	20000314 	.word	0x20000314
 800475c:	080046d9 	.word	0x080046d9
 8004760:	200001dc 	.word	0x200001dc
 8004764:	20000244 	.word	0x20000244
 8004768:	200002ac 	.word	0x200002ac

0800476c <__sfp_lock_acquire>:
 800476c:	b510      	push	{r4, lr}
 800476e:	4802      	ldr	r0, [pc, #8]	@ (8004778 <__sfp_lock_acquire+0xc>)
 8004770:	f000 fa1d 	bl	8004bae <__retarget_lock_acquire_recursive>
 8004774:	bd10      	pop	{r4, pc}
 8004776:	46c0      	nop			@ (mov r8, r8)
 8004778:	2000031d 	.word	0x2000031d

0800477c <__sfp_lock_release>:
 800477c:	b510      	push	{r4, lr}
 800477e:	4802      	ldr	r0, [pc, #8]	@ (8004788 <__sfp_lock_release+0xc>)
 8004780:	f000 fa16 	bl	8004bb0 <__retarget_lock_release_recursive>
 8004784:	bd10      	pop	{r4, pc}
 8004786:	46c0      	nop			@ (mov r8, r8)
 8004788:	2000031d 	.word	0x2000031d

0800478c <__sinit>:
 800478c:	b510      	push	{r4, lr}
 800478e:	0004      	movs	r4, r0
 8004790:	f7ff ffec 	bl	800476c <__sfp_lock_acquire>
 8004794:	6a23      	ldr	r3, [r4, #32]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <__sinit+0x14>
 800479a:	f7ff ffef 	bl	800477c <__sfp_lock_release>
 800479e:	bd10      	pop	{r4, pc}
 80047a0:	4b04      	ldr	r3, [pc, #16]	@ (80047b4 <__sinit+0x28>)
 80047a2:	6223      	str	r3, [r4, #32]
 80047a4:	4b04      	ldr	r3, [pc, #16]	@ (80047b8 <__sinit+0x2c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f6      	bne.n	800479a <__sinit+0xe>
 80047ac:	f7ff ffc0 	bl	8004730 <global_stdio_init.part.0>
 80047b0:	e7f3      	b.n	800479a <__sinit+0xe>
 80047b2:	46c0      	nop			@ (mov r8, r8)
 80047b4:	080046f5 	.word	0x080046f5
 80047b8:	20000314 	.word	0x20000314

080047bc <_fwalk_sglue>:
 80047bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047be:	0014      	movs	r4, r2
 80047c0:	2600      	movs	r6, #0
 80047c2:	9000      	str	r0, [sp, #0]
 80047c4:	9101      	str	r1, [sp, #4]
 80047c6:	68a5      	ldr	r5, [r4, #8]
 80047c8:	6867      	ldr	r7, [r4, #4]
 80047ca:	3f01      	subs	r7, #1
 80047cc:	d504      	bpl.n	80047d8 <_fwalk_sglue+0x1c>
 80047ce:	6824      	ldr	r4, [r4, #0]
 80047d0:	2c00      	cmp	r4, #0
 80047d2:	d1f8      	bne.n	80047c6 <_fwalk_sglue+0xa>
 80047d4:	0030      	movs	r0, r6
 80047d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047d8:	89ab      	ldrh	r3, [r5, #12]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d908      	bls.n	80047f0 <_fwalk_sglue+0x34>
 80047de:	220e      	movs	r2, #14
 80047e0:	5eab      	ldrsh	r3, [r5, r2]
 80047e2:	3301      	adds	r3, #1
 80047e4:	d004      	beq.n	80047f0 <_fwalk_sglue+0x34>
 80047e6:	0029      	movs	r1, r5
 80047e8:	9800      	ldr	r0, [sp, #0]
 80047ea:	9b01      	ldr	r3, [sp, #4]
 80047ec:	4798      	blx	r3
 80047ee:	4306      	orrs	r6, r0
 80047f0:	3568      	adds	r5, #104	@ 0x68
 80047f2:	e7ea      	b.n	80047ca <_fwalk_sglue+0xe>

080047f4 <iprintf>:
 80047f4:	b40f      	push	{r0, r1, r2, r3}
 80047f6:	b507      	push	{r0, r1, r2, lr}
 80047f8:	4905      	ldr	r1, [pc, #20]	@ (8004810 <iprintf+0x1c>)
 80047fa:	ab04      	add	r3, sp, #16
 80047fc:	6808      	ldr	r0, [r1, #0]
 80047fe:	cb04      	ldmia	r3!, {r2}
 8004800:	6881      	ldr	r1, [r0, #8]
 8004802:	9301      	str	r3, [sp, #4]
 8004804:	f000 fafa 	bl	8004dfc <_vfiprintf_r>
 8004808:	b003      	add	sp, #12
 800480a:	bc08      	pop	{r3}
 800480c:	b004      	add	sp, #16
 800480e:	4718      	bx	r3
 8004810:	20000030 	.word	0x20000030

08004814 <_puts_r>:
 8004814:	6a03      	ldr	r3, [r0, #32]
 8004816:	b570      	push	{r4, r5, r6, lr}
 8004818:	0005      	movs	r5, r0
 800481a:	000e      	movs	r6, r1
 800481c:	6884      	ldr	r4, [r0, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <_puts_r+0x12>
 8004822:	f7ff ffb3 	bl	800478c <__sinit>
 8004826:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004828:	07db      	lsls	r3, r3, #31
 800482a:	d405      	bmi.n	8004838 <_puts_r+0x24>
 800482c:	89a3      	ldrh	r3, [r4, #12]
 800482e:	059b      	lsls	r3, r3, #22
 8004830:	d402      	bmi.n	8004838 <_puts_r+0x24>
 8004832:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004834:	f000 f9bb 	bl	8004bae <__retarget_lock_acquire_recursive>
 8004838:	89a3      	ldrh	r3, [r4, #12]
 800483a:	071b      	lsls	r3, r3, #28
 800483c:	d502      	bpl.n	8004844 <_puts_r+0x30>
 800483e:	6923      	ldr	r3, [r4, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d11f      	bne.n	8004884 <_puts_r+0x70>
 8004844:	0021      	movs	r1, r4
 8004846:	0028      	movs	r0, r5
 8004848:	f000 f8d2 	bl	80049f0 <__swsetup_r>
 800484c:	2800      	cmp	r0, #0
 800484e:	d019      	beq.n	8004884 <_puts_r+0x70>
 8004850:	2501      	movs	r5, #1
 8004852:	426d      	negs	r5, r5
 8004854:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004856:	07db      	lsls	r3, r3, #31
 8004858:	d405      	bmi.n	8004866 <_puts_r+0x52>
 800485a:	89a3      	ldrh	r3, [r4, #12]
 800485c:	059b      	lsls	r3, r3, #22
 800485e:	d402      	bmi.n	8004866 <_puts_r+0x52>
 8004860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004862:	f000 f9a5 	bl	8004bb0 <__retarget_lock_release_recursive>
 8004866:	0028      	movs	r0, r5
 8004868:	bd70      	pop	{r4, r5, r6, pc}
 800486a:	3601      	adds	r6, #1
 800486c:	60a3      	str	r3, [r4, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	da04      	bge.n	800487c <_puts_r+0x68>
 8004872:	69a2      	ldr	r2, [r4, #24]
 8004874:	429a      	cmp	r2, r3
 8004876:	dc16      	bgt.n	80048a6 <_puts_r+0x92>
 8004878:	290a      	cmp	r1, #10
 800487a:	d014      	beq.n	80048a6 <_puts_r+0x92>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	6022      	str	r2, [r4, #0]
 8004882:	7019      	strb	r1, [r3, #0]
 8004884:	68a3      	ldr	r3, [r4, #8]
 8004886:	7831      	ldrb	r1, [r6, #0]
 8004888:	3b01      	subs	r3, #1
 800488a:	2900      	cmp	r1, #0
 800488c:	d1ed      	bne.n	800486a <_puts_r+0x56>
 800488e:	60a3      	str	r3, [r4, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	da0f      	bge.n	80048b4 <_puts_r+0xa0>
 8004894:	0022      	movs	r2, r4
 8004896:	0028      	movs	r0, r5
 8004898:	310a      	adds	r1, #10
 800489a:	f000 f867 	bl	800496c <__swbuf_r>
 800489e:	3001      	adds	r0, #1
 80048a0:	d0d6      	beq.n	8004850 <_puts_r+0x3c>
 80048a2:	250a      	movs	r5, #10
 80048a4:	e7d6      	b.n	8004854 <_puts_r+0x40>
 80048a6:	0022      	movs	r2, r4
 80048a8:	0028      	movs	r0, r5
 80048aa:	f000 f85f 	bl	800496c <__swbuf_r>
 80048ae:	3001      	adds	r0, #1
 80048b0:	d1e8      	bne.n	8004884 <_puts_r+0x70>
 80048b2:	e7cd      	b.n	8004850 <_puts_r+0x3c>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	6022      	str	r2, [r4, #0]
 80048ba:	220a      	movs	r2, #10
 80048bc:	701a      	strb	r2, [r3, #0]
 80048be:	e7f0      	b.n	80048a2 <_puts_r+0x8e>

080048c0 <puts>:
 80048c0:	b510      	push	{r4, lr}
 80048c2:	4b03      	ldr	r3, [pc, #12]	@ (80048d0 <puts+0x10>)
 80048c4:	0001      	movs	r1, r0
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	f7ff ffa4 	bl	8004814 <_puts_r>
 80048cc:	bd10      	pop	{r4, pc}
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	20000030 	.word	0x20000030

080048d4 <__sread>:
 80048d4:	b570      	push	{r4, r5, r6, lr}
 80048d6:	000c      	movs	r4, r1
 80048d8:	250e      	movs	r5, #14
 80048da:	5f49      	ldrsh	r1, [r1, r5]
 80048dc:	f000 f914 	bl	8004b08 <_read_r>
 80048e0:	2800      	cmp	r0, #0
 80048e2:	db03      	blt.n	80048ec <__sread+0x18>
 80048e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80048e6:	181b      	adds	r3, r3, r0
 80048e8:	6563      	str	r3, [r4, #84]	@ 0x54
 80048ea:	bd70      	pop	{r4, r5, r6, pc}
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	4a02      	ldr	r2, [pc, #8]	@ (80048f8 <__sread+0x24>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	81a3      	strh	r3, [r4, #12]
 80048f4:	e7f9      	b.n	80048ea <__sread+0x16>
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	ffffefff 	.word	0xffffefff

080048fc <__swrite>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	001f      	movs	r7, r3
 8004900:	898b      	ldrh	r3, [r1, #12]
 8004902:	0005      	movs	r5, r0
 8004904:	000c      	movs	r4, r1
 8004906:	0016      	movs	r6, r2
 8004908:	05db      	lsls	r3, r3, #23
 800490a:	d505      	bpl.n	8004918 <__swrite+0x1c>
 800490c:	230e      	movs	r3, #14
 800490e:	5ec9      	ldrsh	r1, [r1, r3]
 8004910:	2200      	movs	r2, #0
 8004912:	2302      	movs	r3, #2
 8004914:	f000 f8e4 	bl	8004ae0 <_lseek_r>
 8004918:	89a3      	ldrh	r3, [r4, #12]
 800491a:	4a05      	ldr	r2, [pc, #20]	@ (8004930 <__swrite+0x34>)
 800491c:	0028      	movs	r0, r5
 800491e:	4013      	ands	r3, r2
 8004920:	81a3      	strh	r3, [r4, #12]
 8004922:	0032      	movs	r2, r6
 8004924:	230e      	movs	r3, #14
 8004926:	5ee1      	ldrsh	r1, [r4, r3]
 8004928:	003b      	movs	r3, r7
 800492a:	f000 f901 	bl	8004b30 <_write_r>
 800492e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004930:	ffffefff 	.word	0xffffefff

08004934 <__sseek>:
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	000c      	movs	r4, r1
 8004938:	250e      	movs	r5, #14
 800493a:	5f49      	ldrsh	r1, [r1, r5]
 800493c:	f000 f8d0 	bl	8004ae0 <_lseek_r>
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	1c42      	adds	r2, r0, #1
 8004944:	d103      	bne.n	800494e <__sseek+0x1a>
 8004946:	4a05      	ldr	r2, [pc, #20]	@ (800495c <__sseek+0x28>)
 8004948:	4013      	ands	r3, r2
 800494a:	81a3      	strh	r3, [r4, #12]
 800494c:	bd70      	pop	{r4, r5, r6, pc}
 800494e:	2280      	movs	r2, #128	@ 0x80
 8004950:	0152      	lsls	r2, r2, #5
 8004952:	4313      	orrs	r3, r2
 8004954:	81a3      	strh	r3, [r4, #12]
 8004956:	6560      	str	r0, [r4, #84]	@ 0x54
 8004958:	e7f8      	b.n	800494c <__sseek+0x18>
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	ffffefff 	.word	0xffffefff

08004960 <__sclose>:
 8004960:	b510      	push	{r4, lr}
 8004962:	230e      	movs	r3, #14
 8004964:	5ec9      	ldrsh	r1, [r1, r3]
 8004966:	f000 f8a9 	bl	8004abc <_close_r>
 800496a:	bd10      	pop	{r4, pc}

0800496c <__swbuf_r>:
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496e:	0006      	movs	r6, r0
 8004970:	000d      	movs	r5, r1
 8004972:	0014      	movs	r4, r2
 8004974:	2800      	cmp	r0, #0
 8004976:	d004      	beq.n	8004982 <__swbuf_r+0x16>
 8004978:	6a03      	ldr	r3, [r0, #32]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <__swbuf_r+0x16>
 800497e:	f7ff ff05 	bl	800478c <__sinit>
 8004982:	69a3      	ldr	r3, [r4, #24]
 8004984:	60a3      	str	r3, [r4, #8]
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	071b      	lsls	r3, r3, #28
 800498a:	d502      	bpl.n	8004992 <__swbuf_r+0x26>
 800498c:	6923      	ldr	r3, [r4, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d109      	bne.n	80049a6 <__swbuf_r+0x3a>
 8004992:	0021      	movs	r1, r4
 8004994:	0030      	movs	r0, r6
 8004996:	f000 f82b 	bl	80049f0 <__swsetup_r>
 800499a:	2800      	cmp	r0, #0
 800499c:	d003      	beq.n	80049a6 <__swbuf_r+0x3a>
 800499e:	2501      	movs	r5, #1
 80049a0:	426d      	negs	r5, r5
 80049a2:	0028      	movs	r0, r5
 80049a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049a6:	6923      	ldr	r3, [r4, #16]
 80049a8:	6820      	ldr	r0, [r4, #0]
 80049aa:	b2ef      	uxtb	r7, r5
 80049ac:	1ac0      	subs	r0, r0, r3
 80049ae:	6963      	ldr	r3, [r4, #20]
 80049b0:	b2ed      	uxtb	r5, r5
 80049b2:	4283      	cmp	r3, r0
 80049b4:	dc05      	bgt.n	80049c2 <__swbuf_r+0x56>
 80049b6:	0021      	movs	r1, r4
 80049b8:	0030      	movs	r0, r6
 80049ba:	f000 fd3f 	bl	800543c <_fflush_r>
 80049be:	2800      	cmp	r0, #0
 80049c0:	d1ed      	bne.n	800499e <__swbuf_r+0x32>
 80049c2:	68a3      	ldr	r3, [r4, #8]
 80049c4:	3001      	adds	r0, #1
 80049c6:	3b01      	subs	r3, #1
 80049c8:	60a3      	str	r3, [r4, #8]
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	6022      	str	r2, [r4, #0]
 80049d0:	701f      	strb	r7, [r3, #0]
 80049d2:	6963      	ldr	r3, [r4, #20]
 80049d4:	4283      	cmp	r3, r0
 80049d6:	d004      	beq.n	80049e2 <__swbuf_r+0x76>
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	07db      	lsls	r3, r3, #31
 80049dc:	d5e1      	bpl.n	80049a2 <__swbuf_r+0x36>
 80049de:	2d0a      	cmp	r5, #10
 80049e0:	d1df      	bne.n	80049a2 <__swbuf_r+0x36>
 80049e2:	0021      	movs	r1, r4
 80049e4:	0030      	movs	r0, r6
 80049e6:	f000 fd29 	bl	800543c <_fflush_r>
 80049ea:	2800      	cmp	r0, #0
 80049ec:	d0d9      	beq.n	80049a2 <__swbuf_r+0x36>
 80049ee:	e7d6      	b.n	800499e <__swbuf_r+0x32>

080049f0 <__swsetup_r>:
 80049f0:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa8 <__swsetup_r+0xb8>)
 80049f2:	b570      	push	{r4, r5, r6, lr}
 80049f4:	0005      	movs	r5, r0
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	000c      	movs	r4, r1
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d004      	beq.n	8004a08 <__swsetup_r+0x18>
 80049fe:	6a03      	ldr	r3, [r0, #32]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <__swsetup_r+0x18>
 8004a04:	f7ff fec2 	bl	800478c <__sinit>
 8004a08:	230c      	movs	r3, #12
 8004a0a:	5ee2      	ldrsh	r2, [r4, r3]
 8004a0c:	0713      	lsls	r3, r2, #28
 8004a0e:	d423      	bmi.n	8004a58 <__swsetup_r+0x68>
 8004a10:	06d3      	lsls	r3, r2, #27
 8004a12:	d407      	bmi.n	8004a24 <__swsetup_r+0x34>
 8004a14:	2309      	movs	r3, #9
 8004a16:	602b      	str	r3, [r5, #0]
 8004a18:	2340      	movs	r3, #64	@ 0x40
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	81a3      	strh	r3, [r4, #12]
 8004a20:	4240      	negs	r0, r0
 8004a22:	e03a      	b.n	8004a9a <__swsetup_r+0xaa>
 8004a24:	0752      	lsls	r2, r2, #29
 8004a26:	d513      	bpl.n	8004a50 <__swsetup_r+0x60>
 8004a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a2a:	2900      	cmp	r1, #0
 8004a2c:	d008      	beq.n	8004a40 <__swsetup_r+0x50>
 8004a2e:	0023      	movs	r3, r4
 8004a30:	3344      	adds	r3, #68	@ 0x44
 8004a32:	4299      	cmp	r1, r3
 8004a34:	d002      	beq.n	8004a3c <__swsetup_r+0x4c>
 8004a36:	0028      	movs	r0, r5
 8004a38:	f000 f8bc 	bl	8004bb4 <_free_r>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a40:	2224      	movs	r2, #36	@ 0x24
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	4393      	bics	r3, r2
 8004a46:	81a3      	strh	r3, [r4, #12]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	6063      	str	r3, [r4, #4]
 8004a4c:	6923      	ldr	r3, [r4, #16]
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	2308      	movs	r3, #8
 8004a52:	89a2      	ldrh	r2, [r4, #12]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	81a3      	strh	r3, [r4, #12]
 8004a58:	6923      	ldr	r3, [r4, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10b      	bne.n	8004a76 <__swsetup_r+0x86>
 8004a5e:	21a0      	movs	r1, #160	@ 0xa0
 8004a60:	2280      	movs	r2, #128	@ 0x80
 8004a62:	89a3      	ldrh	r3, [r4, #12]
 8004a64:	0089      	lsls	r1, r1, #2
 8004a66:	0092      	lsls	r2, r2, #2
 8004a68:	400b      	ands	r3, r1
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d003      	beq.n	8004a76 <__swsetup_r+0x86>
 8004a6e:	0021      	movs	r1, r4
 8004a70:	0028      	movs	r0, r5
 8004a72:	f000 fd39 	bl	80054e8 <__smakebuf_r>
 8004a76:	230c      	movs	r3, #12
 8004a78:	5ee2      	ldrsh	r2, [r4, r3]
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	0013      	movs	r3, r2
 8004a7e:	400b      	ands	r3, r1
 8004a80:	420a      	tst	r2, r1
 8004a82:	d00b      	beq.n	8004a9c <__swsetup_r+0xac>
 8004a84:	2300      	movs	r3, #0
 8004a86:	60a3      	str	r3, [r4, #8]
 8004a88:	6963      	ldr	r3, [r4, #20]
 8004a8a:	425b      	negs	r3, r3
 8004a8c:	61a3      	str	r3, [r4, #24]
 8004a8e:	2000      	movs	r0, #0
 8004a90:	6923      	ldr	r3, [r4, #16]
 8004a92:	4283      	cmp	r3, r0
 8004a94:	d101      	bne.n	8004a9a <__swsetup_r+0xaa>
 8004a96:	0613      	lsls	r3, r2, #24
 8004a98:	d4be      	bmi.n	8004a18 <__swsetup_r+0x28>
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	0791      	lsls	r1, r2, #30
 8004a9e:	d400      	bmi.n	8004aa2 <__swsetup_r+0xb2>
 8004aa0:	6963      	ldr	r3, [r4, #20]
 8004aa2:	60a3      	str	r3, [r4, #8]
 8004aa4:	e7f3      	b.n	8004a8e <__swsetup_r+0x9e>
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	20000030 	.word	0x20000030

08004aac <memset>:
 8004aac:	0003      	movs	r3, r0
 8004aae:	1882      	adds	r2, r0, r2
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d100      	bne.n	8004ab6 <memset+0xa>
 8004ab4:	4770      	bx	lr
 8004ab6:	7019      	strb	r1, [r3, #0]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	e7f9      	b.n	8004ab0 <memset+0x4>

08004abc <_close_r>:
 8004abc:	2300      	movs	r3, #0
 8004abe:	b570      	push	{r4, r5, r6, lr}
 8004ac0:	4d06      	ldr	r5, [pc, #24]	@ (8004adc <_close_r+0x20>)
 8004ac2:	0004      	movs	r4, r0
 8004ac4:	0008      	movs	r0, r1
 8004ac6:	602b      	str	r3, [r5, #0]
 8004ac8:	f7fd faf1 	bl	80020ae <_close>
 8004acc:	1c43      	adds	r3, r0, #1
 8004ace:	d103      	bne.n	8004ad8 <_close_r+0x1c>
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d000      	beq.n	8004ad8 <_close_r+0x1c>
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	bd70      	pop	{r4, r5, r6, pc}
 8004ada:	46c0      	nop			@ (mov r8, r8)
 8004adc:	20000318 	.word	0x20000318

08004ae0 <_lseek_r>:
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	0004      	movs	r4, r0
 8004ae4:	0008      	movs	r0, r1
 8004ae6:	0011      	movs	r1, r2
 8004ae8:	001a      	movs	r2, r3
 8004aea:	2300      	movs	r3, #0
 8004aec:	4d05      	ldr	r5, [pc, #20]	@ (8004b04 <_lseek_r+0x24>)
 8004aee:	602b      	str	r3, [r5, #0]
 8004af0:	f7fd fafe 	bl	80020f0 <_lseek>
 8004af4:	1c43      	adds	r3, r0, #1
 8004af6:	d103      	bne.n	8004b00 <_lseek_r+0x20>
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d000      	beq.n	8004b00 <_lseek_r+0x20>
 8004afe:	6023      	str	r3, [r4, #0]
 8004b00:	bd70      	pop	{r4, r5, r6, pc}
 8004b02:	46c0      	nop			@ (mov r8, r8)
 8004b04:	20000318 	.word	0x20000318

08004b08 <_read_r>:
 8004b08:	b570      	push	{r4, r5, r6, lr}
 8004b0a:	0004      	movs	r4, r0
 8004b0c:	0008      	movs	r0, r1
 8004b0e:	0011      	movs	r1, r2
 8004b10:	001a      	movs	r2, r3
 8004b12:	2300      	movs	r3, #0
 8004b14:	4d05      	ldr	r5, [pc, #20]	@ (8004b2c <_read_r+0x24>)
 8004b16:	602b      	str	r3, [r5, #0]
 8004b18:	f7fd fa90 	bl	800203c <_read>
 8004b1c:	1c43      	adds	r3, r0, #1
 8004b1e:	d103      	bne.n	8004b28 <_read_r+0x20>
 8004b20:	682b      	ldr	r3, [r5, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d000      	beq.n	8004b28 <_read_r+0x20>
 8004b26:	6023      	str	r3, [r4, #0]
 8004b28:	bd70      	pop	{r4, r5, r6, pc}
 8004b2a:	46c0      	nop			@ (mov r8, r8)
 8004b2c:	20000318 	.word	0x20000318

08004b30 <_write_r>:
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	0004      	movs	r4, r0
 8004b34:	0008      	movs	r0, r1
 8004b36:	0011      	movs	r1, r2
 8004b38:	001a      	movs	r2, r3
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	4d05      	ldr	r5, [pc, #20]	@ (8004b54 <_write_r+0x24>)
 8004b3e:	602b      	str	r3, [r5, #0]
 8004b40:	f7fd fa99 	bl	8002076 <_write>
 8004b44:	1c43      	adds	r3, r0, #1
 8004b46:	d103      	bne.n	8004b50 <_write_r+0x20>
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d000      	beq.n	8004b50 <_write_r+0x20>
 8004b4e:	6023      	str	r3, [r4, #0]
 8004b50:	bd70      	pop	{r4, r5, r6, pc}
 8004b52:	46c0      	nop			@ (mov r8, r8)
 8004b54:	20000318 	.word	0x20000318

08004b58 <__errno>:
 8004b58:	4b01      	ldr	r3, [pc, #4]	@ (8004b60 <__errno+0x8>)
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	4770      	bx	lr
 8004b5e:	46c0      	nop			@ (mov r8, r8)
 8004b60:	20000030 	.word	0x20000030

08004b64 <__libc_init_array>:
 8004b64:	b570      	push	{r4, r5, r6, lr}
 8004b66:	2600      	movs	r6, #0
 8004b68:	4c0c      	ldr	r4, [pc, #48]	@ (8004b9c <__libc_init_array+0x38>)
 8004b6a:	4d0d      	ldr	r5, [pc, #52]	@ (8004ba0 <__libc_init_array+0x3c>)
 8004b6c:	1b64      	subs	r4, r4, r5
 8004b6e:	10a4      	asrs	r4, r4, #2
 8004b70:	42a6      	cmp	r6, r4
 8004b72:	d109      	bne.n	8004b88 <__libc_init_array+0x24>
 8004b74:	2600      	movs	r6, #0
 8004b76:	f000 fd3b 	bl	80055f0 <_init>
 8004b7a:	4c0a      	ldr	r4, [pc, #40]	@ (8004ba4 <__libc_init_array+0x40>)
 8004b7c:	4d0a      	ldr	r5, [pc, #40]	@ (8004ba8 <__libc_init_array+0x44>)
 8004b7e:	1b64      	subs	r4, r4, r5
 8004b80:	10a4      	asrs	r4, r4, #2
 8004b82:	42a6      	cmp	r6, r4
 8004b84:	d105      	bne.n	8004b92 <__libc_init_array+0x2e>
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
 8004b88:	00b3      	lsls	r3, r6, #2
 8004b8a:	58eb      	ldr	r3, [r5, r3]
 8004b8c:	4798      	blx	r3
 8004b8e:	3601      	adds	r6, #1
 8004b90:	e7ee      	b.n	8004b70 <__libc_init_array+0xc>
 8004b92:	00b3      	lsls	r3, r6, #2
 8004b94:	58eb      	ldr	r3, [r5, r3]
 8004b96:	4798      	blx	r3
 8004b98:	3601      	adds	r6, #1
 8004b9a:	e7f2      	b.n	8004b82 <__libc_init_array+0x1e>
 8004b9c:	08005a60 	.word	0x08005a60
 8004ba0:	08005a60 	.word	0x08005a60
 8004ba4:	08005a64 	.word	0x08005a64
 8004ba8:	08005a60 	.word	0x08005a60

08004bac <__retarget_lock_init_recursive>:
 8004bac:	4770      	bx	lr

08004bae <__retarget_lock_acquire_recursive>:
 8004bae:	4770      	bx	lr

08004bb0 <__retarget_lock_release_recursive>:
 8004bb0:	4770      	bx	lr
	...

08004bb4 <_free_r>:
 8004bb4:	b570      	push	{r4, r5, r6, lr}
 8004bb6:	0005      	movs	r5, r0
 8004bb8:	1e0c      	subs	r4, r1, #0
 8004bba:	d010      	beq.n	8004bde <_free_r+0x2a>
 8004bbc:	3c04      	subs	r4, #4
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	da00      	bge.n	8004bc6 <_free_r+0x12>
 8004bc4:	18e4      	adds	r4, r4, r3
 8004bc6:	0028      	movs	r0, r5
 8004bc8:	f000 f8e0 	bl	8004d8c <__malloc_lock>
 8004bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8004c44 <_free_r+0x90>)
 8004bce:	6813      	ldr	r3, [r2, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <_free_r+0x2c>
 8004bd4:	6063      	str	r3, [r4, #4]
 8004bd6:	6014      	str	r4, [r2, #0]
 8004bd8:	0028      	movs	r0, r5
 8004bda:	f000 f8df 	bl	8004d9c <__malloc_unlock>
 8004bde:	bd70      	pop	{r4, r5, r6, pc}
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	d908      	bls.n	8004bf6 <_free_r+0x42>
 8004be4:	6820      	ldr	r0, [r4, #0]
 8004be6:	1821      	adds	r1, r4, r0
 8004be8:	428b      	cmp	r3, r1
 8004bea:	d1f3      	bne.n	8004bd4 <_free_r+0x20>
 8004bec:	6819      	ldr	r1, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	1809      	adds	r1, r1, r0
 8004bf2:	6021      	str	r1, [r4, #0]
 8004bf4:	e7ee      	b.n	8004bd4 <_free_r+0x20>
 8004bf6:	001a      	movs	r2, r3
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <_free_r+0x4e>
 8004bfe:	42a3      	cmp	r3, r4
 8004c00:	d9f9      	bls.n	8004bf6 <_free_r+0x42>
 8004c02:	6811      	ldr	r1, [r2, #0]
 8004c04:	1850      	adds	r0, r2, r1
 8004c06:	42a0      	cmp	r0, r4
 8004c08:	d10b      	bne.n	8004c22 <_free_r+0x6e>
 8004c0a:	6820      	ldr	r0, [r4, #0]
 8004c0c:	1809      	adds	r1, r1, r0
 8004c0e:	1850      	adds	r0, r2, r1
 8004c10:	6011      	str	r1, [r2, #0]
 8004c12:	4283      	cmp	r3, r0
 8004c14:	d1e0      	bne.n	8004bd8 <_free_r+0x24>
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	1841      	adds	r1, r0, r1
 8004c1c:	6011      	str	r1, [r2, #0]
 8004c1e:	6053      	str	r3, [r2, #4]
 8004c20:	e7da      	b.n	8004bd8 <_free_r+0x24>
 8004c22:	42a0      	cmp	r0, r4
 8004c24:	d902      	bls.n	8004c2c <_free_r+0x78>
 8004c26:	230c      	movs	r3, #12
 8004c28:	602b      	str	r3, [r5, #0]
 8004c2a:	e7d5      	b.n	8004bd8 <_free_r+0x24>
 8004c2c:	6820      	ldr	r0, [r4, #0]
 8004c2e:	1821      	adds	r1, r4, r0
 8004c30:	428b      	cmp	r3, r1
 8004c32:	d103      	bne.n	8004c3c <_free_r+0x88>
 8004c34:	6819      	ldr	r1, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	1809      	adds	r1, r1, r0
 8004c3a:	6021      	str	r1, [r4, #0]
 8004c3c:	6063      	str	r3, [r4, #4]
 8004c3e:	6054      	str	r4, [r2, #4]
 8004c40:	e7ca      	b.n	8004bd8 <_free_r+0x24>
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	20000324 	.word	0x20000324

08004c48 <sbrk_aligned>:
 8004c48:	b570      	push	{r4, r5, r6, lr}
 8004c4a:	4e0f      	ldr	r6, [pc, #60]	@ (8004c88 <sbrk_aligned+0x40>)
 8004c4c:	000d      	movs	r5, r1
 8004c4e:	6831      	ldr	r1, [r6, #0]
 8004c50:	0004      	movs	r4, r0
 8004c52:	2900      	cmp	r1, #0
 8004c54:	d102      	bne.n	8004c5c <sbrk_aligned+0x14>
 8004c56:	f000 fcad 	bl	80055b4 <_sbrk_r>
 8004c5a:	6030      	str	r0, [r6, #0]
 8004c5c:	0029      	movs	r1, r5
 8004c5e:	0020      	movs	r0, r4
 8004c60:	f000 fca8 	bl	80055b4 <_sbrk_r>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d103      	bne.n	8004c70 <sbrk_aligned+0x28>
 8004c68:	2501      	movs	r5, #1
 8004c6a:	426d      	negs	r5, r5
 8004c6c:	0028      	movs	r0, r5
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	2303      	movs	r3, #3
 8004c72:	1cc5      	adds	r5, r0, #3
 8004c74:	439d      	bics	r5, r3
 8004c76:	42a8      	cmp	r0, r5
 8004c78:	d0f8      	beq.n	8004c6c <sbrk_aligned+0x24>
 8004c7a:	1a29      	subs	r1, r5, r0
 8004c7c:	0020      	movs	r0, r4
 8004c7e:	f000 fc99 	bl	80055b4 <_sbrk_r>
 8004c82:	3001      	adds	r0, #1
 8004c84:	d1f2      	bne.n	8004c6c <sbrk_aligned+0x24>
 8004c86:	e7ef      	b.n	8004c68 <sbrk_aligned+0x20>
 8004c88:	20000320 	.word	0x20000320

08004c8c <_malloc_r>:
 8004c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c8e:	2203      	movs	r2, #3
 8004c90:	1ccb      	adds	r3, r1, #3
 8004c92:	4393      	bics	r3, r2
 8004c94:	3308      	adds	r3, #8
 8004c96:	0005      	movs	r5, r0
 8004c98:	001f      	movs	r7, r3
 8004c9a:	2b0c      	cmp	r3, #12
 8004c9c:	d234      	bcs.n	8004d08 <_malloc_r+0x7c>
 8004c9e:	270c      	movs	r7, #12
 8004ca0:	42b9      	cmp	r1, r7
 8004ca2:	d833      	bhi.n	8004d0c <_malloc_r+0x80>
 8004ca4:	0028      	movs	r0, r5
 8004ca6:	f000 f871 	bl	8004d8c <__malloc_lock>
 8004caa:	4e37      	ldr	r6, [pc, #220]	@ (8004d88 <_malloc_r+0xfc>)
 8004cac:	6833      	ldr	r3, [r6, #0]
 8004cae:	001c      	movs	r4, r3
 8004cb0:	2c00      	cmp	r4, #0
 8004cb2:	d12f      	bne.n	8004d14 <_malloc_r+0x88>
 8004cb4:	0039      	movs	r1, r7
 8004cb6:	0028      	movs	r0, r5
 8004cb8:	f7ff ffc6 	bl	8004c48 <sbrk_aligned>
 8004cbc:	0004      	movs	r4, r0
 8004cbe:	1c43      	adds	r3, r0, #1
 8004cc0:	d15f      	bne.n	8004d82 <_malloc_r+0xf6>
 8004cc2:	6834      	ldr	r4, [r6, #0]
 8004cc4:	9400      	str	r4, [sp, #0]
 8004cc6:	9b00      	ldr	r3, [sp, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d14a      	bne.n	8004d62 <_malloc_r+0xd6>
 8004ccc:	2c00      	cmp	r4, #0
 8004cce:	d052      	beq.n	8004d76 <_malloc_r+0xea>
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	0028      	movs	r0, r5
 8004cd4:	18e3      	adds	r3, r4, r3
 8004cd6:	9900      	ldr	r1, [sp, #0]
 8004cd8:	9301      	str	r3, [sp, #4]
 8004cda:	f000 fc6b 	bl	80055b4 <_sbrk_r>
 8004cde:	9b01      	ldr	r3, [sp, #4]
 8004ce0:	4283      	cmp	r3, r0
 8004ce2:	d148      	bne.n	8004d76 <_malloc_r+0xea>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	0028      	movs	r0, r5
 8004ce8:	1aff      	subs	r7, r7, r3
 8004cea:	0039      	movs	r1, r7
 8004cec:	f7ff ffac 	bl	8004c48 <sbrk_aligned>
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d040      	beq.n	8004d76 <_malloc_r+0xea>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	19db      	adds	r3, r3, r7
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	6833      	ldr	r3, [r6, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	2a00      	cmp	r2, #0
 8004d00:	d133      	bne.n	8004d6a <_malloc_r+0xde>
 8004d02:	9b00      	ldr	r3, [sp, #0]
 8004d04:	6033      	str	r3, [r6, #0]
 8004d06:	e019      	b.n	8004d3c <_malloc_r+0xb0>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	dac9      	bge.n	8004ca0 <_malloc_r+0x14>
 8004d0c:	230c      	movs	r3, #12
 8004d0e:	602b      	str	r3, [r5, #0]
 8004d10:	2000      	movs	r0, #0
 8004d12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d14:	6821      	ldr	r1, [r4, #0]
 8004d16:	1bc9      	subs	r1, r1, r7
 8004d18:	d420      	bmi.n	8004d5c <_malloc_r+0xd0>
 8004d1a:	290b      	cmp	r1, #11
 8004d1c:	d90a      	bls.n	8004d34 <_malloc_r+0xa8>
 8004d1e:	19e2      	adds	r2, r4, r7
 8004d20:	6027      	str	r7, [r4, #0]
 8004d22:	42a3      	cmp	r3, r4
 8004d24:	d104      	bne.n	8004d30 <_malloc_r+0xa4>
 8004d26:	6032      	str	r2, [r6, #0]
 8004d28:	6863      	ldr	r3, [r4, #4]
 8004d2a:	6011      	str	r1, [r2, #0]
 8004d2c:	6053      	str	r3, [r2, #4]
 8004d2e:	e005      	b.n	8004d3c <_malloc_r+0xb0>
 8004d30:	605a      	str	r2, [r3, #4]
 8004d32:	e7f9      	b.n	8004d28 <_malloc_r+0x9c>
 8004d34:	6862      	ldr	r2, [r4, #4]
 8004d36:	42a3      	cmp	r3, r4
 8004d38:	d10e      	bne.n	8004d58 <_malloc_r+0xcc>
 8004d3a:	6032      	str	r2, [r6, #0]
 8004d3c:	0028      	movs	r0, r5
 8004d3e:	f000 f82d 	bl	8004d9c <__malloc_unlock>
 8004d42:	0020      	movs	r0, r4
 8004d44:	2207      	movs	r2, #7
 8004d46:	300b      	adds	r0, #11
 8004d48:	1d23      	adds	r3, r4, #4
 8004d4a:	4390      	bics	r0, r2
 8004d4c:	1ac2      	subs	r2, r0, r3
 8004d4e:	4298      	cmp	r0, r3
 8004d50:	d0df      	beq.n	8004d12 <_malloc_r+0x86>
 8004d52:	1a1b      	subs	r3, r3, r0
 8004d54:	50a3      	str	r3, [r4, r2]
 8004d56:	e7dc      	b.n	8004d12 <_malloc_r+0x86>
 8004d58:	605a      	str	r2, [r3, #4]
 8004d5a:	e7ef      	b.n	8004d3c <_malloc_r+0xb0>
 8004d5c:	0023      	movs	r3, r4
 8004d5e:	6864      	ldr	r4, [r4, #4]
 8004d60:	e7a6      	b.n	8004cb0 <_malloc_r+0x24>
 8004d62:	9c00      	ldr	r4, [sp, #0]
 8004d64:	6863      	ldr	r3, [r4, #4]
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	e7ad      	b.n	8004cc6 <_malloc_r+0x3a>
 8004d6a:	001a      	movs	r2, r3
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	42a3      	cmp	r3, r4
 8004d70:	d1fb      	bne.n	8004d6a <_malloc_r+0xde>
 8004d72:	2300      	movs	r3, #0
 8004d74:	e7da      	b.n	8004d2c <_malloc_r+0xa0>
 8004d76:	230c      	movs	r3, #12
 8004d78:	0028      	movs	r0, r5
 8004d7a:	602b      	str	r3, [r5, #0]
 8004d7c:	f000 f80e 	bl	8004d9c <__malloc_unlock>
 8004d80:	e7c6      	b.n	8004d10 <_malloc_r+0x84>
 8004d82:	6007      	str	r7, [r0, #0]
 8004d84:	e7da      	b.n	8004d3c <_malloc_r+0xb0>
 8004d86:	46c0      	nop			@ (mov r8, r8)
 8004d88:	20000324 	.word	0x20000324

08004d8c <__malloc_lock>:
 8004d8c:	b510      	push	{r4, lr}
 8004d8e:	4802      	ldr	r0, [pc, #8]	@ (8004d98 <__malloc_lock+0xc>)
 8004d90:	f7ff ff0d 	bl	8004bae <__retarget_lock_acquire_recursive>
 8004d94:	bd10      	pop	{r4, pc}
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	2000031c 	.word	0x2000031c

08004d9c <__malloc_unlock>:
 8004d9c:	b510      	push	{r4, lr}
 8004d9e:	4802      	ldr	r0, [pc, #8]	@ (8004da8 <__malloc_unlock+0xc>)
 8004da0:	f7ff ff06 	bl	8004bb0 <__retarget_lock_release_recursive>
 8004da4:	bd10      	pop	{r4, pc}
 8004da6:	46c0      	nop			@ (mov r8, r8)
 8004da8:	2000031c 	.word	0x2000031c

08004dac <__sfputc_r>:
 8004dac:	6893      	ldr	r3, [r2, #8]
 8004dae:	b510      	push	{r4, lr}
 8004db0:	3b01      	subs	r3, #1
 8004db2:	6093      	str	r3, [r2, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	da04      	bge.n	8004dc2 <__sfputc_r+0x16>
 8004db8:	6994      	ldr	r4, [r2, #24]
 8004dba:	42a3      	cmp	r3, r4
 8004dbc:	db07      	blt.n	8004dce <__sfputc_r+0x22>
 8004dbe:	290a      	cmp	r1, #10
 8004dc0:	d005      	beq.n	8004dce <__sfputc_r+0x22>
 8004dc2:	6813      	ldr	r3, [r2, #0]
 8004dc4:	1c58      	adds	r0, r3, #1
 8004dc6:	6010      	str	r0, [r2, #0]
 8004dc8:	7019      	strb	r1, [r3, #0]
 8004dca:	0008      	movs	r0, r1
 8004dcc:	bd10      	pop	{r4, pc}
 8004dce:	f7ff fdcd 	bl	800496c <__swbuf_r>
 8004dd2:	0001      	movs	r1, r0
 8004dd4:	e7f9      	b.n	8004dca <__sfputc_r+0x1e>

08004dd6 <__sfputs_r>:
 8004dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd8:	0006      	movs	r6, r0
 8004dda:	000f      	movs	r7, r1
 8004ddc:	0014      	movs	r4, r2
 8004dde:	18d5      	adds	r5, r2, r3
 8004de0:	42ac      	cmp	r4, r5
 8004de2:	d101      	bne.n	8004de8 <__sfputs_r+0x12>
 8004de4:	2000      	movs	r0, #0
 8004de6:	e007      	b.n	8004df8 <__sfputs_r+0x22>
 8004de8:	7821      	ldrb	r1, [r4, #0]
 8004dea:	003a      	movs	r2, r7
 8004dec:	0030      	movs	r0, r6
 8004dee:	f7ff ffdd 	bl	8004dac <__sfputc_r>
 8004df2:	3401      	adds	r4, #1
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	d1f3      	bne.n	8004de0 <__sfputs_r+0xa>
 8004df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004dfc <_vfiprintf_r>:
 8004dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfe:	b0a1      	sub	sp, #132	@ 0x84
 8004e00:	000f      	movs	r7, r1
 8004e02:	0015      	movs	r5, r2
 8004e04:	001e      	movs	r6, r3
 8004e06:	9003      	str	r0, [sp, #12]
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d004      	beq.n	8004e16 <_vfiprintf_r+0x1a>
 8004e0c:	6a03      	ldr	r3, [r0, #32]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <_vfiprintf_r+0x1a>
 8004e12:	f7ff fcbb 	bl	800478c <__sinit>
 8004e16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e18:	07db      	lsls	r3, r3, #31
 8004e1a:	d405      	bmi.n	8004e28 <_vfiprintf_r+0x2c>
 8004e1c:	89bb      	ldrh	r3, [r7, #12]
 8004e1e:	059b      	lsls	r3, r3, #22
 8004e20:	d402      	bmi.n	8004e28 <_vfiprintf_r+0x2c>
 8004e22:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004e24:	f7ff fec3 	bl	8004bae <__retarget_lock_acquire_recursive>
 8004e28:	89bb      	ldrh	r3, [r7, #12]
 8004e2a:	071b      	lsls	r3, r3, #28
 8004e2c:	d502      	bpl.n	8004e34 <_vfiprintf_r+0x38>
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d113      	bne.n	8004e5c <_vfiprintf_r+0x60>
 8004e34:	0039      	movs	r1, r7
 8004e36:	9803      	ldr	r0, [sp, #12]
 8004e38:	f7ff fdda 	bl	80049f0 <__swsetup_r>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d00d      	beq.n	8004e5c <_vfiprintf_r+0x60>
 8004e40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e42:	07db      	lsls	r3, r3, #31
 8004e44:	d503      	bpl.n	8004e4e <_vfiprintf_r+0x52>
 8004e46:	2001      	movs	r0, #1
 8004e48:	4240      	negs	r0, r0
 8004e4a:	b021      	add	sp, #132	@ 0x84
 8004e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e4e:	89bb      	ldrh	r3, [r7, #12]
 8004e50:	059b      	lsls	r3, r3, #22
 8004e52:	d4f8      	bmi.n	8004e46 <_vfiprintf_r+0x4a>
 8004e54:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004e56:	f7ff feab 	bl	8004bb0 <__retarget_lock_release_recursive>
 8004e5a:	e7f4      	b.n	8004e46 <_vfiprintf_r+0x4a>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	ac08      	add	r4, sp, #32
 8004e60:	6163      	str	r3, [r4, #20]
 8004e62:	3320      	adds	r3, #32
 8004e64:	7663      	strb	r3, [r4, #25]
 8004e66:	3310      	adds	r3, #16
 8004e68:	76a3      	strb	r3, [r4, #26]
 8004e6a:	9607      	str	r6, [sp, #28]
 8004e6c:	002e      	movs	r6, r5
 8004e6e:	7833      	ldrb	r3, [r6, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <_vfiprintf_r+0x7c>
 8004e74:	2b25      	cmp	r3, #37	@ 0x25
 8004e76:	d148      	bne.n	8004f0a <_vfiprintf_r+0x10e>
 8004e78:	1b73      	subs	r3, r6, r5
 8004e7a:	9305      	str	r3, [sp, #20]
 8004e7c:	42ae      	cmp	r6, r5
 8004e7e:	d00b      	beq.n	8004e98 <_vfiprintf_r+0x9c>
 8004e80:	002a      	movs	r2, r5
 8004e82:	0039      	movs	r1, r7
 8004e84:	9803      	ldr	r0, [sp, #12]
 8004e86:	f7ff ffa6 	bl	8004dd6 <__sfputs_r>
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	d100      	bne.n	8004e90 <_vfiprintf_r+0x94>
 8004e8e:	e0ae      	b.n	8004fee <_vfiprintf_r+0x1f2>
 8004e90:	6963      	ldr	r3, [r4, #20]
 8004e92:	9a05      	ldr	r2, [sp, #20]
 8004e94:	189b      	adds	r3, r3, r2
 8004e96:	6163      	str	r3, [r4, #20]
 8004e98:	7833      	ldrb	r3, [r6, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d100      	bne.n	8004ea0 <_vfiprintf_r+0xa4>
 8004e9e:	e0a6      	b.n	8004fee <_vfiprintf_r+0x1f2>
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	4252      	negs	r2, r2
 8004ea6:	6062      	str	r2, [r4, #4]
 8004ea8:	a904      	add	r1, sp, #16
 8004eaa:	3254      	adds	r2, #84	@ 0x54
 8004eac:	1852      	adds	r2, r2, r1
 8004eae:	1c75      	adds	r5, r6, #1
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	60e3      	str	r3, [r4, #12]
 8004eb4:	60a3      	str	r3, [r4, #8]
 8004eb6:	7013      	strb	r3, [r2, #0]
 8004eb8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004eba:	4b59      	ldr	r3, [pc, #356]	@ (8005020 <_vfiprintf_r+0x224>)
 8004ebc:	2205      	movs	r2, #5
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	7829      	ldrb	r1, [r5, #0]
 8004ec2:	9305      	str	r3, [sp, #20]
 8004ec4:	f000 fb88 	bl	80055d8 <memchr>
 8004ec8:	1c6e      	adds	r6, r5, #1
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	d11f      	bne.n	8004f0e <_vfiprintf_r+0x112>
 8004ece:	6822      	ldr	r2, [r4, #0]
 8004ed0:	06d3      	lsls	r3, r2, #27
 8004ed2:	d504      	bpl.n	8004ede <_vfiprintf_r+0xe2>
 8004ed4:	2353      	movs	r3, #83	@ 0x53
 8004ed6:	a904      	add	r1, sp, #16
 8004ed8:	185b      	adds	r3, r3, r1
 8004eda:	2120      	movs	r1, #32
 8004edc:	7019      	strb	r1, [r3, #0]
 8004ede:	0713      	lsls	r3, r2, #28
 8004ee0:	d504      	bpl.n	8004eec <_vfiprintf_r+0xf0>
 8004ee2:	2353      	movs	r3, #83	@ 0x53
 8004ee4:	a904      	add	r1, sp, #16
 8004ee6:	185b      	adds	r3, r3, r1
 8004ee8:	212b      	movs	r1, #43	@ 0x2b
 8004eea:	7019      	strb	r1, [r3, #0]
 8004eec:	782b      	ldrb	r3, [r5, #0]
 8004eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ef0:	d016      	beq.n	8004f20 <_vfiprintf_r+0x124>
 8004ef2:	002e      	movs	r6, r5
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	200a      	movs	r0, #10
 8004ef8:	68e3      	ldr	r3, [r4, #12]
 8004efa:	7832      	ldrb	r2, [r6, #0]
 8004efc:	1c75      	adds	r5, r6, #1
 8004efe:	3a30      	subs	r2, #48	@ 0x30
 8004f00:	2a09      	cmp	r2, #9
 8004f02:	d950      	bls.n	8004fa6 <_vfiprintf_r+0x1aa>
 8004f04:	2900      	cmp	r1, #0
 8004f06:	d111      	bne.n	8004f2c <_vfiprintf_r+0x130>
 8004f08:	e017      	b.n	8004f3a <_vfiprintf_r+0x13e>
 8004f0a:	3601      	adds	r6, #1
 8004f0c:	e7af      	b.n	8004e6e <_vfiprintf_r+0x72>
 8004f0e:	9b05      	ldr	r3, [sp, #20]
 8004f10:	6822      	ldr	r2, [r4, #0]
 8004f12:	1ac0      	subs	r0, r0, r3
 8004f14:	2301      	movs	r3, #1
 8004f16:	4083      	lsls	r3, r0
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	0035      	movs	r5, r6
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	e7cc      	b.n	8004eba <_vfiprintf_r+0xbe>
 8004f20:	9b07      	ldr	r3, [sp, #28]
 8004f22:	1d19      	adds	r1, r3, #4
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	9107      	str	r1, [sp, #28]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	db01      	blt.n	8004f30 <_vfiprintf_r+0x134>
 8004f2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f2e:	e004      	b.n	8004f3a <_vfiprintf_r+0x13e>
 8004f30:	425b      	negs	r3, r3
 8004f32:	60e3      	str	r3, [r4, #12]
 8004f34:	2302      	movs	r3, #2
 8004f36:	4313      	orrs	r3, r2
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	7833      	ldrb	r3, [r6, #0]
 8004f3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f3e:	d10c      	bne.n	8004f5a <_vfiprintf_r+0x15e>
 8004f40:	7873      	ldrb	r3, [r6, #1]
 8004f42:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f44:	d134      	bne.n	8004fb0 <_vfiprintf_r+0x1b4>
 8004f46:	9b07      	ldr	r3, [sp, #28]
 8004f48:	3602      	adds	r6, #2
 8004f4a:	1d1a      	adds	r2, r3, #4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	9207      	str	r2, [sp, #28]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	da01      	bge.n	8004f58 <_vfiprintf_r+0x15c>
 8004f54:	2301      	movs	r3, #1
 8004f56:	425b      	negs	r3, r3
 8004f58:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f5a:	4d32      	ldr	r5, [pc, #200]	@ (8005024 <_vfiprintf_r+0x228>)
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	0028      	movs	r0, r5
 8004f60:	7831      	ldrb	r1, [r6, #0]
 8004f62:	f000 fb39 	bl	80055d8 <memchr>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d006      	beq.n	8004f78 <_vfiprintf_r+0x17c>
 8004f6a:	2340      	movs	r3, #64	@ 0x40
 8004f6c:	1b40      	subs	r0, r0, r5
 8004f6e:	4083      	lsls	r3, r0
 8004f70:	6822      	ldr	r2, [r4, #0]
 8004f72:	3601      	adds	r6, #1
 8004f74:	4313      	orrs	r3, r2
 8004f76:	6023      	str	r3, [r4, #0]
 8004f78:	7831      	ldrb	r1, [r6, #0]
 8004f7a:	2206      	movs	r2, #6
 8004f7c:	482a      	ldr	r0, [pc, #168]	@ (8005028 <_vfiprintf_r+0x22c>)
 8004f7e:	1c75      	adds	r5, r6, #1
 8004f80:	7621      	strb	r1, [r4, #24]
 8004f82:	f000 fb29 	bl	80055d8 <memchr>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d040      	beq.n	800500c <_vfiprintf_r+0x210>
 8004f8a:	4b28      	ldr	r3, [pc, #160]	@ (800502c <_vfiprintf_r+0x230>)
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d122      	bne.n	8004fd6 <_vfiprintf_r+0x1da>
 8004f90:	2207      	movs	r2, #7
 8004f92:	9b07      	ldr	r3, [sp, #28]
 8004f94:	3307      	adds	r3, #7
 8004f96:	4393      	bics	r3, r2
 8004f98:	3308      	adds	r3, #8
 8004f9a:	9307      	str	r3, [sp, #28]
 8004f9c:	6963      	ldr	r3, [r4, #20]
 8004f9e:	9a04      	ldr	r2, [sp, #16]
 8004fa0:	189b      	adds	r3, r3, r2
 8004fa2:	6163      	str	r3, [r4, #20]
 8004fa4:	e762      	b.n	8004e6c <_vfiprintf_r+0x70>
 8004fa6:	4343      	muls	r3, r0
 8004fa8:	002e      	movs	r6, r5
 8004faa:	2101      	movs	r1, #1
 8004fac:	189b      	adds	r3, r3, r2
 8004fae:	e7a4      	b.n	8004efa <_vfiprintf_r+0xfe>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	200a      	movs	r0, #10
 8004fb4:	0019      	movs	r1, r3
 8004fb6:	3601      	adds	r6, #1
 8004fb8:	6063      	str	r3, [r4, #4]
 8004fba:	7832      	ldrb	r2, [r6, #0]
 8004fbc:	1c75      	adds	r5, r6, #1
 8004fbe:	3a30      	subs	r2, #48	@ 0x30
 8004fc0:	2a09      	cmp	r2, #9
 8004fc2:	d903      	bls.n	8004fcc <_vfiprintf_r+0x1d0>
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0c8      	beq.n	8004f5a <_vfiprintf_r+0x15e>
 8004fc8:	9109      	str	r1, [sp, #36]	@ 0x24
 8004fca:	e7c6      	b.n	8004f5a <_vfiprintf_r+0x15e>
 8004fcc:	4341      	muls	r1, r0
 8004fce:	002e      	movs	r6, r5
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	1889      	adds	r1, r1, r2
 8004fd4:	e7f1      	b.n	8004fba <_vfiprintf_r+0x1be>
 8004fd6:	aa07      	add	r2, sp, #28
 8004fd8:	9200      	str	r2, [sp, #0]
 8004fda:	0021      	movs	r1, r4
 8004fdc:	003a      	movs	r2, r7
 8004fde:	4b14      	ldr	r3, [pc, #80]	@ (8005030 <_vfiprintf_r+0x234>)
 8004fe0:	9803      	ldr	r0, [sp, #12]
 8004fe2:	e000      	b.n	8004fe6 <_vfiprintf_r+0x1ea>
 8004fe4:	bf00      	nop
 8004fe6:	9004      	str	r0, [sp, #16]
 8004fe8:	9b04      	ldr	r3, [sp, #16]
 8004fea:	3301      	adds	r3, #1
 8004fec:	d1d6      	bne.n	8004f9c <_vfiprintf_r+0x1a0>
 8004fee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ff0:	07db      	lsls	r3, r3, #31
 8004ff2:	d405      	bmi.n	8005000 <_vfiprintf_r+0x204>
 8004ff4:	89bb      	ldrh	r3, [r7, #12]
 8004ff6:	059b      	lsls	r3, r3, #22
 8004ff8:	d402      	bmi.n	8005000 <_vfiprintf_r+0x204>
 8004ffa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004ffc:	f7ff fdd8 	bl	8004bb0 <__retarget_lock_release_recursive>
 8005000:	89bb      	ldrh	r3, [r7, #12]
 8005002:	065b      	lsls	r3, r3, #25
 8005004:	d500      	bpl.n	8005008 <_vfiprintf_r+0x20c>
 8005006:	e71e      	b.n	8004e46 <_vfiprintf_r+0x4a>
 8005008:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800500a:	e71e      	b.n	8004e4a <_vfiprintf_r+0x4e>
 800500c:	aa07      	add	r2, sp, #28
 800500e:	9200      	str	r2, [sp, #0]
 8005010:	0021      	movs	r1, r4
 8005012:	003a      	movs	r2, r7
 8005014:	4b06      	ldr	r3, [pc, #24]	@ (8005030 <_vfiprintf_r+0x234>)
 8005016:	9803      	ldr	r0, [sp, #12]
 8005018:	f000 f87c 	bl	8005114 <_printf_i>
 800501c:	e7e3      	b.n	8004fe6 <_vfiprintf_r+0x1ea>
 800501e:	46c0      	nop			@ (mov r8, r8)
 8005020:	08005a2c 	.word	0x08005a2c
 8005024:	08005a32 	.word	0x08005a32
 8005028:	08005a36 	.word	0x08005a36
 800502c:	00000000 	.word	0x00000000
 8005030:	08004dd7 	.word	0x08004dd7

08005034 <_printf_common>:
 8005034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005036:	0016      	movs	r6, r2
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	688a      	ldr	r2, [r1, #8]
 800503c:	690b      	ldr	r3, [r1, #16]
 800503e:	000c      	movs	r4, r1
 8005040:	9000      	str	r0, [sp, #0]
 8005042:	4293      	cmp	r3, r2
 8005044:	da00      	bge.n	8005048 <_printf_common+0x14>
 8005046:	0013      	movs	r3, r2
 8005048:	0022      	movs	r2, r4
 800504a:	6033      	str	r3, [r6, #0]
 800504c:	3243      	adds	r2, #67	@ 0x43
 800504e:	7812      	ldrb	r2, [r2, #0]
 8005050:	2a00      	cmp	r2, #0
 8005052:	d001      	beq.n	8005058 <_printf_common+0x24>
 8005054:	3301      	adds	r3, #1
 8005056:	6033      	str	r3, [r6, #0]
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	069b      	lsls	r3, r3, #26
 800505c:	d502      	bpl.n	8005064 <_printf_common+0x30>
 800505e:	6833      	ldr	r3, [r6, #0]
 8005060:	3302      	adds	r3, #2
 8005062:	6033      	str	r3, [r6, #0]
 8005064:	6822      	ldr	r2, [r4, #0]
 8005066:	2306      	movs	r3, #6
 8005068:	0015      	movs	r5, r2
 800506a:	401d      	ands	r5, r3
 800506c:	421a      	tst	r2, r3
 800506e:	d027      	beq.n	80050c0 <_printf_common+0x8c>
 8005070:	0023      	movs	r3, r4
 8005072:	3343      	adds	r3, #67	@ 0x43
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	1e5a      	subs	r2, r3, #1
 8005078:	4193      	sbcs	r3, r2
 800507a:	6822      	ldr	r2, [r4, #0]
 800507c:	0692      	lsls	r2, r2, #26
 800507e:	d430      	bmi.n	80050e2 <_printf_common+0xae>
 8005080:	0022      	movs	r2, r4
 8005082:	9901      	ldr	r1, [sp, #4]
 8005084:	9800      	ldr	r0, [sp, #0]
 8005086:	9d08      	ldr	r5, [sp, #32]
 8005088:	3243      	adds	r2, #67	@ 0x43
 800508a:	47a8      	blx	r5
 800508c:	3001      	adds	r0, #1
 800508e:	d025      	beq.n	80050dc <_printf_common+0xa8>
 8005090:	2206      	movs	r2, #6
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	2500      	movs	r5, #0
 8005096:	4013      	ands	r3, r2
 8005098:	2b04      	cmp	r3, #4
 800509a:	d105      	bne.n	80050a8 <_printf_common+0x74>
 800509c:	6833      	ldr	r3, [r6, #0]
 800509e:	68e5      	ldr	r5, [r4, #12]
 80050a0:	1aed      	subs	r5, r5, r3
 80050a2:	43eb      	mvns	r3, r5
 80050a4:	17db      	asrs	r3, r3, #31
 80050a6:	401d      	ands	r5, r3
 80050a8:	68a3      	ldr	r3, [r4, #8]
 80050aa:	6922      	ldr	r2, [r4, #16]
 80050ac:	4293      	cmp	r3, r2
 80050ae:	dd01      	ble.n	80050b4 <_printf_common+0x80>
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	18ed      	adds	r5, r5, r3
 80050b4:	2600      	movs	r6, #0
 80050b6:	42b5      	cmp	r5, r6
 80050b8:	d120      	bne.n	80050fc <_printf_common+0xc8>
 80050ba:	2000      	movs	r0, #0
 80050bc:	e010      	b.n	80050e0 <_printf_common+0xac>
 80050be:	3501      	adds	r5, #1
 80050c0:	68e3      	ldr	r3, [r4, #12]
 80050c2:	6832      	ldr	r2, [r6, #0]
 80050c4:	1a9b      	subs	r3, r3, r2
 80050c6:	42ab      	cmp	r3, r5
 80050c8:	ddd2      	ble.n	8005070 <_printf_common+0x3c>
 80050ca:	0022      	movs	r2, r4
 80050cc:	2301      	movs	r3, #1
 80050ce:	9901      	ldr	r1, [sp, #4]
 80050d0:	9800      	ldr	r0, [sp, #0]
 80050d2:	9f08      	ldr	r7, [sp, #32]
 80050d4:	3219      	adds	r2, #25
 80050d6:	47b8      	blx	r7
 80050d8:	3001      	adds	r0, #1
 80050da:	d1f0      	bne.n	80050be <_printf_common+0x8a>
 80050dc:	2001      	movs	r0, #1
 80050de:	4240      	negs	r0, r0
 80050e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050e2:	2030      	movs	r0, #48	@ 0x30
 80050e4:	18e1      	adds	r1, r4, r3
 80050e6:	3143      	adds	r1, #67	@ 0x43
 80050e8:	7008      	strb	r0, [r1, #0]
 80050ea:	0021      	movs	r1, r4
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	3145      	adds	r1, #69	@ 0x45
 80050f0:	7809      	ldrb	r1, [r1, #0]
 80050f2:	18a2      	adds	r2, r4, r2
 80050f4:	3243      	adds	r2, #67	@ 0x43
 80050f6:	3302      	adds	r3, #2
 80050f8:	7011      	strb	r1, [r2, #0]
 80050fa:	e7c1      	b.n	8005080 <_printf_common+0x4c>
 80050fc:	0022      	movs	r2, r4
 80050fe:	2301      	movs	r3, #1
 8005100:	9901      	ldr	r1, [sp, #4]
 8005102:	9800      	ldr	r0, [sp, #0]
 8005104:	9f08      	ldr	r7, [sp, #32]
 8005106:	321a      	adds	r2, #26
 8005108:	47b8      	blx	r7
 800510a:	3001      	adds	r0, #1
 800510c:	d0e6      	beq.n	80050dc <_printf_common+0xa8>
 800510e:	3601      	adds	r6, #1
 8005110:	e7d1      	b.n	80050b6 <_printf_common+0x82>
	...

08005114 <_printf_i>:
 8005114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005116:	b08b      	sub	sp, #44	@ 0x2c
 8005118:	9206      	str	r2, [sp, #24]
 800511a:	000a      	movs	r2, r1
 800511c:	3243      	adds	r2, #67	@ 0x43
 800511e:	9307      	str	r3, [sp, #28]
 8005120:	9005      	str	r0, [sp, #20]
 8005122:	9203      	str	r2, [sp, #12]
 8005124:	7e0a      	ldrb	r2, [r1, #24]
 8005126:	000c      	movs	r4, r1
 8005128:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800512a:	2a78      	cmp	r2, #120	@ 0x78
 800512c:	d809      	bhi.n	8005142 <_printf_i+0x2e>
 800512e:	2a62      	cmp	r2, #98	@ 0x62
 8005130:	d80b      	bhi.n	800514a <_printf_i+0x36>
 8005132:	2a00      	cmp	r2, #0
 8005134:	d100      	bne.n	8005138 <_printf_i+0x24>
 8005136:	e0bc      	b.n	80052b2 <_printf_i+0x19e>
 8005138:	497b      	ldr	r1, [pc, #492]	@ (8005328 <_printf_i+0x214>)
 800513a:	9104      	str	r1, [sp, #16]
 800513c:	2a58      	cmp	r2, #88	@ 0x58
 800513e:	d100      	bne.n	8005142 <_printf_i+0x2e>
 8005140:	e090      	b.n	8005264 <_printf_i+0x150>
 8005142:	0025      	movs	r5, r4
 8005144:	3542      	adds	r5, #66	@ 0x42
 8005146:	702a      	strb	r2, [r5, #0]
 8005148:	e022      	b.n	8005190 <_printf_i+0x7c>
 800514a:	0010      	movs	r0, r2
 800514c:	3863      	subs	r0, #99	@ 0x63
 800514e:	2815      	cmp	r0, #21
 8005150:	d8f7      	bhi.n	8005142 <_printf_i+0x2e>
 8005152:	f7fa ffd9 	bl	8000108 <__gnu_thumb1_case_shi>
 8005156:	0016      	.short	0x0016
 8005158:	fff6001f 	.word	0xfff6001f
 800515c:	fff6fff6 	.word	0xfff6fff6
 8005160:	001ffff6 	.word	0x001ffff6
 8005164:	fff6fff6 	.word	0xfff6fff6
 8005168:	fff6fff6 	.word	0xfff6fff6
 800516c:	003600a1 	.word	0x003600a1
 8005170:	fff60080 	.word	0xfff60080
 8005174:	00b2fff6 	.word	0x00b2fff6
 8005178:	0036fff6 	.word	0x0036fff6
 800517c:	fff6fff6 	.word	0xfff6fff6
 8005180:	0084      	.short	0x0084
 8005182:	0025      	movs	r5, r4
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	3542      	adds	r5, #66	@ 0x42
 8005188:	1d11      	adds	r1, r2, #4
 800518a:	6019      	str	r1, [r3, #0]
 800518c:	6813      	ldr	r3, [r2, #0]
 800518e:	702b      	strb	r3, [r5, #0]
 8005190:	2301      	movs	r3, #1
 8005192:	e0a0      	b.n	80052d6 <_printf_i+0x1c2>
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	6809      	ldr	r1, [r1, #0]
 8005198:	1d02      	adds	r2, r0, #4
 800519a:	060d      	lsls	r5, r1, #24
 800519c:	d50b      	bpl.n	80051b6 <_printf_i+0xa2>
 800519e:	6806      	ldr	r6, [r0, #0]
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	2e00      	cmp	r6, #0
 80051a4:	da03      	bge.n	80051ae <_printf_i+0x9a>
 80051a6:	232d      	movs	r3, #45	@ 0x2d
 80051a8:	9a03      	ldr	r2, [sp, #12]
 80051aa:	4276      	negs	r6, r6
 80051ac:	7013      	strb	r3, [r2, #0]
 80051ae:	4b5e      	ldr	r3, [pc, #376]	@ (8005328 <_printf_i+0x214>)
 80051b0:	270a      	movs	r7, #10
 80051b2:	9304      	str	r3, [sp, #16]
 80051b4:	e018      	b.n	80051e8 <_printf_i+0xd4>
 80051b6:	6806      	ldr	r6, [r0, #0]
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	0649      	lsls	r1, r1, #25
 80051bc:	d5f1      	bpl.n	80051a2 <_printf_i+0x8e>
 80051be:	b236      	sxth	r6, r6
 80051c0:	e7ef      	b.n	80051a2 <_printf_i+0x8e>
 80051c2:	6808      	ldr	r0, [r1, #0]
 80051c4:	6819      	ldr	r1, [r3, #0]
 80051c6:	c940      	ldmia	r1!, {r6}
 80051c8:	0605      	lsls	r5, r0, #24
 80051ca:	d402      	bmi.n	80051d2 <_printf_i+0xbe>
 80051cc:	0640      	lsls	r0, r0, #25
 80051ce:	d500      	bpl.n	80051d2 <_printf_i+0xbe>
 80051d0:	b2b6      	uxth	r6, r6
 80051d2:	6019      	str	r1, [r3, #0]
 80051d4:	4b54      	ldr	r3, [pc, #336]	@ (8005328 <_printf_i+0x214>)
 80051d6:	270a      	movs	r7, #10
 80051d8:	9304      	str	r3, [sp, #16]
 80051da:	2a6f      	cmp	r2, #111	@ 0x6f
 80051dc:	d100      	bne.n	80051e0 <_printf_i+0xcc>
 80051de:	3f02      	subs	r7, #2
 80051e0:	0023      	movs	r3, r4
 80051e2:	2200      	movs	r2, #0
 80051e4:	3343      	adds	r3, #67	@ 0x43
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	6863      	ldr	r3, [r4, #4]
 80051ea:	60a3      	str	r3, [r4, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	db03      	blt.n	80051f8 <_printf_i+0xe4>
 80051f0:	2104      	movs	r1, #4
 80051f2:	6822      	ldr	r2, [r4, #0]
 80051f4:	438a      	bics	r2, r1
 80051f6:	6022      	str	r2, [r4, #0]
 80051f8:	2e00      	cmp	r6, #0
 80051fa:	d102      	bne.n	8005202 <_printf_i+0xee>
 80051fc:	9d03      	ldr	r5, [sp, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00c      	beq.n	800521c <_printf_i+0x108>
 8005202:	9d03      	ldr	r5, [sp, #12]
 8005204:	0030      	movs	r0, r6
 8005206:	0039      	movs	r1, r7
 8005208:	f7fb f80e 	bl	8000228 <__aeabi_uidivmod>
 800520c:	9b04      	ldr	r3, [sp, #16]
 800520e:	3d01      	subs	r5, #1
 8005210:	5c5b      	ldrb	r3, [r3, r1]
 8005212:	702b      	strb	r3, [r5, #0]
 8005214:	0033      	movs	r3, r6
 8005216:	0006      	movs	r6, r0
 8005218:	429f      	cmp	r7, r3
 800521a:	d9f3      	bls.n	8005204 <_printf_i+0xf0>
 800521c:	2f08      	cmp	r7, #8
 800521e:	d109      	bne.n	8005234 <_printf_i+0x120>
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	07db      	lsls	r3, r3, #31
 8005224:	d506      	bpl.n	8005234 <_printf_i+0x120>
 8005226:	6862      	ldr	r2, [r4, #4]
 8005228:	6923      	ldr	r3, [r4, #16]
 800522a:	429a      	cmp	r2, r3
 800522c:	dc02      	bgt.n	8005234 <_printf_i+0x120>
 800522e:	2330      	movs	r3, #48	@ 0x30
 8005230:	3d01      	subs	r5, #1
 8005232:	702b      	strb	r3, [r5, #0]
 8005234:	9b03      	ldr	r3, [sp, #12]
 8005236:	1b5b      	subs	r3, r3, r5
 8005238:	6123      	str	r3, [r4, #16]
 800523a:	9b07      	ldr	r3, [sp, #28]
 800523c:	0021      	movs	r1, r4
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	9805      	ldr	r0, [sp, #20]
 8005242:	9b06      	ldr	r3, [sp, #24]
 8005244:	aa09      	add	r2, sp, #36	@ 0x24
 8005246:	f7ff fef5 	bl	8005034 <_printf_common>
 800524a:	3001      	adds	r0, #1
 800524c:	d148      	bne.n	80052e0 <_printf_i+0x1cc>
 800524e:	2001      	movs	r0, #1
 8005250:	4240      	negs	r0, r0
 8005252:	b00b      	add	sp, #44	@ 0x2c
 8005254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005256:	2220      	movs	r2, #32
 8005258:	6809      	ldr	r1, [r1, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	6022      	str	r2, [r4, #0]
 800525e:	2278      	movs	r2, #120	@ 0x78
 8005260:	4932      	ldr	r1, [pc, #200]	@ (800532c <_printf_i+0x218>)
 8005262:	9104      	str	r1, [sp, #16]
 8005264:	0021      	movs	r1, r4
 8005266:	3145      	adds	r1, #69	@ 0x45
 8005268:	700a      	strb	r2, [r1, #0]
 800526a:	6819      	ldr	r1, [r3, #0]
 800526c:	6822      	ldr	r2, [r4, #0]
 800526e:	c940      	ldmia	r1!, {r6}
 8005270:	0610      	lsls	r0, r2, #24
 8005272:	d402      	bmi.n	800527a <_printf_i+0x166>
 8005274:	0650      	lsls	r0, r2, #25
 8005276:	d500      	bpl.n	800527a <_printf_i+0x166>
 8005278:	b2b6      	uxth	r6, r6
 800527a:	6019      	str	r1, [r3, #0]
 800527c:	07d3      	lsls	r3, r2, #31
 800527e:	d502      	bpl.n	8005286 <_printf_i+0x172>
 8005280:	2320      	movs	r3, #32
 8005282:	4313      	orrs	r3, r2
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	2e00      	cmp	r6, #0
 8005288:	d001      	beq.n	800528e <_printf_i+0x17a>
 800528a:	2710      	movs	r7, #16
 800528c:	e7a8      	b.n	80051e0 <_printf_i+0xcc>
 800528e:	2220      	movs	r2, #32
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	4393      	bics	r3, r2
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	e7f8      	b.n	800528a <_printf_i+0x176>
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	680d      	ldr	r5, [r1, #0]
 800529c:	1d10      	adds	r0, r2, #4
 800529e:	6949      	ldr	r1, [r1, #20]
 80052a0:	6018      	str	r0, [r3, #0]
 80052a2:	6813      	ldr	r3, [r2, #0]
 80052a4:	062e      	lsls	r6, r5, #24
 80052a6:	d501      	bpl.n	80052ac <_printf_i+0x198>
 80052a8:	6019      	str	r1, [r3, #0]
 80052aa:	e002      	b.n	80052b2 <_printf_i+0x19e>
 80052ac:	066d      	lsls	r5, r5, #25
 80052ae:	d5fb      	bpl.n	80052a8 <_printf_i+0x194>
 80052b0:	8019      	strh	r1, [r3, #0]
 80052b2:	2300      	movs	r3, #0
 80052b4:	9d03      	ldr	r5, [sp, #12]
 80052b6:	6123      	str	r3, [r4, #16]
 80052b8:	e7bf      	b.n	800523a <_printf_i+0x126>
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	1d11      	adds	r1, r2, #4
 80052be:	6019      	str	r1, [r3, #0]
 80052c0:	6815      	ldr	r5, [r2, #0]
 80052c2:	2100      	movs	r1, #0
 80052c4:	0028      	movs	r0, r5
 80052c6:	6862      	ldr	r2, [r4, #4]
 80052c8:	f000 f986 	bl	80055d8 <memchr>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d001      	beq.n	80052d4 <_printf_i+0x1c0>
 80052d0:	1b40      	subs	r0, r0, r5
 80052d2:	6060      	str	r0, [r4, #4]
 80052d4:	6863      	ldr	r3, [r4, #4]
 80052d6:	6123      	str	r3, [r4, #16]
 80052d8:	2300      	movs	r3, #0
 80052da:	9a03      	ldr	r2, [sp, #12]
 80052dc:	7013      	strb	r3, [r2, #0]
 80052de:	e7ac      	b.n	800523a <_printf_i+0x126>
 80052e0:	002a      	movs	r2, r5
 80052e2:	6923      	ldr	r3, [r4, #16]
 80052e4:	9906      	ldr	r1, [sp, #24]
 80052e6:	9805      	ldr	r0, [sp, #20]
 80052e8:	9d07      	ldr	r5, [sp, #28]
 80052ea:	47a8      	blx	r5
 80052ec:	3001      	adds	r0, #1
 80052ee:	d0ae      	beq.n	800524e <_printf_i+0x13a>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	079b      	lsls	r3, r3, #30
 80052f4:	d415      	bmi.n	8005322 <_printf_i+0x20e>
 80052f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052f8:	68e0      	ldr	r0, [r4, #12]
 80052fa:	4298      	cmp	r0, r3
 80052fc:	daa9      	bge.n	8005252 <_printf_i+0x13e>
 80052fe:	0018      	movs	r0, r3
 8005300:	e7a7      	b.n	8005252 <_printf_i+0x13e>
 8005302:	0022      	movs	r2, r4
 8005304:	2301      	movs	r3, #1
 8005306:	9906      	ldr	r1, [sp, #24]
 8005308:	9805      	ldr	r0, [sp, #20]
 800530a:	9e07      	ldr	r6, [sp, #28]
 800530c:	3219      	adds	r2, #25
 800530e:	47b0      	blx	r6
 8005310:	3001      	adds	r0, #1
 8005312:	d09c      	beq.n	800524e <_printf_i+0x13a>
 8005314:	3501      	adds	r5, #1
 8005316:	68e3      	ldr	r3, [r4, #12]
 8005318:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800531a:	1a9b      	subs	r3, r3, r2
 800531c:	42ab      	cmp	r3, r5
 800531e:	dcf0      	bgt.n	8005302 <_printf_i+0x1ee>
 8005320:	e7e9      	b.n	80052f6 <_printf_i+0x1e2>
 8005322:	2500      	movs	r5, #0
 8005324:	e7f7      	b.n	8005316 <_printf_i+0x202>
 8005326:	46c0      	nop			@ (mov r8, r8)
 8005328:	08005a3d 	.word	0x08005a3d
 800532c:	08005a4e 	.word	0x08005a4e

08005330 <__sflush_r>:
 8005330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005332:	220c      	movs	r2, #12
 8005334:	5e8b      	ldrsh	r3, [r1, r2]
 8005336:	0005      	movs	r5, r0
 8005338:	000c      	movs	r4, r1
 800533a:	071a      	lsls	r2, r3, #28
 800533c:	d456      	bmi.n	80053ec <__sflush_r+0xbc>
 800533e:	684a      	ldr	r2, [r1, #4]
 8005340:	2a00      	cmp	r2, #0
 8005342:	dc02      	bgt.n	800534a <__sflush_r+0x1a>
 8005344:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005346:	2a00      	cmp	r2, #0
 8005348:	dd4e      	ble.n	80053e8 <__sflush_r+0xb8>
 800534a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800534c:	2f00      	cmp	r7, #0
 800534e:	d04b      	beq.n	80053e8 <__sflush_r+0xb8>
 8005350:	2200      	movs	r2, #0
 8005352:	2080      	movs	r0, #128	@ 0x80
 8005354:	682e      	ldr	r6, [r5, #0]
 8005356:	602a      	str	r2, [r5, #0]
 8005358:	001a      	movs	r2, r3
 800535a:	0140      	lsls	r0, r0, #5
 800535c:	6a21      	ldr	r1, [r4, #32]
 800535e:	4002      	ands	r2, r0
 8005360:	4203      	tst	r3, r0
 8005362:	d033      	beq.n	80053cc <__sflush_r+0x9c>
 8005364:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005366:	89a3      	ldrh	r3, [r4, #12]
 8005368:	075b      	lsls	r3, r3, #29
 800536a:	d506      	bpl.n	800537a <__sflush_r+0x4a>
 800536c:	6863      	ldr	r3, [r4, #4]
 800536e:	1ad2      	subs	r2, r2, r3
 8005370:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <__sflush_r+0x4a>
 8005376:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005378:	1ad2      	subs	r2, r2, r3
 800537a:	2300      	movs	r3, #0
 800537c:	0028      	movs	r0, r5
 800537e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005380:	6a21      	ldr	r1, [r4, #32]
 8005382:	47b8      	blx	r7
 8005384:	89a2      	ldrh	r2, [r4, #12]
 8005386:	1c43      	adds	r3, r0, #1
 8005388:	d106      	bne.n	8005398 <__sflush_r+0x68>
 800538a:	6829      	ldr	r1, [r5, #0]
 800538c:	291d      	cmp	r1, #29
 800538e:	d846      	bhi.n	800541e <__sflush_r+0xee>
 8005390:	4b29      	ldr	r3, [pc, #164]	@ (8005438 <__sflush_r+0x108>)
 8005392:	410b      	asrs	r3, r1
 8005394:	07db      	lsls	r3, r3, #31
 8005396:	d442      	bmi.n	800541e <__sflush_r+0xee>
 8005398:	2300      	movs	r3, #0
 800539a:	6063      	str	r3, [r4, #4]
 800539c:	6923      	ldr	r3, [r4, #16]
 800539e:	6023      	str	r3, [r4, #0]
 80053a0:	04d2      	lsls	r2, r2, #19
 80053a2:	d505      	bpl.n	80053b0 <__sflush_r+0x80>
 80053a4:	1c43      	adds	r3, r0, #1
 80053a6:	d102      	bne.n	80053ae <__sflush_r+0x7e>
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d100      	bne.n	80053b0 <__sflush_r+0x80>
 80053ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80053b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053b2:	602e      	str	r6, [r5, #0]
 80053b4:	2900      	cmp	r1, #0
 80053b6:	d017      	beq.n	80053e8 <__sflush_r+0xb8>
 80053b8:	0023      	movs	r3, r4
 80053ba:	3344      	adds	r3, #68	@ 0x44
 80053bc:	4299      	cmp	r1, r3
 80053be:	d002      	beq.n	80053c6 <__sflush_r+0x96>
 80053c0:	0028      	movs	r0, r5
 80053c2:	f7ff fbf7 	bl	8004bb4 <_free_r>
 80053c6:	2300      	movs	r3, #0
 80053c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80053ca:	e00d      	b.n	80053e8 <__sflush_r+0xb8>
 80053cc:	2301      	movs	r3, #1
 80053ce:	0028      	movs	r0, r5
 80053d0:	47b8      	blx	r7
 80053d2:	0002      	movs	r2, r0
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d1c6      	bne.n	8005366 <__sflush_r+0x36>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0c3      	beq.n	8005366 <__sflush_r+0x36>
 80053de:	2b1d      	cmp	r3, #29
 80053e0:	d001      	beq.n	80053e6 <__sflush_r+0xb6>
 80053e2:	2b16      	cmp	r3, #22
 80053e4:	d11a      	bne.n	800541c <__sflush_r+0xec>
 80053e6:	602e      	str	r6, [r5, #0]
 80053e8:	2000      	movs	r0, #0
 80053ea:	e01e      	b.n	800542a <__sflush_r+0xfa>
 80053ec:	690e      	ldr	r6, [r1, #16]
 80053ee:	2e00      	cmp	r6, #0
 80053f0:	d0fa      	beq.n	80053e8 <__sflush_r+0xb8>
 80053f2:	680f      	ldr	r7, [r1, #0]
 80053f4:	600e      	str	r6, [r1, #0]
 80053f6:	1bba      	subs	r2, r7, r6
 80053f8:	9201      	str	r2, [sp, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	079b      	lsls	r3, r3, #30
 80053fe:	d100      	bne.n	8005402 <__sflush_r+0xd2>
 8005400:	694a      	ldr	r2, [r1, #20]
 8005402:	60a2      	str	r2, [r4, #8]
 8005404:	9b01      	ldr	r3, [sp, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	ddee      	ble.n	80053e8 <__sflush_r+0xb8>
 800540a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800540c:	0032      	movs	r2, r6
 800540e:	001f      	movs	r7, r3
 8005410:	0028      	movs	r0, r5
 8005412:	9b01      	ldr	r3, [sp, #4]
 8005414:	6a21      	ldr	r1, [r4, #32]
 8005416:	47b8      	blx	r7
 8005418:	2800      	cmp	r0, #0
 800541a:	dc07      	bgt.n	800542c <__sflush_r+0xfc>
 800541c:	89a2      	ldrh	r2, [r4, #12]
 800541e:	2340      	movs	r3, #64	@ 0x40
 8005420:	2001      	movs	r0, #1
 8005422:	4313      	orrs	r3, r2
 8005424:	b21b      	sxth	r3, r3
 8005426:	81a3      	strh	r3, [r4, #12]
 8005428:	4240      	negs	r0, r0
 800542a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800542c:	9b01      	ldr	r3, [sp, #4]
 800542e:	1836      	adds	r6, r6, r0
 8005430:	1a1b      	subs	r3, r3, r0
 8005432:	9301      	str	r3, [sp, #4]
 8005434:	e7e6      	b.n	8005404 <__sflush_r+0xd4>
 8005436:	46c0      	nop			@ (mov r8, r8)
 8005438:	dfbffffe 	.word	0xdfbffffe

0800543c <_fflush_r>:
 800543c:	690b      	ldr	r3, [r1, #16]
 800543e:	b570      	push	{r4, r5, r6, lr}
 8005440:	0005      	movs	r5, r0
 8005442:	000c      	movs	r4, r1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d102      	bne.n	800544e <_fflush_r+0x12>
 8005448:	2500      	movs	r5, #0
 800544a:	0028      	movs	r0, r5
 800544c:	bd70      	pop	{r4, r5, r6, pc}
 800544e:	2800      	cmp	r0, #0
 8005450:	d004      	beq.n	800545c <_fflush_r+0x20>
 8005452:	6a03      	ldr	r3, [r0, #32]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <_fflush_r+0x20>
 8005458:	f7ff f998 	bl	800478c <__sinit>
 800545c:	220c      	movs	r2, #12
 800545e:	5ea3      	ldrsh	r3, [r4, r2]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0f1      	beq.n	8005448 <_fflush_r+0xc>
 8005464:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005466:	07d2      	lsls	r2, r2, #31
 8005468:	d404      	bmi.n	8005474 <_fflush_r+0x38>
 800546a:	059b      	lsls	r3, r3, #22
 800546c:	d402      	bmi.n	8005474 <_fflush_r+0x38>
 800546e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005470:	f7ff fb9d 	bl	8004bae <__retarget_lock_acquire_recursive>
 8005474:	0028      	movs	r0, r5
 8005476:	0021      	movs	r1, r4
 8005478:	f7ff ff5a 	bl	8005330 <__sflush_r>
 800547c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800547e:	0005      	movs	r5, r0
 8005480:	07db      	lsls	r3, r3, #31
 8005482:	d4e2      	bmi.n	800544a <_fflush_r+0xe>
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	059b      	lsls	r3, r3, #22
 8005488:	d4df      	bmi.n	800544a <_fflush_r+0xe>
 800548a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800548c:	f7ff fb90 	bl	8004bb0 <__retarget_lock_release_recursive>
 8005490:	e7db      	b.n	800544a <_fflush_r+0xe>
	...

08005494 <__swhatbuf_r>:
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	000e      	movs	r6, r1
 8005498:	001d      	movs	r5, r3
 800549a:	230e      	movs	r3, #14
 800549c:	5ec9      	ldrsh	r1, [r1, r3]
 800549e:	0014      	movs	r4, r2
 80054a0:	b096      	sub	sp, #88	@ 0x58
 80054a2:	2900      	cmp	r1, #0
 80054a4:	da0c      	bge.n	80054c0 <__swhatbuf_r+0x2c>
 80054a6:	89b2      	ldrh	r2, [r6, #12]
 80054a8:	2380      	movs	r3, #128	@ 0x80
 80054aa:	0011      	movs	r1, r2
 80054ac:	4019      	ands	r1, r3
 80054ae:	421a      	tst	r2, r3
 80054b0:	d114      	bne.n	80054dc <__swhatbuf_r+0x48>
 80054b2:	2380      	movs	r3, #128	@ 0x80
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	2000      	movs	r0, #0
 80054b8:	6029      	str	r1, [r5, #0]
 80054ba:	6023      	str	r3, [r4, #0]
 80054bc:	b016      	add	sp, #88	@ 0x58
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	466a      	mov	r2, sp
 80054c2:	f000 f853 	bl	800556c <_fstat_r>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	dbed      	blt.n	80054a6 <__swhatbuf_r+0x12>
 80054ca:	23f0      	movs	r3, #240	@ 0xf0
 80054cc:	9901      	ldr	r1, [sp, #4]
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	4019      	ands	r1, r3
 80054d2:	4b04      	ldr	r3, [pc, #16]	@ (80054e4 <__swhatbuf_r+0x50>)
 80054d4:	18c9      	adds	r1, r1, r3
 80054d6:	424b      	negs	r3, r1
 80054d8:	4159      	adcs	r1, r3
 80054da:	e7ea      	b.n	80054b2 <__swhatbuf_r+0x1e>
 80054dc:	2100      	movs	r1, #0
 80054de:	2340      	movs	r3, #64	@ 0x40
 80054e0:	e7e9      	b.n	80054b6 <__swhatbuf_r+0x22>
 80054e2:	46c0      	nop			@ (mov r8, r8)
 80054e4:	ffffe000 	.word	0xffffe000

080054e8 <__smakebuf_r>:
 80054e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ea:	2602      	movs	r6, #2
 80054ec:	898b      	ldrh	r3, [r1, #12]
 80054ee:	0005      	movs	r5, r0
 80054f0:	000c      	movs	r4, r1
 80054f2:	b085      	sub	sp, #20
 80054f4:	4233      	tst	r3, r6
 80054f6:	d007      	beq.n	8005508 <__smakebuf_r+0x20>
 80054f8:	0023      	movs	r3, r4
 80054fa:	3347      	adds	r3, #71	@ 0x47
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	6123      	str	r3, [r4, #16]
 8005500:	2301      	movs	r3, #1
 8005502:	6163      	str	r3, [r4, #20]
 8005504:	b005      	add	sp, #20
 8005506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005508:	ab03      	add	r3, sp, #12
 800550a:	aa02      	add	r2, sp, #8
 800550c:	f7ff ffc2 	bl	8005494 <__swhatbuf_r>
 8005510:	9f02      	ldr	r7, [sp, #8]
 8005512:	9001      	str	r0, [sp, #4]
 8005514:	0039      	movs	r1, r7
 8005516:	0028      	movs	r0, r5
 8005518:	f7ff fbb8 	bl	8004c8c <_malloc_r>
 800551c:	2800      	cmp	r0, #0
 800551e:	d108      	bne.n	8005532 <__smakebuf_r+0x4a>
 8005520:	220c      	movs	r2, #12
 8005522:	5ea3      	ldrsh	r3, [r4, r2]
 8005524:	059a      	lsls	r2, r3, #22
 8005526:	d4ed      	bmi.n	8005504 <__smakebuf_r+0x1c>
 8005528:	2203      	movs	r2, #3
 800552a:	4393      	bics	r3, r2
 800552c:	431e      	orrs	r6, r3
 800552e:	81a6      	strh	r6, [r4, #12]
 8005530:	e7e2      	b.n	80054f8 <__smakebuf_r+0x10>
 8005532:	2380      	movs	r3, #128	@ 0x80
 8005534:	89a2      	ldrh	r2, [r4, #12]
 8005536:	6020      	str	r0, [r4, #0]
 8005538:	4313      	orrs	r3, r2
 800553a:	81a3      	strh	r3, [r4, #12]
 800553c:	9b03      	ldr	r3, [sp, #12]
 800553e:	6120      	str	r0, [r4, #16]
 8005540:	6167      	str	r7, [r4, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00c      	beq.n	8005560 <__smakebuf_r+0x78>
 8005546:	0028      	movs	r0, r5
 8005548:	230e      	movs	r3, #14
 800554a:	5ee1      	ldrsh	r1, [r4, r3]
 800554c:	f000 f820 	bl	8005590 <_isatty_r>
 8005550:	2800      	cmp	r0, #0
 8005552:	d005      	beq.n	8005560 <__smakebuf_r+0x78>
 8005554:	2303      	movs	r3, #3
 8005556:	89a2      	ldrh	r2, [r4, #12]
 8005558:	439a      	bics	r2, r3
 800555a:	3b02      	subs	r3, #2
 800555c:	4313      	orrs	r3, r2
 800555e:	81a3      	strh	r3, [r4, #12]
 8005560:	89a3      	ldrh	r3, [r4, #12]
 8005562:	9a01      	ldr	r2, [sp, #4]
 8005564:	4313      	orrs	r3, r2
 8005566:	81a3      	strh	r3, [r4, #12]
 8005568:	e7cc      	b.n	8005504 <__smakebuf_r+0x1c>
	...

0800556c <_fstat_r>:
 800556c:	2300      	movs	r3, #0
 800556e:	b570      	push	{r4, r5, r6, lr}
 8005570:	4d06      	ldr	r5, [pc, #24]	@ (800558c <_fstat_r+0x20>)
 8005572:	0004      	movs	r4, r0
 8005574:	0008      	movs	r0, r1
 8005576:	0011      	movs	r1, r2
 8005578:	602b      	str	r3, [r5, #0]
 800557a:	f7fc fda2 	bl	80020c2 <_fstat>
 800557e:	1c43      	adds	r3, r0, #1
 8005580:	d103      	bne.n	800558a <_fstat_r+0x1e>
 8005582:	682b      	ldr	r3, [r5, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d000      	beq.n	800558a <_fstat_r+0x1e>
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	20000318 	.word	0x20000318

08005590 <_isatty_r>:
 8005590:	2300      	movs	r3, #0
 8005592:	b570      	push	{r4, r5, r6, lr}
 8005594:	4d06      	ldr	r5, [pc, #24]	@ (80055b0 <_isatty_r+0x20>)
 8005596:	0004      	movs	r4, r0
 8005598:	0008      	movs	r0, r1
 800559a:	602b      	str	r3, [r5, #0]
 800559c:	f7fc fd9f 	bl	80020de <_isatty>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d103      	bne.n	80055ac <_isatty_r+0x1c>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d000      	beq.n	80055ac <_isatty_r+0x1c>
 80055aa:	6023      	str	r3, [r4, #0]
 80055ac:	bd70      	pop	{r4, r5, r6, pc}
 80055ae:	46c0      	nop			@ (mov r8, r8)
 80055b0:	20000318 	.word	0x20000318

080055b4 <_sbrk_r>:
 80055b4:	2300      	movs	r3, #0
 80055b6:	b570      	push	{r4, r5, r6, lr}
 80055b8:	4d06      	ldr	r5, [pc, #24]	@ (80055d4 <_sbrk_r+0x20>)
 80055ba:	0004      	movs	r4, r0
 80055bc:	0008      	movs	r0, r1
 80055be:	602b      	str	r3, [r5, #0]
 80055c0:	f7fc fda2 	bl	8002108 <_sbrk>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d103      	bne.n	80055d0 <_sbrk_r+0x1c>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d000      	beq.n	80055d0 <_sbrk_r+0x1c>
 80055ce:	6023      	str	r3, [r4, #0]
 80055d0:	bd70      	pop	{r4, r5, r6, pc}
 80055d2:	46c0      	nop			@ (mov r8, r8)
 80055d4:	20000318 	.word	0x20000318

080055d8 <memchr>:
 80055d8:	b2c9      	uxtb	r1, r1
 80055da:	1882      	adds	r2, r0, r2
 80055dc:	4290      	cmp	r0, r2
 80055de:	d101      	bne.n	80055e4 <memchr+0xc>
 80055e0:	2000      	movs	r0, #0
 80055e2:	4770      	bx	lr
 80055e4:	7803      	ldrb	r3, [r0, #0]
 80055e6:	428b      	cmp	r3, r1
 80055e8:	d0fb      	beq.n	80055e2 <memchr+0xa>
 80055ea:	3001      	adds	r0, #1
 80055ec:	e7f6      	b.n	80055dc <memchr+0x4>
	...

080055f0 <_init>:
 80055f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f2:	46c0      	nop			@ (mov r8, r8)
 80055f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f6:	bc08      	pop	{r3}
 80055f8:	469e      	mov	lr, r3
 80055fa:	4770      	bx	lr

080055fc <_fini>:
 80055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fe:	46c0      	nop			@ (mov r8, r8)
 8005600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005602:	bc08      	pop	{r3}
 8005604:	469e      	mov	lr, r3
 8005606:	4770      	bx	lr
