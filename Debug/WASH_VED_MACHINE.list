
WASH_VED_MACHINE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004288  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004348  08004348  00005348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004470  08004470  00006080  2**0
                  CONTENTS
  4 .ARM          00000000  08004470  08004470  00006080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004470  08004470  00006080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004470  08004470  00005470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004474  08004474  00005474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08004478  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000080  080044f8  00006080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  080044f8  00006320  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcbe  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002009  00000000  00000000  00013d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00015d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8d  00000000  00000000  00016ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012406  00000000  00000000  00017575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001071a  00000000  00000000  0002997b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b036  00000000  00000000  0003a095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a50cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037ac  00000000  00000000  000a5110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000a88bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004330 	.word	0x08004330

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08004330 	.word	0x08004330

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <Delay_us>:
#define DATA_HIGH() HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET)
#define DATA_LOW()  HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);


void Delay_us (int time)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<time; i++)
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	e00c      	b.n	8000430 <Delay_us+0x28>
	{
		for (int j=0; j<7; j++)
 8000416:	2300      	movs	r3, #0
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	e003      	b.n	8000424 <Delay_us+0x1c>
		{
			__asm__("nop");
 800041c:	46c0      	nop			@ (mov r8, r8)
		for (int j=0; j<7; j++)
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	3301      	adds	r3, #1
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	2b06      	cmp	r3, #6
 8000428:	ddf8      	ble.n	800041c <Delay_us+0x14>
	for (int i=0; i<time; i++)
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	3301      	adds	r3, #1
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fa      	ldr	r2, [r7, #12]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	429a      	cmp	r2, r3
 8000436:	dbee      	blt.n	8000416 <Delay_us+0xe>
		}
	}
}
 8000438:	46c0      	nop			@ (mov r8, r8)
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b004      	add	sp, #16
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <start>:

void start (void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0

	CLK_HIGH();
 8000448:	2380      	movs	r3, #128	@ 0x80
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	480c      	ldr	r0, [pc, #48]	@ (8000480 <start+0x3c>)
 800044e:	2201      	movs	r2, #1
 8000450:	0019      	movs	r1, r3
 8000452:	f001 fc47 	bl	8001ce4 <HAL_GPIO_WritePin>
	DATA_HIGH();
 8000456:	2380      	movs	r3, #128	@ 0x80
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	4809      	ldr	r0, [pc, #36]	@ (8000480 <start+0x3c>)
 800045c:	2201      	movs	r2, #1
 800045e:	0019      	movs	r1, r3
 8000460:	f001 fc40 	bl	8001ce4 <HAL_GPIO_WritePin>
	Delay_us (2);
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff ffcf 	bl	8000408 <Delay_us>
	DATA_LOW();
 800046a:	2380      	movs	r3, #128	@ 0x80
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	4804      	ldr	r0, [pc, #16]	@ (8000480 <start+0x3c>)
 8000470:	2200      	movs	r2, #0
 8000472:	0019      	movs	r1, r3
 8000474:	f001 fc36 	bl	8001ce4 <HAL_GPIO_WritePin>
}
 8000478:	46c0      	nop			@ (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	48000400 	.word	0x48000400

08000484 <stop>:

void stop (void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	CLK_LOW();
 8000488:	2380      	movs	r3, #128	@ 0x80
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	4812      	ldr	r0, [pc, #72]	@ (80004d8 <stop+0x54>)
 800048e:	2200      	movs	r2, #0
 8000490:	0019      	movs	r1, r3
 8000492:	f001 fc27 	bl	8001ce4 <HAL_GPIO_WritePin>
	Delay_us (2);
 8000496:	2002      	movs	r0, #2
 8000498:	f7ff ffb6 	bl	8000408 <Delay_us>
	DATA_LOW();
 800049c:	2380      	movs	r3, #128	@ 0x80
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	480d      	ldr	r0, [pc, #52]	@ (80004d8 <stop+0x54>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	0019      	movs	r1, r3
 80004a6:	f001 fc1d 	bl	8001ce4 <HAL_GPIO_WritePin>
	Delay_us (2);
 80004aa:	2002      	movs	r0, #2
 80004ac:	f7ff ffac 	bl	8000408 <Delay_us>
	CLK_HIGH();
 80004b0:	2380      	movs	r3, #128	@ 0x80
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	4808      	ldr	r0, [pc, #32]	@ (80004d8 <stop+0x54>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	0019      	movs	r1, r3
 80004ba:	f001 fc13 	bl	8001ce4 <HAL_GPIO_WritePin>
	Delay_us (2);
 80004be:	2002      	movs	r0, #2
 80004c0:	f7ff ffa2 	bl	8000408 <Delay_us>
	DATA_HIGH();
 80004c4:	2380      	movs	r3, #128	@ 0x80
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	4803      	ldr	r0, [pc, #12]	@ (80004d8 <stop+0x54>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	0019      	movs	r1, r3
 80004ce:	f001 fc09 	bl	8001ce4 <HAL_GPIO_WritePin>
}
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	48000400 	.word	0x48000400

080004dc <waitforAck>:

void waitforAck (void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	CLK_LOW();
 80004e0:	2380      	movs	r3, #128	@ 0x80
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	480d      	ldr	r0, [pc, #52]	@ (800051c <waitforAck+0x40>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	0019      	movs	r1, r3
 80004ea:	f001 fbfb 	bl	8001ce4 <HAL_GPIO_WritePin>
	Delay_us (5); // After the falling edge of the eighth clock delay 5us
 80004ee:	2005      	movs	r0, #5
 80004f0:	f7ff ff8a 	bl	8000408 <Delay_us>
	              // ACK signals the beginning of judgment
//	while (dio);  // Check the state of the Data pin
	CLK_HIGH();
 80004f4:	2380      	movs	r3, #128	@ 0x80
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	4808      	ldr	r0, [pc, #32]	@ (800051c <waitforAck+0x40>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	0019      	movs	r1, r3
 80004fe:	f001 fbf1 	bl	8001ce4 <HAL_GPIO_WritePin>
	Delay_us (2);
 8000502:	2002      	movs	r0, #2
 8000504:	f7ff ff80 	bl	8000408 <Delay_us>
	CLK_LOW();
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	4803      	ldr	r0, [pc, #12]	@ (800051c <waitforAck+0x40>)
 800050e:	2200      	movs	r2, #0
 8000510:	0019      	movs	r1, r3
 8000512:	f001 fbe7 	bl	8001ce4 <HAL_GPIO_WritePin>
}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	48000400 	.word	0x48000400

08000520 <writeByte>:

void writeByte (uint8_t byte)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	0002      	movs	r2, r0
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	701a      	strb	r2, [r3, #0]
	int i;
	for (i = 0; i<8; i++)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e02f      	b.n	8000592 <writeByte+0x72>
	{
		CLK_LOW();
 8000532:	2380      	movs	r3, #128	@ 0x80
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	481b      	ldr	r0, [pc, #108]	@ (80005a4 <writeByte+0x84>)
 8000538:	2200      	movs	r2, #0
 800053a:	0019      	movs	r1, r3
 800053c:	f001 fbd2 	bl	8001ce4 <HAL_GPIO_WritePin>
		if (byte & 0x01) // low front
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2201      	movs	r2, #1
 8000546:	4013      	ands	r3, r2
 8000548:	d007      	beq.n	800055a <writeByte+0x3a>
		{
			DATA_HIGH();
 800054a:	2380      	movs	r3, #128	@ 0x80
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	4815      	ldr	r0, [pc, #84]	@ (80005a4 <writeByte+0x84>)
 8000550:	2201      	movs	r2, #1
 8000552:	0019      	movs	r1, r3
 8000554:	f001 fbc6 	bl	8001ce4 <HAL_GPIO_WritePin>
 8000558:	e006      	b.n	8000568 <writeByte+0x48>
		}
		else
		{
			DATA_LOW();
 800055a:	2380      	movs	r3, #128	@ 0x80
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4811      	ldr	r0, [pc, #68]	@ (80005a4 <writeByte+0x84>)
 8000560:	2200      	movs	r2, #0
 8000562:	0019      	movs	r1, r3
 8000564:	f001 fbbe 	bl	8001ce4 <HAL_GPIO_WritePin>
		}
		Delay_us (3);
 8000568:	2003      	movs	r0, #3
 800056a:	f7ff ff4d 	bl	8000408 <Delay_us>
		byte = byte >> 1;
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	1dfa      	adds	r2, r7, #7
 8000572:	7812      	ldrb	r2, [r2, #0]
 8000574:	0852      	lsrs	r2, r2, #1
 8000576:	701a      	strb	r2, [r3, #0]
		CLK_HIGH();
 8000578:	2380      	movs	r3, #128	@ 0x80
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	4809      	ldr	r0, [pc, #36]	@ (80005a4 <writeByte+0x84>)
 800057e:	2201      	movs	r2, #1
 8000580:	0019      	movs	r1, r3
 8000582:	f001 fbaf 	bl	8001ce4 <HAL_GPIO_WritePin>
		Delay_us (3);
 8000586:	2003      	movs	r0, #3
 8000588:	f7ff ff3e 	bl	8000408 <Delay_us>
	for (i = 0; i<8; i++)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3301      	adds	r3, #1
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2b07      	cmp	r3, #7
 8000596:	ddcc      	ble.n	8000532 <writeByte+0x12>
	}
}
 8000598:	46c0      	nop			@ (mov r8, r8)
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b004      	add	sp, #16
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	48000400 	.word	0x48000400

080005a8 <TM1637_WriteData>:

void TM1637_WriteData (uint8_t Addr, uint8_t *data, int size)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b087      	sub	sp, #28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60b9      	str	r1, [r7, #8]
 80005b0:	607a      	str	r2, [r7, #4]
 80005b2:	240f      	movs	r4, #15
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	1c02      	adds	r2, r0, #0
 80005b8:	701a      	strb	r2, [r3, #0]
	start();
 80005ba:	f7ff ff43 	bl	8000444 <start>
	writeByte(0x40);
 80005be:	2040      	movs	r0, #64	@ 0x40
 80005c0:	f7ff ffae 	bl	8000520 <writeByte>
	waitforAck();
 80005c4:	f7ff ff8a 	bl	80004dc <waitforAck>
	stop();
 80005c8:	f7ff ff5c 	bl	8000484 <stop>

	start();
 80005cc:	f7ff ff3a 	bl	8000444 <start>
	writeByte(Addr);
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	0018      	movs	r0, r3
 80005d6:	f7ff ffa3 	bl	8000520 <writeByte>
	waitforAck();
 80005da:	f7ff ff7f 	bl	80004dc <waitforAck>
	for (int i=0; i<size; i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	e00b      	b.n	80005fc <TM1637_WriteData+0x54>
	{
		writeByte(data[i]);
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	18d3      	adds	r3, r2, r3
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	0018      	movs	r0, r3
 80005ee:	f7ff ff97 	bl	8000520 <writeByte>
		waitforAck();
 80005f2:	f7ff ff73 	bl	80004dc <waitforAck>
	for (int i=0; i<size; i++)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	dbef      	blt.n	80005e4 <TM1637_WriteData+0x3c>
	}
	stop();
 8000604:	f7ff ff3e 	bl	8000484 <stop>

	start();
 8000608:	f7ff ff1c 	bl	8000444 <start>
	writeByte(0x8A);
 800060c:	208a      	movs	r0, #138	@ 0x8a
 800060e:	f7ff ff87 	bl	8000520 <writeByte>
	waitforAck();
 8000612:	f7ff ff63 	bl	80004dc <waitforAck>
	stop();
 8000616:	f7ff ff35 	bl	8000484 <stop>
}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b007      	add	sp, #28
 8000620:	bd90      	pop	{r4, r7, pc}
	...

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 fe50 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f944 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 fa58 	bl	8000ae4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000634:	f000 fa26 	bl	8000a84 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000638:	f000 f9a6 	bl	8000988 <MX_ADC_Init>
  MX_TIM6_Init();
 800063c:	f000 fa00 	bl	8000a40 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  printf("system start\n\r");
 8000640:	4b8d      	ldr	r3, [pc, #564]	@ (8000878 <main+0x254>)
 8000642:	0018      	movs	r0, r3
 8000644:	f002 ffd6 	bl	80035f4 <iprintf>
  state = 0;
 8000648:	4b8c      	ldr	r3, [pc, #560]	@ (800087c <main+0x258>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
  task_start_time = 0;
 800064e:	4b8c      	ldr	r3, [pc, #560]	@ (8000880 <main+0x25c>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (state)
 8000654:	4b89      	ldr	r3, [pc, #548]	@ (800087c <main+0x258>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b06      	cmp	r3, #6
 800065a:	d900      	bls.n	800065e <main+0x3a>
 800065c:	e0ff      	b.n	800085e <main+0x23a>
 800065e:	009a      	lsls	r2, r3, #2
 8000660:	4b88      	ldr	r3, [pc, #544]	@ (8000884 <main+0x260>)
 8000662:	18d3      	adds	r3, r2, r3
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	469f      	mov	pc, r3
	  {
		  case 0:
			  DisplayDashes();
 8000668:	f000 fbca 	bl	8000e00 <DisplayDashes>
			  processPulse();
 800066c:	f000 face 	bl	8000c0c <processPulse>
			  break;
 8000670:	e100      	b.n	8000874 <main+0x250>

		  case 1:

				  if (!initial_display_done)
 8000672:	4b85      	ldr	r3, [pc, #532]	@ (8000888 <main+0x264>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d109      	bne.n	800068e <main+0x6a>
				  {
					  Display_fifty();
 800067a:	f000 fb85 	bl	8000d88 <Display_fifty>
					  task_start_time = HAL_GetTick();
 800067e:	f000 fe7f 	bl	8001380 <HAL_GetTick>
 8000682:	0002      	movs	r2, r0
 8000684:	4b7e      	ldr	r3, [pc, #504]	@ (8000880 <main+0x25c>)
 8000686:	601a      	str	r2, [r3, #0]
					  initial_display_done = 1;
 8000688:	4b7f      	ldr	r3, [pc, #508]	@ (8000888 <main+0x264>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
				  }

				  if (HAL_GetTick() - task_start_time >= 2000)
 800068e:	f000 fe77 	bl	8001380 <HAL_GetTick>
 8000692:	0002      	movs	r2, r0
 8000694:	4b7a      	ldr	r3, [pc, #488]	@ (8000880 <main+0x25c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	1ad2      	subs	r2, r2, r3
 800069a:	23fa      	movs	r3, #250	@ 0xfa
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	429a      	cmp	r2, r3
 80006a0:	d200      	bcs.n	80006a4 <main+0x80>
 80006a2:	e0e0      	b.n	8000866 <main+0x242>
				  {
					  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_SET);
 80006a4:	2380      	movs	r3, #128	@ 0x80
 80006a6:	011b      	lsls	r3, r3, #4
 80006a8:	4878      	ldr	r0, [pc, #480]	@ (800088c <main+0x268>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	0019      	movs	r1, r3
 80006ae:	f001 fb19 	bl	8001ce4 <HAL_GPIO_WritePin>
					  if (HAL_GetTick() - task_start_time < 20000)
 80006b2:	f000 fe65 	bl	8001380 <HAL_GetTick>
 80006b6:	0002      	movs	r2, r0
 80006b8:	4b71      	ldr	r3, [pc, #452]	@ (8000880 <main+0x25c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	4a74      	ldr	r2, [pc, #464]	@ (8000890 <main+0x26c>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d802      	bhi.n	80006ca <main+0xa6>
					  {
						  TM1637_Countdown_20Sec();
 80006c4:	f000 fae4 	bl	8000c90 <TM1637_Countdown_20Sec>
						  printf("return to IDLE\n\r");
						  state = 0;
						  coin_pulse = 0;
					  }
				  }
			  break;
 80006c8:	e0cd      	b.n	8000866 <main+0x242>
						  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_RESET);
 80006ca:	2380      	movs	r3, #128	@ 0x80
 80006cc:	011b      	lsls	r3, r3, #4
 80006ce:	486f      	ldr	r0, [pc, #444]	@ (800088c <main+0x268>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	0019      	movs	r1, r3
 80006d4:	f001 fb06 	bl	8001ce4 <HAL_GPIO_WritePin>
						  printf("return to IDLE\n\r");
 80006d8:	4b6e      	ldr	r3, [pc, #440]	@ (8000894 <main+0x270>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f002 ff8a 	bl	80035f4 <iprintf>
						  state = 0;
 80006e0:	4b66      	ldr	r3, [pc, #408]	@ (800087c <main+0x258>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
						  coin_pulse = 0;
 80006e6:	4b6c      	ldr	r3, [pc, #432]	@ (8000898 <main+0x274>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
			  break;
 80006ec:	e0bb      	b.n	8000866 <main+0x242>

		  case 2:
			  if (!initial_display_done)
 80006ee:	4b66      	ldr	r3, [pc, #408]	@ (8000888 <main+0x264>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d109      	bne.n	800070a <main+0xe6>
			  {
				  Display_1dhiram();
 80006f6:	f000 fb65 	bl	8000dc4 <Display_1dhiram>
				  task_start_time = HAL_GetTick();
 80006fa:	f000 fe41 	bl	8001380 <HAL_GetTick>
 80006fe:	0002      	movs	r2, r0
 8000700:	4b5f      	ldr	r3, [pc, #380]	@ (8000880 <main+0x25c>)
 8000702:	601a      	str	r2, [r3, #0]
				  initial_display_done = 1;
 8000704:	4b60      	ldr	r3, [pc, #384]	@ (8000888 <main+0x264>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
			  }
			  if (HAL_GetTick() - task_start_time >= 2000)
 800070a:	f000 fe39 	bl	8001380 <HAL_GetTick>
 800070e:	0002      	movs	r2, r0
 8000710:	4b5b      	ldr	r3, [pc, #364]	@ (8000880 <main+0x25c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	1ad2      	subs	r2, r2, r3
 8000716:	23fa      	movs	r3, #250	@ 0xfa
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	429a      	cmp	r2, r3
 800071c:	d200      	bcs.n	8000720 <main+0xfc>
 800071e:	e0a4      	b.n	800086a <main+0x246>
			  {
				  state = 2;
 8000720:	4b56      	ldr	r3, [pc, #344]	@ (800087c <main+0x258>)
 8000722:	2202      	movs	r2, #2
 8000724:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000726:	e0a0      	b.n	800086a <main+0x246>

		  case 3:
			  if (HAL_GetTick() - task_start_time < 20000)
 8000728:	f000 fe2a 	bl	8001380 <HAL_GetTick>
 800072c:	0002      	movs	r2, r0
 800072e:	4b54      	ldr	r3, [pc, #336]	@ (8000880 <main+0x25c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	4a56      	ldr	r2, [pc, #344]	@ (8000890 <main+0x26c>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d802      	bhi.n	8000740 <main+0x11c>
			  {
				  TM1637_Countdown_20Sec();
 800073a:	f000 faa9 	bl	8000c90 <TM1637_Countdown_20Sec>
				  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_SET);
				  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_SET);
				  task_start_time = HAL_GetTick();
				  state = 4;
			  }
			  break;
 800073e:	e099      	b.n	8000874 <main+0x250>
				  printf("GPIO 3 5 6 enabled\n\r");
 8000740:	4b56      	ldr	r3, [pc, #344]	@ (800089c <main+0x278>)
 8000742:	0018      	movs	r0, r3
 8000744:	f002 ff56 	bl	80035f4 <iprintf>
				  HAL_GPIO_WritePin(SIGNAL_3_GPIO_Port, SIGNAL_3_Pin, GPIO_PIN_SET);
 8000748:	2390      	movs	r3, #144	@ 0x90
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	2201      	movs	r2, #1
 800074e:	2104      	movs	r1, #4
 8000750:	0018      	movs	r0, r3
 8000752:	f001 fac7 	bl	8001ce4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_SET);
 8000756:	2390      	movs	r3, #144	@ 0x90
 8000758:	05db      	lsls	r3, r3, #23
 800075a:	2201      	movs	r2, #1
 800075c:	2110      	movs	r1, #16
 800075e:	0018      	movs	r0, r3
 8000760:	f001 fac0 	bl	8001ce4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_SET);
 8000764:	2390      	movs	r3, #144	@ 0x90
 8000766:	05db      	lsls	r3, r3, #23
 8000768:	2201      	movs	r2, #1
 800076a:	2140      	movs	r1, #64	@ 0x40
 800076c:	0018      	movs	r0, r3
 800076e:	f001 fab9 	bl	8001ce4 <HAL_GPIO_WritePin>
				  task_start_time = HAL_GetTick();
 8000772:	f000 fe05 	bl	8001380 <HAL_GetTick>
 8000776:	0002      	movs	r2, r0
 8000778:	4b41      	ldr	r3, [pc, #260]	@ (8000880 <main+0x25c>)
 800077a:	601a      	str	r2, [r3, #0]
				  state = 4;
 800077c:	4b3f      	ldr	r3, [pc, #252]	@ (800087c <main+0x258>)
 800077e:	2204      	movs	r2, #4
 8000780:	701a      	strb	r2, [r3, #0]
			  break;
 8000782:	e077      	b.n	8000874 <main+0x250>

		  case 4:
			  if (HAL_GetTick() - task_start_time >= 30000)
 8000784:	f000 fdfc 	bl	8001380 <HAL_GetTick>
 8000788:	0002      	movs	r2, r0
 800078a:	4b3d      	ldr	r3, [pc, #244]	@ (8000880 <main+0x25c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	4a43      	ldr	r2, [pc, #268]	@ (80008a0 <main+0x27c>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d96b      	bls.n	800086e <main+0x24a>
			  {
				  printf("GPIO 3 5 6 disabled\n\r");
 8000796:	4b43      	ldr	r3, [pc, #268]	@ (80008a4 <main+0x280>)
 8000798:	0018      	movs	r0, r3
 800079a:	f002 ff2b 	bl	80035f4 <iprintf>
				  HAL_GPIO_WritePin(SIGNAL_3_GPIO_Port, SIGNAL_3_Pin, GPIO_PIN_RESET);
 800079e:	2390      	movs	r3, #144	@ 0x90
 80007a0:	05db      	lsls	r3, r3, #23
 80007a2:	2200      	movs	r2, #0
 80007a4:	2104      	movs	r1, #4
 80007a6:	0018      	movs	r0, r3
 80007a8:	f001 fa9c 	bl	8001ce4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_RESET);
 80007ac:	2390      	movs	r3, #144	@ 0x90
 80007ae:	05db      	lsls	r3, r3, #23
 80007b0:	2200      	movs	r2, #0
 80007b2:	2110      	movs	r1, #16
 80007b4:	0018      	movs	r0, r3
 80007b6:	f001 fa95 	bl	8001ce4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_RESET);
 80007ba:	2390      	movs	r3, #144	@ 0x90
 80007bc:	05db      	lsls	r3, r3, #23
 80007be:	2200      	movs	r2, #0
 80007c0:	2140      	movs	r1, #64	@ 0x40
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 fa8e 	bl	8001ce4 <HAL_GPIO_WritePin>
				  task_start_time = HAL_GetTick(); // Record the start time for the next state
 80007c8:	f000 fdda 	bl	8001380 <HAL_GetTick>
 80007cc:	0002      	movs	r2, r0
 80007ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000880 <main+0x25c>)
 80007d0:	601a      	str	r2, [r3, #0]
				  state = 5;
 80007d2:	4b2a      	ldr	r3, [pc, #168]	@ (800087c <main+0x258>)
 80007d4:	2205      	movs	r2, #5
 80007d6:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 80007d8:	e049      	b.n	800086e <main+0x24a>

		  case 5:
			  printf("GPIO A & B enabled\n\r");
 80007da:	4b33      	ldr	r3, [pc, #204]	@ (80008a8 <main+0x284>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f002 ff09 	bl	80035f4 <iprintf>
			  HAL_GPIO_WritePin(SIGNAL_A_GPIO_Port, SIGNAL_A_Pin, GPIO_PIN_SET);
 80007e2:	4b2a      	ldr	r3, [pc, #168]	@ (800088c <main+0x268>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	2102      	movs	r1, #2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 fa7b 	bl	8001ce4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SIGNAL_B_GPIO_Port, SIGNAL_B_Pin, GPIO_PIN_SET);
 80007ee:	2380      	movs	r3, #128	@ 0x80
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	4826      	ldr	r0, [pc, #152]	@ (800088c <main+0x268>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	0019      	movs	r1, r3
 80007f8:	f001 fa74 	bl	8001ce4 <HAL_GPIO_WritePin>
			  HAL_Delay(5000);
 80007fc:	4b2b      	ldr	r3, [pc, #172]	@ (80008ac <main+0x288>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fdc8 	bl	8001394 <HAL_Delay>
			  printf("GPIO A & B disabled\n\r");
 8000804:	4b2a      	ldr	r3, [pc, #168]	@ (80008b0 <main+0x28c>)
 8000806:	0018      	movs	r0, r3
 8000808:	f002 fef4 	bl	80035f4 <iprintf>
			  HAL_GPIO_WritePin(SIGNAL_A_GPIO_Port, SIGNAL_A_Pin, GPIO_PIN_RESET);
 800080c:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <main+0x268>)
 800080e:	2200      	movs	r2, #0
 8000810:	2102      	movs	r1, #2
 8000812:	0018      	movs	r0, r3
 8000814:	f001 fa66 	bl	8001ce4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SIGNAL_B_GPIO_Port, SIGNAL_B_Pin, GPIO_PIN_RESET);
 8000818:	2380      	movs	r3, #128	@ 0x80
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	481b      	ldr	r0, [pc, #108]	@ (800088c <main+0x268>)
 800081e:	2200      	movs	r2, #0
 8000820:	0019      	movs	r1, r3
 8000822:	f001 fa5f 	bl	8001ce4 <HAL_GPIO_WritePin>
			  task_start_time = HAL_GetTick();
 8000826:	f000 fdab 	bl	8001380 <HAL_GetTick>
 800082a:	0002      	movs	r2, r0
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <main+0x25c>)
 800082e:	601a      	str	r2, [r3, #0]
			  state = 6;
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <main+0x258>)
 8000832:	2206      	movs	r2, #6
 8000834:	701a      	strb	r2, [r3, #0]
			  break;
 8000836:	e01d      	b.n	8000874 <main+0x250>

		  case 6:
			  TM1637_DisplayClear();
 8000838:	f000 fb16 	bl	8000e68 <TM1637_DisplayClear>
			  if (HAL_GetTick() - task_start_time >= 90000)
 800083c:	f000 fda0 	bl	8001380 <HAL_GetTick>
 8000840:	0002      	movs	r2, r0
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <main+0x25c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	4a1a      	ldr	r2, [pc, #104]	@ (80008b4 <main+0x290>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d911      	bls.n	8000872 <main+0x24e>
			  {
				  printf("return to IDLE\n\r");
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <main+0x270>)
 8000850:	0018      	movs	r0, r3
 8000852:	f002 fecf 	bl	80035f4 <iprintf>
				  state = 0;
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <main+0x258>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 800085c:	e009      	b.n	8000872 <main+0x24e>

		  default:
			  state = 0;
 800085e:	4b07      	ldr	r3, [pc, #28]	@ (800087c <main+0x258>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
			  break;
 8000864:	e006      	b.n	8000874 <main+0x250>
			  break;
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	e6f4      	b.n	8000654 <main+0x30>
			  break;
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	e6f2      	b.n	8000654 <main+0x30>
			  break;
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	e6f0      	b.n	8000654 <main+0x30>
			  break;
 8000872:	46c0      	nop			@ (mov r8, r8)
	  switch (state)
 8000874:	e6ee      	b.n	8000654 <main+0x30>
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	08004348 	.word	0x08004348
 800087c:	200001b9 	.word	0x200001b9
 8000880:	200001bc 	.word	0x200001bc
 8000884:	080043e8 	.word	0x080043e8
 8000888:	200001ac 	.word	0x200001ac
 800088c:	48000400 	.word	0x48000400
 8000890:	00004e1f 	.word	0x00004e1f
 8000894:	08004358 	.word	0x08004358
 8000898:	200001b8 	.word	0x200001b8
 800089c:	0800436c 	.word	0x0800436c
 80008a0:	0000752f 	.word	0x0000752f
 80008a4:	08004384 	.word	0x08004384
 80008a8:	0800439c 	.word	0x0800439c
 80008ac:	00001388 	.word	0x00001388
 80008b0:	080043b4 	.word	0x080043b4
 80008b4:	00015f8f 	.word	0x00015f8f

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b095      	sub	sp, #84	@ 0x54
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	2420      	movs	r4, #32
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	0018      	movs	r0, r3
 80008c4:	2330      	movs	r3, #48	@ 0x30
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f002 feef 	bl	80036ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ce:	2310      	movs	r3, #16
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	0018      	movs	r0, r3
 80008d4:	2310      	movs	r3, #16
 80008d6:	001a      	movs	r2, r3
 80008d8:	2100      	movs	r1, #0
 80008da:	f002 fee7 	bl	80036ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008de:	003b      	movs	r3, r7
 80008e0:	0018      	movs	r0, r3
 80008e2:	2310      	movs	r3, #16
 80008e4:	001a      	movs	r2, r3
 80008e6:	2100      	movs	r1, #0
 80008e8:	f002 fee0 	bl	80036ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80008ec:	0021      	movs	r1, r4
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2212      	movs	r2, #18
 80008f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2201      	movs	r2, #1
 80008f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2201      	movs	r2, #1
 80008fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2210      	movs	r2, #16
 8000904:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2210      	movs	r2, #16
 800090a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2202      	movs	r2, #2
 8000910:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2200      	movs	r2, #0
 8000916:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	22a0      	movs	r2, #160	@ 0xa0
 800091c:	0392      	lsls	r2, r2, #14
 800091e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000926:	187b      	adds	r3, r7, r1
 8000928:	0018      	movs	r0, r3
 800092a:	f001 fa15 	bl	8001d58 <HAL_RCC_OscConfig>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000932:	f000 fae7 	bl	8000f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	2110      	movs	r1, #16
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2207      	movs	r2, #7
 800093c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2202      	movs	r2, #2
 8000942:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2101      	movs	r1, #1
 8000954:	0018      	movs	r0, r3
 8000956:	f001 fd19 	bl	800238c <HAL_RCC_ClockConfig>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800095e:	f000 fad1 	bl	8000f04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000962:	003b      	movs	r3, r7
 8000964:	2201      	movs	r2, #1
 8000966:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000968:	003b      	movs	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096e:	003b      	movs	r3, r7
 8000970:	0018      	movs	r0, r3
 8000972:	f001 fe4f 	bl	8002614 <HAL_RCCEx_PeriphCLKConfig>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800097a:	f000 fac3 	bl	8000f04 <Error_Handler>
  }
}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b015      	add	sp, #84	@ 0x54
 8000984:	bd90      	pop	{r4, r7, pc}
	...

08000988 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	0018      	movs	r0, r3
 8000992:	230c      	movs	r3, #12
 8000994:	001a      	movs	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f002 fe88 	bl	80036ac <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800099c:	4b26      	ldr	r3, [pc, #152]	@ (8000a38 <MX_ADC_Init+0xb0>)
 800099e:	4a27      	ldr	r2, [pc, #156]	@ (8000a3c <MX_ADC_Init+0xb4>)
 80009a0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009a2:	4b25      	ldr	r3, [pc, #148]	@ (8000a38 <MX_ADC_Init+0xb0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80009a8:	4b23      	ldr	r3, [pc, #140]	@ (8000a38 <MX_ADC_Init+0xb0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ae:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <MX_ADC_Init+0xb0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80009b4:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <MX_ADC_Init+0xb0>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <MX_ADC_Init+0xb0>)
 80009bc:	2204      	movs	r2, #4
 80009be:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <MX_ADC_Init+0xb0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <MX_ADC_Init+0xb0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <MX_ADC_Init+0xb0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <MX_ADC_Init+0xb0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d8:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <MX_ADC_Init+0xb0>)
 80009da:	22c2      	movs	r2, #194	@ 0xc2
 80009dc:	32ff      	adds	r2, #255	@ 0xff
 80009de:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e0:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_ADC_Init+0xb0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_ADC_Init+0xb0>)
 80009e8:	2224      	movs	r2, #36	@ 0x24
 80009ea:	2100      	movs	r1, #0
 80009ec:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ee:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <MX_ADC_Init+0xb0>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80009f4:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_ADC_Init+0xb0>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fcf0 	bl	80013dc <HAL_ADC_Init>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000a00:	f000 fa80 	bl	8000f04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2208      	movs	r2, #8
 8000a08:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2280      	movs	r2, #128	@ 0x80
 8000a0e:	0152      	lsls	r2, r2, #5
 8000a10:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2280      	movs	r2, #128	@ 0x80
 8000a16:	0552      	lsls	r2, r2, #21
 8000a18:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a1a:	1d3a      	adds	r2, r7, #4
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_ADC_Init+0xb0>)
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 fe1b 	bl	800165c <HAL_ADC_ConfigChannel>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000a2a:	f000 fa6b 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b004      	add	sp, #16
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	2000009c 	.word	0x2000009c
 8000a3c:	40012400 	.word	0x40012400

08000a40 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_TIM6_Init+0x38>)
 8000a46:	4a0d      	ldr	r2, [pc, #52]	@ (8000a7c <MX_TIM6_Init+0x3c>)
 8000a48:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47999 - 1;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <MX_TIM6_Init+0x38>)
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a80 <MX_TIM6_Init+0x40>)
 8000a4e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a50:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_TIM6_Init+0x38>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <MX_TIM6_Init+0x38>)
 8000a58:	220a      	movs	r2, #10
 8000a5a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_TIM6_Init+0x38>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a62:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <MX_TIM6_Init+0x38>)
 8000a64:	0018      	movs	r0, r3
 8000a66:	f001 fea3 	bl	80027b0 <HAL_TIM_Base_Init>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8000a6e:	f000 fa49 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200000dc 	.word	0x200000dc
 8000a7c:	40001000 	.word	0x40001000
 8000a80:	0000bb7e 	.word	0x0000bb7e

08000a84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <MX_USART1_UART_Init+0x58>)
 8000a8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ae0 <MX_USART1_UART_Init+0x5c>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <MX_USART1_UART_Init+0x58>)
 8000a90:	22e1      	movs	r2, #225	@ 0xe1
 8000a92:	0252      	lsls	r2, r2, #9
 8000a94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_USART1_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_USART1_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_USART1_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <MX_USART1_UART_Init+0x58>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <MX_USART1_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <MX_USART1_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <MX_USART1_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_USART1_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac6:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <MX_USART1_UART_Init+0x58>)
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f86b 	bl	8002ba4 <HAL_UART_Init>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ad2:	f000 fa17 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000124 	.word	0x20000124
 8000ae0:	40013800 	.word	0x40013800

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b089      	sub	sp, #36	@ 0x24
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	240c      	movs	r4, #12
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	0018      	movs	r0, r3
 8000af0:	2314      	movs	r3, #20
 8000af2:	001a      	movs	r2, r3
 8000af4:	2100      	movs	r1, #0
 8000af6:	f002 fdd9 	bl	80036ac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b40      	ldr	r3, [pc, #256]	@ (8000bfc <MX_GPIO_Init+0x118>)
 8000afc:	695a      	ldr	r2, [r3, #20]
 8000afe:	4b3f      	ldr	r3, [pc, #252]	@ (8000bfc <MX_GPIO_Init+0x118>)
 8000b00:	2180      	movs	r1, #128	@ 0x80
 8000b02:	0289      	lsls	r1, r1, #10
 8000b04:	430a      	orrs	r2, r1
 8000b06:	615a      	str	r2, [r3, #20]
 8000b08:	4b3c      	ldr	r3, [pc, #240]	@ (8000bfc <MX_GPIO_Init+0x118>)
 8000b0a:	695a      	ldr	r2, [r3, #20]
 8000b0c:	2380      	movs	r3, #128	@ 0x80
 8000b0e:	029b      	lsls	r3, r3, #10
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b39      	ldr	r3, [pc, #228]	@ (8000bfc <MX_GPIO_Init+0x118>)
 8000b18:	695a      	ldr	r2, [r3, #20]
 8000b1a:	4b38      	ldr	r3, [pc, #224]	@ (8000bfc <MX_GPIO_Init+0x118>)
 8000b1c:	2180      	movs	r1, #128	@ 0x80
 8000b1e:	02c9      	lsls	r1, r1, #11
 8000b20:	430a      	orrs	r2, r1
 8000b22:	615a      	str	r2, [r3, #20]
 8000b24:	4b35      	ldr	r3, [pc, #212]	@ (8000bfc <MX_GPIO_Init+0x118>)
 8000b26:	695a      	ldr	r2, [r3, #20]
 8000b28:	2380      	movs	r3, #128	@ 0x80
 8000b2a:	02db      	lsls	r3, r3, #11
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIGNAL_1_Pin|SIGNAL_2_Pin|SIGNAL_3_Pin|SIGNAL_4_Pin
 8000b32:	2390      	movs	r3, #144	@ 0x90
 8000b34:	05db      	lsls	r3, r3, #23
 8000b36:	2200      	movs	r2, #0
 8000b38:	21ff      	movs	r1, #255	@ 0xff
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f001 f8d2 	bl	8001ce4 <HAL_GPIO_WritePin>
                          |SIGNAL_5_Pin|SIGNAL_6_Pin|SIGNAL_7_Pin|SIGNAL_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIGNAL_A_Pin|SIGNAL_B_Pin|REL_SIG_1_Pin|CLK_Pin
 8000b40:	492f      	ldr	r1, [pc, #188]	@ (8000c00 <MX_GPIO_Init+0x11c>)
 8000b42:	4b30      	ldr	r3, [pc, #192]	@ (8000c04 <MX_GPIO_Init+0x120>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f001 f8cc 	bl	8001ce4 <HAL_GPIO_WritePin>
                          |DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SIGNAL_1_Pin SIGNAL_2_Pin SIGNAL_3_Pin SIGNAL_4_Pin
                           SIGNAL_5_Pin SIGNAL_6_Pin SIGNAL_7_Pin SIGNAL_8_Pin */
  GPIO_InitStruct.Pin = SIGNAL_1_Pin|SIGNAL_2_Pin|SIGNAL_3_Pin|SIGNAL_4_Pin
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	22ff      	movs	r2, #255	@ 0xff
 8000b50:	601a      	str	r2, [r3, #0]
                          |SIGNAL_5_Pin|SIGNAL_6_Pin|SIGNAL_7_Pin|SIGNAL_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2201      	movs	r2, #1
 8000b56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	193a      	adds	r2, r7, r4
 8000b66:	2390      	movs	r3, #144	@ 0x90
 8000b68:	05db      	lsls	r3, r3, #23
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f000 ff49 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGNAL_A_Pin SIGNAL_B_Pin REL_SIG_1_Pin */
  GPIO_InitStruct.Pin = SIGNAL_A_Pin|SIGNAL_B_Pin|REL_SIG_1_Pin;
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	4a24      	ldr	r2, [pc, #144]	@ (8000c08 <MX_GPIO_Init+0x124>)
 8000b76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000c04 <MX_GPIO_Init+0x120>)
 8000b8e:	0019      	movs	r1, r3
 8000b90:	0010      	movs	r0, r2
 8000b92:	f000 ff37 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : COIN_Pin */
  GPIO_InitStruct.Pin = COIN_Pin;
 8000b96:	0021      	movs	r1, r4
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2280      	movs	r2, #128	@ 0x80
 8000b9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2288      	movs	r2, #136	@ 0x88
 8000ba2:	0352      	lsls	r2, r2, #13
 8000ba4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2201      	movs	r2, #1
 8000baa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(COIN_GPIO_Port, &GPIO_InitStruct);
 8000bac:	000c      	movs	r4, r1
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	4a14      	ldr	r2, [pc, #80]	@ (8000c04 <MX_GPIO_Init+0x120>)
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	0010      	movs	r0, r2
 8000bb6:	f000 ff25 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DATA_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin;
 8000bba:	0021      	movs	r1, r4
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	22c0      	movs	r2, #192	@ 0xc0
 8000bc0:	0092      	lsls	r2, r2, #2
 8000bc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <MX_GPIO_Init+0x120>)
 8000bda:	0019      	movs	r1, r3
 8000bdc:	0010      	movs	r0, r2
 8000bde:	f000 ff11 	bl	8001a04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2007      	movs	r0, #7
 8000be8:	f000 feda 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000bec:	2007      	movs	r0, #7
 8000bee:	f000 feec 	bl	80019ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b009      	add	sp, #36	@ 0x24
 8000bf8:	bd90      	pop	{r4, r7, pc}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	00000f02 	.word	0x00000f02
 8000c04:	48000400 	.word	0x48000400
 8000c08:	00000c02 	.word	0x00000c02

08000c0c <processPulse>:

/* USER CODE BEGIN 4 */
void processPulse() {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	 static uint32_t pulse_start_time = 0;

	 if (pulse_interrupt_Flag)
 8000c10:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <processPulse+0x70>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d02c      	beq.n	8000c74 <processPulse+0x68>
	 {
		if (pulse_start_time == 0)
 8000c1a:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <processPulse+0x74>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d104      	bne.n	8000c2c <processPulse+0x20>
		{
			pulse_start_time = HAL_GetTick();
 8000c22:	f000 fbad 	bl	8001380 <HAL_GetTick>
 8000c26:	0002      	movs	r2, r0
 8000c28:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <processPulse+0x74>)
 8000c2a:	601a      	str	r2, [r3, #0]
		}

		if ((HAL_GetTick() - pulse_start_time) >= pulse_timeout)
 8000c2c:	f000 fba8 	bl	8001380 <HAL_GetTick>
 8000c30:	0002      	movs	r2, r0
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <processPulse+0x74>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	1ad2      	subs	r2, r2, r3
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <processPulse+0x78>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d319      	bcc.n	8000c74 <processPulse+0x68>
		{
			if (coin_pulse == 1)
 8000c40:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <processPulse+0x7c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d103      	bne.n	8000c52 <processPulse+0x46>
			{
				state = 1;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <processPulse+0x80>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	e007      	b.n	8000c62 <processPulse+0x56>
			}
			else if (coin_pulse == 2)
 8000c52:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <processPulse+0x7c>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d102      	bne.n	8000c62 <processPulse+0x56>
			{
				state = 2;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <processPulse+0x80>)
 8000c5e:	2202      	movs	r2, #2
 8000c60:	701a      	strb	r2, [r3, #0]
			}
			coin_pulse = 0;
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <processPulse+0x7c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
			pulse_interrupt_Flag = 0;
 8000c68:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <processPulse+0x70>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
			pulse_start_time = 0;
 8000c6e:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <processPulse+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
		}
	 }
}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	200001ad 	.word	0x200001ad
 8000c80:	200001c0 	.word	0x200001c0
 8000c84:	20000000 	.word	0x20000000
 8000c88:	200001b8 	.word	0x200001b8
 8000c8c:	200001b9 	.word	0x200001b9

08000c90 <TM1637_Countdown_20Sec>:

void TM1637_Countdown_20Sec(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
	static bool colon_state = false;
	static int countdown_seconds = 20;
	static uint32_t last_update_time = 0;
	uint8_t display_data[4] = {0x00, 0x00, 0x00, 0x00};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
    if ((current_time_ms - last_update_time) >= 1000)
 8000c9c:	4b34      	ldr	r3, [pc, #208]	@ (8000d70 <TM1637_Countdown_20Sec+0xe0>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b34      	ldr	r3, [pc, #208]	@ (8000d74 <TM1637_Countdown_20Sec+0xe4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	1ad2      	subs	r2, r2, r3
 8000ca6:	23fa      	movs	r3, #250	@ 0xfa
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d35b      	bcc.n	8000d66 <TM1637_Countdown_20Sec+0xd6>
    {
        last_update_time = current_time_ms;
 8000cae:	4b30      	ldr	r3, [pc, #192]	@ (8000d70 <TM1637_Countdown_20Sec+0xe0>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4b30      	ldr	r3, [pc, #192]	@ (8000d74 <TM1637_Countdown_20Sec+0xe4>)
 8000cb4:	601a      	str	r2, [r3, #0]
        colon_state = !colon_state;
 8000cb6:	4b30      	ldr	r3, [pc, #192]	@ (8000d78 <TM1637_Countdown_20Sec+0xe8>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	1e5a      	subs	r2, r3, #1
 8000cbc:	4193      	sbcs	r3, r2
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4053      	eors	r3, r2
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	1c1a      	adds	r2, r3, #0
 8000cc8:	2301      	movs	r3, #1
 8000cca:	4013      	ands	r3, r2
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b2a      	ldr	r3, [pc, #168]	@ (8000d78 <TM1637_Countdown_20Sec+0xe8>)
 8000cd0:	701a      	strb	r2, [r3, #0]

        display_data[0] = digit_map[0];
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d7c <TM1637_Countdown_20Sec+0xec>)
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	701a      	strb	r2, [r3, #0]
		display_data[1] = digit_map[0];
 8000cda:	4b28      	ldr	r3, [pc, #160]	@ (8000d7c <TM1637_Countdown_20Sec+0xec>)
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	705a      	strb	r2, [r3, #1]
        display_data[2] = digit_map[(countdown_seconds / 10)];
 8000ce2:	4b27      	ldr	r3, [pc, #156]	@ (8000d80 <TM1637_Countdown_20Sec+0xf0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	210a      	movs	r1, #10
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff faa1 	bl	8000230 <__divsi3>
 8000cee:	0003      	movs	r3, r0
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <TM1637_Countdown_20Sec+0xec>)
 8000cf4:	5c9a      	ldrb	r2, [r3, r2]
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	709a      	strb	r2, [r3, #2]
        display_data[3] = digit_map[(countdown_seconds % 10)];
 8000cfa:	4b21      	ldr	r3, [pc, #132]	@ (8000d80 <TM1637_Countdown_20Sec+0xf0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	210a      	movs	r1, #10
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff fb7b 	bl	80003fc <__aeabi_idivmod>
 8000d06:	000b      	movs	r3, r1
 8000d08:	001a      	movs	r2, r3
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <TM1637_Countdown_20Sec+0xec>)
 8000d0c:	5c9a      	ldrb	r2, [r3, r2]
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	70da      	strb	r2, [r3, #3]

        if (colon_state)
 8000d12:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <TM1637_Countdown_20Sec+0xe8>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d008      	beq.n	8000d2c <TM1637_Countdown_20Sec+0x9c>
        {
			display_data[1] |= 0x80;
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	785b      	ldrb	r3, [r3, #1]
 8000d1e:	2280      	movs	r2, #128	@ 0x80
 8000d20:	4252      	negs	r2, r2
 8000d22:	4313      	orrs	r3, r2
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	705a      	strb	r2, [r3, #1]
 8000d2a:	e003      	b.n	8000d34 <TM1637_Countdown_20Sec+0xa4>
		} else
		{
			display_data[1] |= 0x00;
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	785a      	ldrb	r2, [r3, #1]
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	705a      	strb	r2, [r3, #1]
		}
        TM1637_WriteData(0xC0, display_data, 4);
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2204      	movs	r2, #4
 8000d38:	0019      	movs	r1, r3
 8000d3a:	20c0      	movs	r0, #192	@ 0xc0
 8000d3c:	f7ff fc34 	bl	80005a8 <TM1637_WriteData>
        printf("Countdown: %02d seconds\n", countdown_seconds);
 8000d40:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <TM1637_Countdown_20Sec+0xf0>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <TM1637_Countdown_20Sec+0xf4>)
 8000d46:	0011      	movs	r1, r2
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f002 fc53 	bl	80035f4 <iprintf>
        countdown_seconds--;
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <TM1637_Countdown_20Sec+0xf0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	1e5a      	subs	r2, r3, #1
 8000d54:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <TM1637_Countdown_20Sec+0xf0>)
 8000d56:	601a      	str	r2, [r3, #0]
        if (countdown_seconds < 0) {
 8000d58:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <TM1637_Countdown_20Sec+0xf0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da02      	bge.n	8000d66 <TM1637_Countdown_20Sec+0xd6>
            countdown_seconds = 20;
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <TM1637_Countdown_20Sec+0xf0>)
 8000d62:	2214      	movs	r2, #20
 8000d64:	601a      	str	r2, [r3, #0]
        }
    }
}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b002      	add	sp, #8
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	200001b0 	.word	0x200001b0
 8000d74:	200001c4 	.word	0x200001c4
 8000d78:	200001c8 	.word	0x200001c8
 8000d7c:	20000004 	.word	0x20000004
 8000d80:	20000014 	.word	0x20000014
 8000d84:	080043cc 	.word	0x080043cc

08000d88 <Display_fifty>:

void Display_fifty(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
	uint8_t data[4] = {0x00, digit_map[5], digit_map[0], digit_map[10]};
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <Display_fifty+0x38>)
 8000d96:	795a      	ldrb	r2, [r3, #5]
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	705a      	strb	r2, [r3, #1]
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <Display_fifty+0x38>)
 8000d9e:	781a      	ldrb	r2, [r3, #0]
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	709a      	strb	r2, [r3, #2]
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <Display_fifty+0x38>)
 8000da6:	7a9a      	ldrb	r2, [r3, #10]
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	70da      	strb	r2, [r3, #3]
	TM1637_WriteData(0xC0, data, 4);
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2204      	movs	r2, #4
 8000db0:	0019      	movs	r1, r3
 8000db2:	20c0      	movs	r0, #192	@ 0xc0
 8000db4:	f7ff fbf8 	bl	80005a8 <TM1637_WriteData>
}
 8000db8:	46c0      	nop			@ (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b002      	add	sp, #8
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <Display_1dhiram>:

void Display_1dhiram(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
	uint8_t data[4] = {0x00, 0x00, digit_map[1], digit_map[11]};
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	705a      	strb	r2, [r3, #1]
 8000dd6:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <Display_1dhiram+0x38>)
 8000dd8:	785a      	ldrb	r2, [r3, #1]
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	709a      	strb	r2, [r3, #2]
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <Display_1dhiram+0x38>)
 8000de0:	7ada      	ldrb	r2, [r3, #11]
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	70da      	strb	r2, [r3, #3]
	TM1637_WriteData(0xC0, data, 4);
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2204      	movs	r2, #4
 8000dea:	0019      	movs	r1, r3
 8000dec:	20c0      	movs	r0, #192	@ 0xc0
 8000dee:	f7ff fbdb 	bl	80005a8 <TM1637_WriteData>
}
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b002      	add	sp, #8
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	20000004 	.word	0x20000004

08000e00 <DisplayDashes>:
	uint8_t data[4] = {0x00, 0x00, digit_map[2], digit_map[11]};
	TM1637_WriteData(0xC0, data, 4);
}

void DisplayDashes(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
    uint8_t data[4] = {digit_map[12],digit_map[12], digit_map[12], digit_map[12]};
 8000e06:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <DisplayDashes+0x64>)
 8000e08:	7b1a      	ldrb	r2, [r3, #12]
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <DisplayDashes+0x64>)
 8000e10:	7b1a      	ldrb	r2, [r3, #12]
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	705a      	strb	r2, [r3, #1]
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <DisplayDashes+0x64>)
 8000e18:	7b1a      	ldrb	r2, [r3, #12]
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	709a      	strb	r2, [r3, #2]
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <DisplayDashes+0x64>)
 8000e20:	7b1a      	ldrb	r2, [r3, #12]
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	70da      	strb	r2, [r3, #3]
    TM1637_WriteData(0xC0, data, 4);
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2204      	movs	r2, #4
 8000e2a:	0019      	movs	r1, r3
 8000e2c:	20c0      	movs	r0, #192	@ 0xc0
 8000e2e:	f7ff fbbb 	bl	80005a8 <TM1637_WriteData>
    //printf("Display Dashes\n\r");
    HAL_GPIO_WritePin(SIGNAL_4_GPIO_Port, SIGNAL_4_Pin, GPIO_PIN_SET);
 8000e32:	2390      	movs	r3, #144	@ 0x90
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	2201      	movs	r2, #1
 8000e38:	2108      	movs	r1, #8
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 ff52 	bl	8001ce4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_SET);
 8000e40:	2390      	movs	r3, #144	@ 0x90
 8000e42:	05db      	lsls	r3, r3, #23
 8000e44:	2201      	movs	r2, #1
 8000e46:	2110      	movs	r1, #16
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f000 ff4b 	bl	8001ce4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SIGNAL_6_GPIO_Port, SIGNAL_6_Pin, GPIO_PIN_SET);
 8000e4e:	2390      	movs	r3, #144	@ 0x90
 8000e50:	05db      	lsls	r3, r3, #23
 8000e52:	2201      	movs	r2, #1
 8000e54:	2120      	movs	r1, #32
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 ff44 	bl	8001ce4 <HAL_GPIO_WritePin>
}
 8000e5c:	46c0      	nop			@ (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b002      	add	sp, #8
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000004 	.word	0x20000004

08000e68 <TM1637_DisplayClear>:

void TM1637_DisplayClear(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
	uint8_t data[4] = {0x00, 0x00, 0x00, 0x00};
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
	TM1637_WriteData(0xC0, data, 4);
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2204      	movs	r2, #4
 8000e78:	0019      	movs	r1, r3
 8000e7a:	20c0      	movs	r0, #192	@ 0xc0
 8000e7c:	f7ff fb94 	bl	80005a8 <TM1637_WriteData>
}
 8000e80:	46c0      	nop			@ (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b002      	add	sp, #8
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <__io_putchar>:

#ifdef __GNUC__
#define UART_printf   int __io_putchar(int ch)
UART_printf
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000e90:	2301      	movs	r3, #1
 8000e92:	425b      	negs	r3, r3
 8000e94:	1d39      	adds	r1, r7, #4
 8000e96:	4804      	ldr	r0, [pc, #16]	@ (8000ea8 <__io_putchar+0x20>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f001 fed7 	bl	8002c4c <HAL_UART_Transmit>
	return ch;
 8000e9e:	687b      	ldr	r3, [r7, #4]
}
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b002      	add	sp, #8
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000124 	.word	0x20000124

08000eac <HAL_GPIO_EXTI_Callback>:
#endif

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	1dbb      	adds	r3, r7, #6
 8000eb6:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == COIN_Pin)
 8000eb8:	1dbb      	adds	r3, r7, #6
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	2b80      	cmp	r3, #128	@ 0x80
 8000ebe:	d116      	bne.n	8000eee <HAL_GPIO_EXTI_Callback+0x42>
    {
    	uint32_t current_time = HAL_GetTick();
 8000ec0:	f000 fa5e 	bl	8001380 <HAL_GetTick>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	60fb      	str	r3, [r7, #12]

		if ((current_time - last_pulse_time) > 50) {  // Debounce filter (50 ms)
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b32      	cmp	r3, #50	@ 0x32
 8000ed2:	d90c      	bls.n	8000eee <HAL_GPIO_EXTI_Callback+0x42>
			last_pulse_time = current_time;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	601a      	str	r2, [r3, #0]
			coin_pulse++;
 8000eda:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <HAL_GPIO_EXTI_Callback+0x50>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <HAL_GPIO_EXTI_Callback+0x50>)
 8000ee6:	701a      	strb	r2, [r3, #0]
			pulse_interrupt_Flag = 1;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	@ (8000f00 <HAL_GPIO_EXTI_Callback+0x54>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]
		}

    }
}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b004      	add	sp, #16
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	200001b4 	.word	0x200001b4
 8000efc:	200001b8 	.word	0x200001b8
 8000f00:	200001ad 	.word	0x200001ad

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	e7fd      	b.n	8000f0c <Error_Handler+0x8>

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f18:	699a      	ldr	r2, [r3, #24]
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	619a      	str	r2, [r3, #24]
 8000f22:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	2201      	movs	r2, #1
 8000f28:	4013      	ands	r3, r2
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f30:	69da      	ldr	r2, [r3, #28]
 8000f32:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f34:	2180      	movs	r1, #128	@ 0x80
 8000f36:	0549      	lsls	r1, r1, #21
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	61da      	str	r2, [r3, #28]
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f3e:	69da      	ldr	r2, [r3, #28]
 8000f40:	2380      	movs	r3, #128	@ 0x80
 8000f42:	055b      	lsls	r3, r3, #21
 8000f44:	4013      	ands	r3, r2
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b002      	add	sp, #8
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b08b      	sub	sp, #44	@ 0x2c
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	2414      	movs	r4, #20
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	0018      	movs	r0, r3
 8000f66:	2314      	movs	r3, #20
 8000f68:	001a      	movs	r2, r3
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	f002 fb9e 	bl	80036ac <memset>
  if(hadc->Instance==ADC1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a18      	ldr	r2, [pc, #96]	@ (8000fd8 <HAL_ADC_MspInit+0x80>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d12a      	bne.n	8000fd0 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f7a:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <HAL_ADC_MspInit+0x84>)
 8000f7c:	699a      	ldr	r2, [r3, #24]
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <HAL_ADC_MspInit+0x84>)
 8000f80:	2180      	movs	r1, #128	@ 0x80
 8000f82:	0089      	lsls	r1, r1, #2
 8000f84:	430a      	orrs	r2, r1
 8000f86:	619a      	str	r2, [r3, #24]
 8000f88:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <HAL_ADC_MspInit+0x84>)
 8000f8a:	699a      	ldr	r2, [r3, #24]
 8000f8c:	2380      	movs	r3, #128	@ 0x80
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <HAL_ADC_MspInit+0x84>)
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <HAL_ADC_MspInit+0x84>)
 8000f9c:	2180      	movs	r1, #128	@ 0x80
 8000f9e:	02c9      	lsls	r1, r1, #11
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <HAL_ADC_MspInit+0x84>)
 8000fa6:	695a      	ldr	r2, [r3, #20]
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	02db      	lsls	r3, r3, #11
 8000fac:	4013      	ands	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = ADC_ADJ_Pin;
 8000fb2:	193b      	adds	r3, r7, r4
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb8:	193b      	adds	r3, r7, r4
 8000fba:	2203      	movs	r2, #3
 8000fbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	193b      	adds	r3, r7, r4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_ADJ_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	4a06      	ldr	r2, [pc, #24]	@ (8000fe0 <HAL_ADC_MspInit+0x88>)
 8000fc8:	0019      	movs	r1, r3
 8000fca:	0010      	movs	r0, r2
 8000fcc:	f000 fd1a 	bl	8001a04 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fd0:	46c0      	nop			@ (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b00b      	add	sp, #44	@ 0x2c
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	40012400 	.word	0x40012400
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	48000400 	.word	0x48000400

08000fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <HAL_TIM_Base_MspInit+0x44>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d113      	bne.n	800101e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <HAL_TIM_Base_MspInit+0x48>)
 8000ff8:	69da      	ldr	r2, [r3, #28]
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <HAL_TIM_Base_MspInit+0x48>)
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	430a      	orrs	r2, r1
 8001000:	61da      	str	r2, [r3, #28]
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <HAL_TIM_Base_MspInit+0x48>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	2210      	movs	r2, #16
 8001008:	4013      	ands	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2011      	movs	r0, #17
 8001014:	f000 fcc4 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001018:	2011      	movs	r0, #17
 800101a:	f000 fcd6 	bl	80019ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	40001000 	.word	0x40001000
 800102c:	40021000 	.word	0x40021000

08001030 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b08b      	sub	sp, #44	@ 0x2c
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	2414      	movs	r4, #20
 800103a:	193b      	adds	r3, r7, r4
 800103c:	0018      	movs	r0, r3
 800103e:	2314      	movs	r3, #20
 8001040:	001a      	movs	r2, r3
 8001042:	2100      	movs	r1, #0
 8001044:	f002 fb32 	bl	80036ac <memset>
  if(huart->Instance==USART1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a1d      	ldr	r2, [pc, #116]	@ (80010c4 <HAL_UART_MspInit+0x94>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d133      	bne.n	80010ba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <HAL_UART_MspInit+0x98>)
 8001054:	699a      	ldr	r2, [r3, #24]
 8001056:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <HAL_UART_MspInit+0x98>)
 8001058:	2180      	movs	r1, #128	@ 0x80
 800105a:	01c9      	lsls	r1, r1, #7
 800105c:	430a      	orrs	r2, r1
 800105e:	619a      	str	r2, [r3, #24]
 8001060:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <HAL_UART_MspInit+0x98>)
 8001062:	699a      	ldr	r2, [r3, #24]
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	01db      	lsls	r3, r3, #7
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <HAL_UART_MspInit+0x98>)
 8001070:	695a      	ldr	r2, [r3, #20]
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <HAL_UART_MspInit+0x98>)
 8001074:	2180      	movs	r1, #128	@ 0x80
 8001076:	0289      	lsls	r1, r1, #10
 8001078:	430a      	orrs	r2, r1
 800107a:	615a      	str	r2, [r3, #20]
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <HAL_UART_MspInit+0x98>)
 800107e:	695a      	ldr	r2, [r3, #20]
 8001080:	2380      	movs	r3, #128	@ 0x80
 8001082:	029b      	lsls	r3, r3, #10
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	22c0      	movs	r2, #192	@ 0xc0
 800108e:	00d2      	lsls	r2, r2, #3
 8001090:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	0021      	movs	r1, r4
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2202      	movs	r2, #2
 8001098:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2203      	movs	r2, #3
 80010a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2201      	movs	r2, #1
 80010aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	187a      	adds	r2, r7, r1
 80010ae:	2390      	movs	r3, #144	@ 0x90
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 fca5 	bl	8001a04 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b00b      	add	sp, #44	@ 0x2c
 80010c0:	bd90      	pop	{r4, r7, pc}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	40013800 	.word	0x40013800
 80010c8:	40021000 	.word	0x40021000

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d0:	46c0      	nop			@ (mov r8, r8)
 80010d2:	e7fd      	b.n	80010d0 <NMI_Handler+0x4>

080010d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d8:	46c0      	nop			@ (mov r8, r8)
 80010da:	e7fd      	b.n	80010d8 <HardFault_Handler+0x4>

080010dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f4:	f000 f932 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  current_time_ms++;
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <SysTick_Handler+0x18>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	4b02      	ldr	r3, [pc, #8]	@ (8001108 <SysTick_Handler+0x18>)
 8001100:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200001b0 	.word	0x200001b0

0800110c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COIN_Pin);
 8001110:	2080      	movs	r0, #128	@ 0x80
 8001112:	f000 fe05 	bl	8001d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <TIM6_IRQHandler+0x14>)
 8001122:	0018      	movs	r0, r3
 8001124:	f001 fb94 	bl	8002850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	200000dc 	.word	0x200000dc

08001134 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	e00a      	b.n	800115c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001146:	e000      	b.n	800114a <_read+0x16>
 8001148:	bf00      	nop
 800114a:	0001      	movs	r1, r0
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	60ba      	str	r2, [r7, #8]
 8001152:	b2ca      	uxtb	r2, r1
 8001154:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	dbf0      	blt.n	8001146 <_read+0x12>
  }

  return len;
 8001164:	687b      	ldr	r3, [r7, #4]
}
 8001166:	0018      	movs	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	b006      	add	sp, #24
 800116c:	bd80      	pop	{r7, pc}

0800116e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	e009      	b.n	8001194 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	60ba      	str	r2, [r7, #8]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	0018      	movs	r0, r3
 800118a:	f7ff fe7d 	bl	8000e88 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	dbf1      	blt.n	8001180 <_write+0x12>
  }
  return len;
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b006      	add	sp, #24
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_close>:

int _close(int file)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	425b      	negs	r3, r3
}
 80011b2:	0018      	movs	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b002      	add	sp, #8
 80011b8:	bd80      	pop	{r7, pc}

080011ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2280      	movs	r2, #128	@ 0x80
 80011c8:	0192      	lsls	r2, r2, #6
 80011ca:	605a      	str	r2, [r3, #4]
  return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	0018      	movs	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b002      	add	sp, #8
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_isatty>:

int _isatty(int file)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	0018      	movs	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b004      	add	sp, #16
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001208:	4a14      	ldr	r2, [pc, #80]	@ (800125c <_sbrk+0x5c>)
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <_sbrk+0x60>)
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800121c:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <_sbrk+0x64>)
 800121e:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <_sbrk+0x68>)
 8001220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001222:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	18d3      	adds	r3, r2, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	429a      	cmp	r2, r3
 800122e:	d207      	bcs.n	8001240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001230:	f002 fa92 	bl	8003758 <__errno>
 8001234:	0003      	movs	r3, r0
 8001236:	220c      	movs	r2, #12
 8001238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123a:	2301      	movs	r3, #1
 800123c:	425b      	negs	r3, r3
 800123e:	e009      	b.n	8001254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	18d2      	adds	r2, r2, r3
 800124e:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <_sbrk+0x64>)
 8001250:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001252:	68fb      	ldr	r3, [r7, #12]
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	b006      	add	sp, #24
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20002000 	.word	0x20002000
 8001260:	00000400 	.word	0x00000400
 8001264:	200001cc 	.word	0x200001cc
 8001268:	20000320 	.word	0x20000320

0800126c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001270:	46c0      	nop			@ (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001278:	480d      	ldr	r0, [pc, #52]	@ (80012b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800127a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800127c:	f7ff fff6 	bl	800126c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001282:	490d      	ldr	r1, [pc, #52]	@ (80012b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001284:	4a0d      	ldr	r2, [pc, #52]	@ (80012bc <LoopForever+0xe>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001298:	4c0a      	ldr	r4, [pc, #40]	@ (80012c4 <LoopForever+0x16>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012a6:	f002 fa5d 	bl	8003764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012aa:	f7ff f9bb 	bl	8000624 <main>

080012ae <LoopForever>:

LoopForever:
    b LoopForever
 80012ae:	e7fe      	b.n	80012ae <LoopForever>
  ldr   r0, =_estack
 80012b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80012bc:	08004478 	.word	0x08004478
  ldr r2, =_sbss
 80012c0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80012c4:	20000320 	.word	0x20000320

080012c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC1_IRQHandler>
	...

080012cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <HAL_Init+0x24>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_Init+0x24>)
 80012d6:	2110      	movs	r1, #16
 80012d8:	430a      	orrs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f809 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e2:	f7ff fe15 	bl	8000f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	40022000 	.word	0x40022000

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <HAL_InitTick+0x5c>)
 80012fe:	681c      	ldr	r4, [r3, #0]
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <HAL_InitTick+0x60>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	0019      	movs	r1, r3
 8001306:	23fa      	movs	r3, #250	@ 0xfa
 8001308:	0098      	lsls	r0, r3, #2
 800130a:	f7fe ff07 	bl	800011c <__udivsi3>
 800130e:	0003      	movs	r3, r0
 8001310:	0019      	movs	r1, r3
 8001312:	0020      	movs	r0, r4
 8001314:	f7fe ff02 	bl	800011c <__udivsi3>
 8001318:	0003      	movs	r3, r0
 800131a:	0018      	movs	r0, r3
 800131c:	f000 fb65 	bl	80019ea <HAL_SYSTICK_Config>
 8001320:	1e03      	subs	r3, r0, #0
 8001322:	d001      	beq.n	8001328 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e00f      	b.n	8001348 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b03      	cmp	r3, #3
 800132c:	d80b      	bhi.n	8001346 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	2301      	movs	r3, #1
 8001332:	425b      	negs	r3, r3
 8001334:	2200      	movs	r2, #0
 8001336:	0018      	movs	r0, r3
 8001338:	f000 fb32 	bl	80019a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_InitTick+0x64>)
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	0018      	movs	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	b003      	add	sp, #12
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	20000018 	.word	0x20000018
 8001354:	20000020 	.word	0x20000020
 8001358:	2000001c 	.word	0x2000001c

0800135c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <HAL_IncTick+0x1c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	001a      	movs	r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	@ (800137c <HAL_IncTick+0x20>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	18d2      	adds	r2, r2, r3
 800136c:	4b03      	ldr	r3, [pc, #12]	@ (800137c <HAL_IncTick+0x20>)
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	46c0      	nop			@ (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	20000020 	.word	0x20000020
 800137c:	200001d0 	.word	0x200001d0

08001380 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b02      	ldr	r3, [pc, #8]	@ (8001390 <HAL_GetTick+0x10>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	200001d0 	.word	0x200001d0

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff fff0 	bl	8001380 <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3301      	adds	r3, #1
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	001a      	movs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	189b      	adds	r3, r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	f7ff ffe0 	bl	8001380 <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	46c0      	nop			@ (mov r8, r8)
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b004      	add	sp, #16
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			@ (mov r8, r8)
 80013d8:	20000020 	.word	0x20000020

080013dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e4:	230f      	movs	r3, #15
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e125      	b.n	8001646 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10a      	bne.n	8001418 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2234      	movs	r2, #52	@ 0x34
 800140c:	2100      	movs	r1, #0
 800140e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	0018      	movs	r0, r3
 8001414:	f7ff fda0 	bl	8000f58 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800141c:	2210      	movs	r2, #16
 800141e:	4013      	ands	r3, r2
 8001420:	d000      	beq.n	8001424 <HAL_ADC_Init+0x48>
 8001422:	e103      	b.n	800162c <HAL_ADC_Init+0x250>
 8001424:	230f      	movs	r3, #15
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d000      	beq.n	8001430 <HAL_ADC_Init+0x54>
 800142e:	e0fd      	b.n	800162c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2204      	movs	r2, #4
 8001438:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800143a:	d000      	beq.n	800143e <HAL_ADC_Init+0x62>
 800143c:	e0f6      	b.n	800162c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001442:	4a83      	ldr	r2, [pc, #524]	@ (8001650 <HAL_ADC_Init+0x274>)
 8001444:	4013      	ands	r3, r2
 8001446:	2202      	movs	r2, #2
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2203      	movs	r2, #3
 8001456:	4013      	ands	r3, r2
 8001458:	2b01      	cmp	r3, #1
 800145a:	d112      	bne.n	8001482 <HAL_ADC_Init+0xa6>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2201      	movs	r2, #1
 8001464:	4013      	ands	r3, r2
 8001466:	2b01      	cmp	r3, #1
 8001468:	d009      	beq.n	800147e <HAL_ADC_Init+0xa2>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	2380      	movs	r3, #128	@ 0x80
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	401a      	ands	r2, r3
 8001476:	2380      	movs	r3, #128	@ 0x80
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	429a      	cmp	r2, r3
 800147c:	d101      	bne.n	8001482 <HAL_ADC_Init+0xa6>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <HAL_ADC_Init+0xa8>
 8001482:	2300      	movs	r3, #0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d116      	bne.n	80014b6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2218      	movs	r2, #24
 8001490:	4393      	bics	r3, r2
 8001492:	0019      	movs	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	0899      	lsrs	r1, r3, #2
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4964      	ldr	r1, [pc, #400]	@ (8001654 <HAL_ADC_Init+0x278>)
 80014c2:	400a      	ands	r2, r1
 80014c4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7e1b      	ldrb	r3, [r3, #24]
 80014ca:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7e5b      	ldrb	r3, [r3, #25]
 80014d0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014d2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7e9b      	ldrb	r3, [r3, #26]
 80014d8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80014da:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d002      	beq.n	80014ea <HAL_ADC_Init+0x10e>
 80014e4:	2380      	movs	r3, #128	@ 0x80
 80014e6:	015b      	lsls	r3, r3, #5
 80014e8:	e000      	b.n	80014ec <HAL_ADC_Init+0x110>
 80014ea:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80014ec:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80014f2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d101      	bne.n	8001500 <HAL_ADC_Init+0x124>
 80014fc:	2304      	movs	r3, #4
 80014fe:	e000      	b.n	8001502 <HAL_ADC_Init+0x126>
 8001500:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001502:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2124      	movs	r1, #36	@ 0x24
 8001508:	5c5b      	ldrb	r3, [r3, r1]
 800150a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800150c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	4313      	orrs	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7edb      	ldrb	r3, [r3, #27]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d115      	bne.n	8001548 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7e9b      	ldrb	r3, [r3, #26]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d105      	bne.n	8001530 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2280      	movs	r2, #128	@ 0x80
 8001528:	0252      	lsls	r2, r2, #9
 800152a:	4313      	orrs	r3, r2
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	e00b      	b.n	8001548 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001534:	2220      	movs	r2, #32
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001540:	2201      	movs	r2, #1
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69da      	ldr	r2, [r3, #28]
 800154c:	23c2      	movs	r3, #194	@ 0xc2
 800154e:	33ff      	adds	r3, #255	@ 0xff
 8001550:	429a      	cmp	r2, r3
 8001552:	d007      	beq.n	8001564 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800155c:	4313      	orrs	r3, r2
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	4313      	orrs	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68d9      	ldr	r1, [r3, #12]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	430a      	orrs	r2, r1
 8001572:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	055b      	lsls	r3, r3, #21
 800157c:	429a      	cmp	r2, r3
 800157e:	d01b      	beq.n	80015b8 <HAL_ADC_Init+0x1dc>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001584:	2b01      	cmp	r3, #1
 8001586:	d017      	beq.n	80015b8 <HAL_ADC_Init+0x1dc>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158c:	2b02      	cmp	r3, #2
 800158e:	d013      	beq.n	80015b8 <HAL_ADC_Init+0x1dc>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001594:	2b03      	cmp	r3, #3
 8001596:	d00f      	beq.n	80015b8 <HAL_ADC_Init+0x1dc>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159c:	2b04      	cmp	r3, #4
 800159e:	d00b      	beq.n	80015b8 <HAL_ADC_Init+0x1dc>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d007      	beq.n	80015b8 <HAL_ADC_Init+0x1dc>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ac:	2b06      	cmp	r3, #6
 80015ae:	d003      	beq.n	80015b8 <HAL_ADC_Init+0x1dc>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b4:	2b07      	cmp	r3, #7
 80015b6:	d112      	bne.n	80015de <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2107      	movs	r1, #7
 80015c4:	438a      	bics	r2, r1
 80015c6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6959      	ldr	r1, [r3, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d2:	2207      	movs	r2, #7
 80015d4:	401a      	ands	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001658 <HAL_ADC_Init+0x27c>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d10b      	bne.n	8001606 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015f8:	2203      	movs	r2, #3
 80015fa:	4393      	bics	r3, r2
 80015fc:	2201      	movs	r2, #1
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001604:	e01c      	b.n	8001640 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800160a:	2212      	movs	r2, #18
 800160c:	4393      	bics	r3, r2
 800160e:	2210      	movs	r2, #16
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800161a:	2201      	movs	r2, #1
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001622:	230f      	movs	r3, #15
 8001624:	18fb      	adds	r3, r7, r3
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800162a:	e009      	b.n	8001640 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001630:	2210      	movs	r2, #16
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001638:	230f      	movs	r3, #15
 800163a:	18fb      	adds	r3, r7, r3
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001640:	230f      	movs	r3, #15
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	781b      	ldrb	r3, [r3, #0]
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	b004      	add	sp, #16
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	fffffefd 	.word	0xfffffefd
 8001654:	fffe0219 	.word	0xfffe0219
 8001658:	833fffe7 	.word	0x833fffe7

0800165c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001666:	230f      	movs	r3, #15
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001676:	2380      	movs	r3, #128	@ 0x80
 8001678:	055b      	lsls	r3, r3, #21
 800167a:	429a      	cmp	r2, r3
 800167c:	d011      	beq.n	80016a2 <HAL_ADC_ConfigChannel+0x46>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001682:	2b01      	cmp	r3, #1
 8001684:	d00d      	beq.n	80016a2 <HAL_ADC_ConfigChannel+0x46>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168a:	2b02      	cmp	r3, #2
 800168c:	d009      	beq.n	80016a2 <HAL_ADC_ConfigChannel+0x46>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001692:	2b03      	cmp	r3, #3
 8001694:	d005      	beq.n	80016a2 <HAL_ADC_ConfigChannel+0x46>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169a:	2b04      	cmp	r3, #4
 800169c:	d001      	beq.n	80016a2 <HAL_ADC_ConfigChannel+0x46>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2234      	movs	r2, #52	@ 0x34
 80016a6:	5c9b      	ldrb	r3, [r3, r2]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x54>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e0bb      	b.n	8001828 <HAL_ADC_ConfigChannel+0x1cc>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2234      	movs	r2, #52	@ 0x34
 80016b4:	2101      	movs	r1, #1
 80016b6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2204      	movs	r2, #4
 80016c0:	4013      	ands	r3, r2
 80016c2:	d000      	beq.n	80016c6 <HAL_ADC_ConfigChannel+0x6a>
 80016c4:	e09f      	b.n	8001806 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4a59      	ldr	r2, [pc, #356]	@ (8001830 <HAL_ADC_ConfigChannel+0x1d4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d100      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x76>
 80016d0:	e077      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2201      	movs	r2, #1
 80016de:	409a      	lsls	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ec:	2380      	movs	r3, #128	@ 0x80
 80016ee:	055b      	lsls	r3, r3, #21
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d037      	beq.n	8001764 <HAL_ADC_ConfigChannel+0x108>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d033      	beq.n	8001764 <HAL_ADC_ConfigChannel+0x108>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001700:	2b02      	cmp	r3, #2
 8001702:	d02f      	beq.n	8001764 <HAL_ADC_ConfigChannel+0x108>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001708:	2b03      	cmp	r3, #3
 800170a:	d02b      	beq.n	8001764 <HAL_ADC_ConfigChannel+0x108>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001710:	2b04      	cmp	r3, #4
 8001712:	d027      	beq.n	8001764 <HAL_ADC_ConfigChannel+0x108>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001718:	2b05      	cmp	r3, #5
 800171a:	d023      	beq.n	8001764 <HAL_ADC_ConfigChannel+0x108>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001720:	2b06      	cmp	r3, #6
 8001722:	d01f      	beq.n	8001764 <HAL_ADC_ConfigChannel+0x108>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001728:	2b07      	cmp	r3, #7
 800172a:	d01b      	beq.n	8001764 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	2107      	movs	r1, #7
 8001738:	400b      	ands	r3, r1
 800173a:	429a      	cmp	r2, r3
 800173c:	d012      	beq.n	8001764 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2107      	movs	r1, #7
 800174a:	438a      	bics	r2, r1
 800174c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6959      	ldr	r1, [r3, #20]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2207      	movs	r2, #7
 800175a:	401a      	ands	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b10      	cmp	r3, #16
 800176a:	d003      	beq.n	8001774 <HAL_ADC_ConfigChannel+0x118>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b11      	cmp	r3, #17
 8001772:	d152      	bne.n	800181a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001774:	4b2f      	ldr	r3, [pc, #188]	@ (8001834 <HAL_ADC_ConfigChannel+0x1d8>)
 8001776:	6819      	ldr	r1, [r3, #0]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b10      	cmp	r3, #16
 800177e:	d102      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x12a>
 8001780:	2380      	movs	r3, #128	@ 0x80
 8001782:	041b      	lsls	r3, r3, #16
 8001784:	e001      	b.n	800178a <HAL_ADC_ConfigChannel+0x12e>
 8001786:	2380      	movs	r3, #128	@ 0x80
 8001788:	03db      	lsls	r3, r3, #15
 800178a:	4a2a      	ldr	r2, [pc, #168]	@ (8001834 <HAL_ADC_ConfigChannel+0x1d8>)
 800178c:	430b      	orrs	r3, r1
 800178e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b10      	cmp	r3, #16
 8001796:	d140      	bne.n	800181a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <HAL_ADC_ConfigChannel+0x1dc>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4927      	ldr	r1, [pc, #156]	@ (800183c <HAL_ADC_ConfigChannel+0x1e0>)
 800179e:	0018      	movs	r0, r3
 80017a0:	f7fe fcbc 	bl	800011c <__udivsi3>
 80017a4:	0003      	movs	r3, r0
 80017a6:	001a      	movs	r2, r3
 80017a8:	0013      	movs	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	189b      	adds	r3, r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017b2:	e002      	b.n	80017ba <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f9      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x158>
 80017c0:	e02b      	b.n	800181a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2101      	movs	r1, #1
 80017ce:	4099      	lsls	r1, r3
 80017d0:	000b      	movs	r3, r1
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	400a      	ands	r2, r1
 80017da:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b10      	cmp	r3, #16
 80017e2:	d003      	beq.n	80017ec <HAL_ADC_ConfigChannel+0x190>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b11      	cmp	r3, #17
 80017ea:	d116      	bne.n	800181a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80017ec:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <HAL_ADC_ConfigChannel+0x1d8>)
 80017ee:	6819      	ldr	r1, [r3, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	d101      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x1a0>
 80017f8:	4a11      	ldr	r2, [pc, #68]	@ (8001840 <HAL_ADC_ConfigChannel+0x1e4>)
 80017fa:	e000      	b.n	80017fe <HAL_ADC_ConfigChannel+0x1a2>
 80017fc:	4a11      	ldr	r2, [pc, #68]	@ (8001844 <HAL_ADC_ConfigChannel+0x1e8>)
 80017fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001834 <HAL_ADC_ConfigChannel+0x1d8>)
 8001800:	400a      	ands	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	e009      	b.n	800181a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800180a:	2220      	movs	r2, #32
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001812:	230f      	movs	r3, #15
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2234      	movs	r2, #52	@ 0x34
 800181e:	2100      	movs	r1, #0
 8001820:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001822:	230f      	movs	r3, #15
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	781b      	ldrb	r3, [r3, #0]
}
 8001828:	0018      	movs	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	b004      	add	sp, #16
 800182e:	bd80      	pop	{r7, pc}
 8001830:	00001001 	.word	0x00001001
 8001834:	40012708 	.word	0x40012708
 8001838:	20000018 	.word	0x20000018
 800183c:	000f4240 	.word	0x000f4240
 8001840:	ff7fffff 	.word	0xff7fffff
 8001844:	ffbfffff 	.word	0xffbfffff

08001848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	0002      	movs	r2, r0
 8001850:	1dfb      	adds	r3, r7, #7
 8001852:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001854:	1dfb      	adds	r3, r7, #7
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b7f      	cmp	r3, #127	@ 0x7f
 800185a:	d809      	bhi.n	8001870 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185c:	1dfb      	adds	r3, r7, #7
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	001a      	movs	r2, r3
 8001862:	231f      	movs	r3, #31
 8001864:	401a      	ands	r2, r3
 8001866:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <__NVIC_EnableIRQ+0x30>)
 8001868:	2101      	movs	r1, #1
 800186a:	4091      	lsls	r1, r2
 800186c:	000a      	movs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]
  }
}
 8001870:	46c0      	nop			@ (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	b002      	add	sp, #8
 8001876:	bd80      	pop	{r7, pc}
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	0002      	movs	r2, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800188a:	1dfb      	adds	r3, r7, #7
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001890:	d828      	bhi.n	80018e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001892:	4a2f      	ldr	r2, [pc, #188]	@ (8001950 <__NVIC_SetPriority+0xd4>)
 8001894:	1dfb      	adds	r3, r7, #7
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b25b      	sxtb	r3, r3
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	33c0      	adds	r3, #192	@ 0xc0
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	589b      	ldr	r3, [r3, r2]
 80018a2:	1dfa      	adds	r2, r7, #7
 80018a4:	7812      	ldrb	r2, [r2, #0]
 80018a6:	0011      	movs	r1, r2
 80018a8:	2203      	movs	r2, #3
 80018aa:	400a      	ands	r2, r1
 80018ac:	00d2      	lsls	r2, r2, #3
 80018ae:	21ff      	movs	r1, #255	@ 0xff
 80018b0:	4091      	lsls	r1, r2
 80018b2:	000a      	movs	r2, r1
 80018b4:	43d2      	mvns	r2, r2
 80018b6:	401a      	ands	r2, r3
 80018b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	019b      	lsls	r3, r3, #6
 80018be:	22ff      	movs	r2, #255	@ 0xff
 80018c0:	401a      	ands	r2, r3
 80018c2:	1dfb      	adds	r3, r7, #7
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	0018      	movs	r0, r3
 80018c8:	2303      	movs	r3, #3
 80018ca:	4003      	ands	r3, r0
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018d0:	481f      	ldr	r0, [pc, #124]	@ (8001950 <__NVIC_SetPriority+0xd4>)
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b25b      	sxtb	r3, r3
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	430a      	orrs	r2, r1
 80018dc:	33c0      	adds	r3, #192	@ 0xc0
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018e2:	e031      	b.n	8001948 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001954 <__NVIC_SetPriority+0xd8>)
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	0019      	movs	r1, r3
 80018ec:	230f      	movs	r3, #15
 80018ee:	400b      	ands	r3, r1
 80018f0:	3b08      	subs	r3, #8
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3306      	adds	r3, #6
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	18d3      	adds	r3, r2, r3
 80018fa:	3304      	adds	r3, #4
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	1dfa      	adds	r2, r7, #7
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	0011      	movs	r1, r2
 8001904:	2203      	movs	r2, #3
 8001906:	400a      	ands	r2, r1
 8001908:	00d2      	lsls	r2, r2, #3
 800190a:	21ff      	movs	r1, #255	@ 0xff
 800190c:	4091      	lsls	r1, r2
 800190e:	000a      	movs	r2, r1
 8001910:	43d2      	mvns	r2, r2
 8001912:	401a      	ands	r2, r3
 8001914:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	019b      	lsls	r3, r3, #6
 800191a:	22ff      	movs	r2, #255	@ 0xff
 800191c:	401a      	ands	r2, r3
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	0018      	movs	r0, r3
 8001924:	2303      	movs	r3, #3
 8001926:	4003      	ands	r3, r0
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800192c:	4809      	ldr	r0, [pc, #36]	@ (8001954 <__NVIC_SetPriority+0xd8>)
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	001c      	movs	r4, r3
 8001934:	230f      	movs	r3, #15
 8001936:	4023      	ands	r3, r4
 8001938:	3b08      	subs	r3, #8
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	430a      	orrs	r2, r1
 800193e:	3306      	adds	r3, #6
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	18c3      	adds	r3, r0, r3
 8001944:	3304      	adds	r3, #4
 8001946:	601a      	str	r2, [r3, #0]
}
 8001948:	46c0      	nop			@ (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	b003      	add	sp, #12
 800194e:	bd90      	pop	{r4, r7, pc}
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	1e5a      	subs	r2, r3, #1
 8001964:	2380      	movs	r3, #128	@ 0x80
 8001966:	045b      	lsls	r3, r3, #17
 8001968:	429a      	cmp	r2, r3
 800196a:	d301      	bcc.n	8001970 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196c:	2301      	movs	r3, #1
 800196e:	e010      	b.n	8001992 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001970:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <SysTick_Config+0x44>)
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	3a01      	subs	r2, #1
 8001976:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001978:	2301      	movs	r3, #1
 800197a:	425b      	negs	r3, r3
 800197c:	2103      	movs	r1, #3
 800197e:	0018      	movs	r0, r3
 8001980:	f7ff ff7c 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <SysTick_Config+0x44>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198a:	4b04      	ldr	r3, [pc, #16]	@ (800199c <SysTick_Config+0x44>)
 800198c:	2207      	movs	r2, #7
 800198e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001990:	2300      	movs	r3, #0
}
 8001992:	0018      	movs	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	b002      	add	sp, #8
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	e000e010 	.word	0xe000e010

080019a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	210f      	movs	r1, #15
 80019ac:	187b      	adds	r3, r7, r1
 80019ae:	1c02      	adds	r2, r0, #0
 80019b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	0011      	movs	r1, r2
 80019bc:	0018      	movs	r0, r3
 80019be:	f7ff ff5d 	bl	800187c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80019c2:	46c0      	nop			@ (mov r8, r8)
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b004      	add	sp, #16
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	0002      	movs	r2, r0
 80019d2:	1dfb      	adds	r3, r7, #7
 80019d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b25b      	sxtb	r3, r3
 80019dc:	0018      	movs	r0, r3
 80019de:	f7ff ff33 	bl	8001848 <__NVIC_EnableIRQ>
}
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b002      	add	sp, #8
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff ffaf 	bl	8001958 <SysTick_Config>
 80019fa:	0003      	movs	r3, r0
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b002      	add	sp, #8
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a12:	e14f      	b.n	8001cb4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4091      	lsls	r1, r2
 8001a1e:	000a      	movs	r2, r1
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d100      	bne.n	8001a2c <HAL_GPIO_Init+0x28>
 8001a2a:	e140      	b.n	8001cae <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2203      	movs	r2, #3
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d005      	beq.n	8001a44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d130      	bne.n	8001aa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	409a      	lsls	r2, r3
 8001a52:	0013      	movs	r3, r2
 8001a54:	43da      	mvns	r2, r3
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	409a      	lsls	r2, r3
 8001a66:	0013      	movs	r3, r2
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	43da      	mvns	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	2201      	movs	r2, #1
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
 8001a98:	0013      	movs	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2203      	movs	r2, #3
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d017      	beq.n	8001ae2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	0013      	movs	r3, r2
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	0013      	movs	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d123      	bne.n	8001b36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	0092      	lsls	r2, r2, #2
 8001af8:	58d3      	ldr	r3, [r2, r3]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2207      	movs	r2, #7
 8001b00:	4013      	ands	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	409a      	lsls	r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2107      	movs	r1, #7
 8001b1a:	400b      	ands	r3, r1
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	0013      	movs	r3, r2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3208      	adds	r2, #8
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	6939      	ldr	r1, [r7, #16]
 8001b34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	43da      	mvns	r2, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2203      	movs	r2, #3
 8001b54:	401a      	ands	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	0013      	movs	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	23c0      	movs	r3, #192	@ 0xc0
 8001b70:	029b      	lsls	r3, r3, #10
 8001b72:	4013      	ands	r3, r2
 8001b74:	d100      	bne.n	8001b78 <HAL_GPIO_Init+0x174>
 8001b76:	e09a      	b.n	8001cae <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b78:	4b54      	ldr	r3, [pc, #336]	@ (8001ccc <HAL_GPIO_Init+0x2c8>)
 8001b7a:	699a      	ldr	r2, [r3, #24]
 8001b7c:	4b53      	ldr	r3, [pc, #332]	@ (8001ccc <HAL_GPIO_Init+0x2c8>)
 8001b7e:	2101      	movs	r1, #1
 8001b80:	430a      	orrs	r2, r1
 8001b82:	619a      	str	r2, [r3, #24]
 8001b84:	4b51      	ldr	r3, [pc, #324]	@ (8001ccc <HAL_GPIO_Init+0x2c8>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b90:	4a4f      	ldr	r2, [pc, #316]	@ (8001cd0 <HAL_GPIO_Init+0x2cc>)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3302      	adds	r3, #2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	589b      	ldr	r3, [r3, r2]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	0013      	movs	r3, r2
 8001bac:	43da      	mvns	r2, r3
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	2390      	movs	r3, #144	@ 0x90
 8001bb8:	05db      	lsls	r3, r3, #23
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0x1e2>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a44      	ldr	r2, [pc, #272]	@ (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00d      	beq.n	8001be2 <HAL_GPIO_Init+0x1de>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a43      	ldr	r2, [pc, #268]	@ (8001cd8 <HAL_GPIO_Init+0x2d4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x1da>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a42      	ldr	r2, [pc, #264]	@ (8001cdc <HAL_GPIO_Init+0x2d8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_GPIO_Init+0x1d6>
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x1e4>
 8001bda:	2305      	movs	r3, #5
 8001bdc:	e004      	b.n	8001be8 <HAL_GPIO_Init+0x1e4>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e002      	b.n	8001be8 <HAL_GPIO_Init+0x1e4>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_GPIO_Init+0x1e4>
 8001be6:	2300      	movs	r3, #0
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	2103      	movs	r1, #3
 8001bec:	400a      	ands	r2, r1
 8001bee:	0092      	lsls	r2, r2, #2
 8001bf0:	4093      	lsls	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bf8:	4935      	ldr	r1, [pc, #212]	@ (8001cd0 <HAL_GPIO_Init+0x2cc>)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	3302      	adds	r3, #2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c06:	4b36      	ldr	r3, [pc, #216]	@ (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	2380      	movs	r3, #128	@ 0x80
 8001c1c:	035b      	lsls	r3, r3, #13
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	43da      	mvns	r2, r3
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	2380      	movs	r3, #128	@ 0x80
 8001c46:	039b      	lsls	r3, r3, #14
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c54:	4b22      	ldr	r3, [pc, #136]	@ (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001c5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	43da      	mvns	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	2380      	movs	r3, #128	@ 0x80
 8001c70:	029b      	lsls	r3, r3, #10
 8001c72:	4013      	ands	r3, r2
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001c84:	4b16      	ldr	r3, [pc, #88]	@ (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	43da      	mvns	r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	2380      	movs	r3, #128	@ 0x80
 8001c9a:	025b      	lsls	r3, r3, #9
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce0 <HAL_GPIO_Init+0x2dc>)
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	40da      	lsrs	r2, r3
 8001cbc:	1e13      	subs	r3, r2, #0
 8001cbe:	d000      	beq.n	8001cc2 <HAL_GPIO_Init+0x2be>
 8001cc0:	e6a8      	b.n	8001a14 <HAL_GPIO_Init+0x10>
  } 
}
 8001cc2:	46c0      	nop			@ (mov r8, r8)
 8001cc4:	46c0      	nop			@ (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b006      	add	sp, #24
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	48000400 	.word	0x48000400
 8001cd8:	48000800 	.word	0x48000800
 8001cdc:	48000c00 	.word	0x48000c00
 8001ce0:	40010400 	.word	0x40010400

08001ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	0008      	movs	r0, r1
 8001cee:	0011      	movs	r1, r2
 8001cf0:	1cbb      	adds	r3, r7, #2
 8001cf2:	1c02      	adds	r2, r0, #0
 8001cf4:	801a      	strh	r2, [r3, #0]
 8001cf6:	1c7b      	adds	r3, r7, #1
 8001cf8:	1c0a      	adds	r2, r1, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cfc:	1c7b      	adds	r3, r7, #1
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d04:	1cbb      	adds	r3, r7, #2
 8001d06:	881a      	ldrh	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d0c:	e003      	b.n	8001d16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d0e:	1cbb      	adds	r3, r7, #2
 8001d10:	881a      	ldrh	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b002      	add	sp, #8
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	0002      	movs	r2, r0
 8001d28:	1dbb      	adds	r3, r7, #6
 8001d2a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	1dba      	adds	r2, r7, #6
 8001d32:	8812      	ldrh	r2, [r2, #0]
 8001d34:	4013      	ands	r3, r2
 8001d36:	d008      	beq.n	8001d4a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001d3a:	1dba      	adds	r2, r7, #6
 8001d3c:	8812      	ldrh	r2, [r2, #0]
 8001d3e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d40:	1dbb      	adds	r3, r7, #6
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff f8b1 	bl	8000eac <HAL_GPIO_EXTI_Callback>
  }
}
 8001d4a:	46c0      	nop			@ (mov r8, r8)
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b002      	add	sp, #8
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	46c0      	nop			@ (mov r8, r8)
 8001d54:	40010400 	.word	0x40010400

08001d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e301      	b.n	800236e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4013      	ands	r3, r2
 8001d72:	d100      	bne.n	8001d76 <HAL_RCC_OscConfig+0x1e>
 8001d74:	e08d      	b.n	8001e92 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d76:	4bc3      	ldr	r3, [pc, #780]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d00e      	beq.n	8001da0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d82:	4bc0      	ldr	r3, [pc, #768]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	220c      	movs	r2, #12
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d116      	bne.n	8001dbc <HAL_RCC_OscConfig+0x64>
 8001d8e:	4bbd      	ldr	r3, [pc, #756]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	2380      	movs	r3, #128	@ 0x80
 8001d94:	025b      	lsls	r3, r3, #9
 8001d96:	401a      	ands	r2, r3
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	025b      	lsls	r3, r3, #9
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d10d      	bne.n	8001dbc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	4bb8      	ldr	r3, [pc, #736]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	@ 0x80
 8001da6:	029b      	lsls	r3, r3, #10
 8001da8:	4013      	ands	r3, r2
 8001daa:	d100      	bne.n	8001dae <HAL_RCC_OscConfig+0x56>
 8001dac:	e070      	b.n	8001e90 <HAL_RCC_OscConfig+0x138>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d000      	beq.n	8001db8 <HAL_RCC_OscConfig+0x60>
 8001db6:	e06b      	b.n	8001e90 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e2d8      	b.n	800236e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x7c>
 8001dc4:	4baf      	ldr	r3, [pc, #700]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4bae      	ldr	r3, [pc, #696]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001dca:	2180      	movs	r1, #128	@ 0x80
 8001dcc:	0249      	lsls	r1, r1, #9
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	e02f      	b.n	8001e34 <HAL_RCC_OscConfig+0xdc>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10c      	bne.n	8001df6 <HAL_RCC_OscConfig+0x9e>
 8001ddc:	4ba9      	ldr	r3, [pc, #676]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4ba8      	ldr	r3, [pc, #672]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001de2:	49a9      	ldr	r1, [pc, #676]	@ (8002088 <HAL_RCC_OscConfig+0x330>)
 8001de4:	400a      	ands	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	4ba6      	ldr	r3, [pc, #664]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4ba5      	ldr	r3, [pc, #660]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001dee:	49a7      	ldr	r1, [pc, #668]	@ (800208c <HAL_RCC_OscConfig+0x334>)
 8001df0:	400a      	ands	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e01e      	b.n	8001e34 <HAL_RCC_OscConfig+0xdc>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b05      	cmp	r3, #5
 8001dfc:	d10e      	bne.n	8001e1c <HAL_RCC_OscConfig+0xc4>
 8001dfe:	4ba1      	ldr	r3, [pc, #644]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4ba0      	ldr	r3, [pc, #640]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001e04:	2180      	movs	r1, #128	@ 0x80
 8001e06:	02c9      	lsls	r1, r1, #11
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	4b9d      	ldr	r3, [pc, #628]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b9c      	ldr	r3, [pc, #624]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001e12:	2180      	movs	r1, #128	@ 0x80
 8001e14:	0249      	lsls	r1, r1, #9
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCC_OscConfig+0xdc>
 8001e1c:	4b99      	ldr	r3, [pc, #612]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b98      	ldr	r3, [pc, #608]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001e22:	4999      	ldr	r1, [pc, #612]	@ (8002088 <HAL_RCC_OscConfig+0x330>)
 8001e24:	400a      	ands	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	4b96      	ldr	r3, [pc, #600]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b95      	ldr	r3, [pc, #596]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001e2e:	4997      	ldr	r1, [pc, #604]	@ (800208c <HAL_RCC_OscConfig+0x334>)
 8001e30:	400a      	ands	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d014      	beq.n	8001e66 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff faa0 	bl	8001380 <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e46:	f7ff fa9b 	bl	8001380 <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b64      	cmp	r3, #100	@ 0x64
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e28a      	b.n	800236e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e58:	4b8a      	ldr	r3, [pc, #552]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	@ 0x80
 8001e5e:	029b      	lsls	r3, r3, #10
 8001e60:	4013      	ands	r3, r2
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0xee>
 8001e64:	e015      	b.n	8001e92 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff fa8b 	bl	8001380 <HAL_GetTick>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff fa86 	bl	8001380 <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	@ 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e275      	b.n	800236e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	4b80      	ldr	r3, [pc, #512]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	2380      	movs	r3, #128	@ 0x80
 8001e88:	029b      	lsls	r3, r3, #10
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x118>
 8001e8e:	e000      	b.n	8001e92 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2202      	movs	r2, #2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d100      	bne.n	8001e9e <HAL_RCC_OscConfig+0x146>
 8001e9c:	e069      	b.n	8001f72 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e9e:	4b79      	ldr	r3, [pc, #484]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d00b      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ea8:	4b76      	ldr	r3, [pc, #472]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	220c      	movs	r2, #12
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d11c      	bne.n	8001eee <HAL_RCC_OscConfig+0x196>
 8001eb4:	4b73      	ldr	r3, [pc, #460]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	025b      	lsls	r3, r3, #9
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d116      	bne.n	8001eee <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec0:	4b70      	ldr	r3, [pc, #448]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d005      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x17e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e24b      	b.n	800236e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed6:	4b6b      	ldr	r3, [pc, #428]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	22f8      	movs	r2, #248	@ 0xf8
 8001edc:	4393      	bics	r3, r2
 8001ede:	0019      	movs	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	00da      	lsls	r2, r3, #3
 8001ee6:	4b67      	ldr	r3, [pc, #412]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eec:	e041      	b.n	8001f72 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d024      	beq.n	8001f40 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef6:	4b63      	ldr	r3, [pc, #396]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b62      	ldr	r3, [pc, #392]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001efc:	2101      	movs	r1, #1
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7ff fa3d 	bl	8001380 <HAL_GetTick>
 8001f06:	0003      	movs	r3, r0
 8001f08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fa38 	bl	8001380 <HAL_GetTick>
 8001f10:	0002      	movs	r2, r0
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e227      	b.n	800236e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1e:	4b59      	ldr	r3, [pc, #356]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2202      	movs	r2, #2
 8001f24:	4013      	ands	r3, r2
 8001f26:	d0f1      	beq.n	8001f0c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f28:	4b56      	ldr	r3, [pc, #344]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	22f8      	movs	r2, #248	@ 0xf8
 8001f2e:	4393      	bics	r3, r2
 8001f30:	0019      	movs	r1, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00da      	lsls	r2, r3, #3
 8001f38:	4b52      	ldr	r3, [pc, #328]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e018      	b.n	8001f72 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f40:	4b50      	ldr	r3, [pc, #320]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b4f      	ldr	r3, [pc, #316]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001f46:	2101      	movs	r1, #1
 8001f48:	438a      	bics	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fa18 	bl	8001380 <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f56:	f7ff fa13 	bl	8001380 <HAL_GetTick>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e202      	b.n	800236e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f68:	4b46      	ldr	r3, [pc, #280]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d1f1      	bne.n	8001f56 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2208      	movs	r2, #8
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d036      	beq.n	8001fea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d019      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f84:	4b3f      	ldr	r3, [pc, #252]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001f86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f88:	4b3e      	ldr	r3, [pc, #248]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f90:	f7ff f9f6 	bl	8001380 <HAL_GetTick>
 8001f94:	0003      	movs	r3, r0
 8001f96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f9a:	f7ff f9f1 	bl	8001380 <HAL_GetTick>
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e1e0      	b.n	800236e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fac:	4b35      	ldr	r3, [pc, #212]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d0f1      	beq.n	8001f9a <HAL_RCC_OscConfig+0x242>
 8001fb6:	e018      	b.n	8001fea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb8:	4b32      	ldr	r3, [pc, #200]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001fba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fbc:	4b31      	ldr	r3, [pc, #196]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	438a      	bics	r2, r1
 8001fc2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc4:	f7ff f9dc 	bl	8001380 <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fce:	f7ff f9d7 	bl	8001380 <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e1c6      	b.n	800236e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe0:	4b28      	ldr	r3, [pc, #160]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d1f1      	bne.n	8001fce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2204      	movs	r2, #4
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d100      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x29e>
 8001ff4:	e0b4      	b.n	8002160 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff6:	201f      	movs	r0, #31
 8001ff8:	183b      	adds	r3, r7, r0
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffe:	4b21      	ldr	r3, [pc, #132]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8002000:	69da      	ldr	r2, [r3, #28]
 8002002:	2380      	movs	r3, #128	@ 0x80
 8002004:	055b      	lsls	r3, r3, #21
 8002006:	4013      	ands	r3, r2
 8002008:	d110      	bne.n	800202c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	4b1e      	ldr	r3, [pc, #120]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 800200c:	69da      	ldr	r2, [r3, #28]
 800200e:	4b1d      	ldr	r3, [pc, #116]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8002010:	2180      	movs	r1, #128	@ 0x80
 8002012:	0549      	lsls	r1, r1, #21
 8002014:	430a      	orrs	r2, r1
 8002016:	61da      	str	r2, [r3, #28]
 8002018:	4b1a      	ldr	r3, [pc, #104]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 800201a:	69da      	ldr	r2, [r3, #28]
 800201c:	2380      	movs	r3, #128	@ 0x80
 800201e:	055b      	lsls	r3, r3, #21
 8002020:	4013      	ands	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002026:	183b      	adds	r3, r7, r0
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202c:	4b18      	ldr	r3, [pc, #96]	@ (8002090 <HAL_RCC_OscConfig+0x338>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	@ 0x80
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4013      	ands	r3, r2
 8002036:	d11a      	bne.n	800206e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002038:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <HAL_RCC_OscConfig+0x338>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <HAL_RCC_OscConfig+0x338>)
 800203e:	2180      	movs	r1, #128	@ 0x80
 8002040:	0049      	lsls	r1, r1, #1
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002046:	f7ff f99b 	bl	8001380 <HAL_GetTick>
 800204a:	0003      	movs	r3, r0
 800204c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002050:	f7ff f996 	bl	8001380 <HAL_GetTick>
 8002054:	0002      	movs	r2, r0
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	@ 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e185      	b.n	800236e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002062:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <HAL_RCC_OscConfig+0x338>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	2380      	movs	r3, #128	@ 0x80
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4013      	ands	r3, r2
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d10e      	bne.n	8002094 <HAL_RCC_OscConfig+0x33c>
 8002076:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 8002078:	6a1a      	ldr	r2, [r3, #32]
 800207a:	4b02      	ldr	r3, [pc, #8]	@ (8002084 <HAL_RCC_OscConfig+0x32c>)
 800207c:	2101      	movs	r1, #1
 800207e:	430a      	orrs	r2, r1
 8002080:	621a      	str	r2, [r3, #32]
 8002082:	e035      	b.n	80020f0 <HAL_RCC_OscConfig+0x398>
 8002084:	40021000 	.word	0x40021000
 8002088:	fffeffff 	.word	0xfffeffff
 800208c:	fffbffff 	.word	0xfffbffff
 8002090:	40007000 	.word	0x40007000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10c      	bne.n	80020b6 <HAL_RCC_OscConfig+0x35e>
 800209c:	4bb6      	ldr	r3, [pc, #728]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	4bb5      	ldr	r3, [pc, #724]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80020a2:	2101      	movs	r1, #1
 80020a4:	438a      	bics	r2, r1
 80020a6:	621a      	str	r2, [r3, #32]
 80020a8:	4bb3      	ldr	r3, [pc, #716]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80020aa:	6a1a      	ldr	r2, [r3, #32]
 80020ac:	4bb2      	ldr	r3, [pc, #712]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80020ae:	2104      	movs	r1, #4
 80020b0:	438a      	bics	r2, r1
 80020b2:	621a      	str	r2, [r3, #32]
 80020b4:	e01c      	b.n	80020f0 <HAL_RCC_OscConfig+0x398>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x380>
 80020be:	4bae      	ldr	r3, [pc, #696]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80020c0:	6a1a      	ldr	r2, [r3, #32]
 80020c2:	4bad      	ldr	r3, [pc, #692]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80020c4:	2104      	movs	r1, #4
 80020c6:	430a      	orrs	r2, r1
 80020c8:	621a      	str	r2, [r3, #32]
 80020ca:	4bab      	ldr	r3, [pc, #684]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80020cc:	6a1a      	ldr	r2, [r3, #32]
 80020ce:	4baa      	ldr	r3, [pc, #680]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	430a      	orrs	r2, r1
 80020d4:	621a      	str	r2, [r3, #32]
 80020d6:	e00b      	b.n	80020f0 <HAL_RCC_OscConfig+0x398>
 80020d8:	4ba7      	ldr	r3, [pc, #668]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80020da:	6a1a      	ldr	r2, [r3, #32]
 80020dc:	4ba6      	ldr	r3, [pc, #664]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80020de:	2101      	movs	r1, #1
 80020e0:	438a      	bics	r2, r1
 80020e2:	621a      	str	r2, [r3, #32]
 80020e4:	4ba4      	ldr	r3, [pc, #656]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	4ba3      	ldr	r3, [pc, #652]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80020ea:	2104      	movs	r1, #4
 80020ec:	438a      	bics	r2, r1
 80020ee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d014      	beq.n	8002122 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7ff f942 	bl	8001380 <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002100:	e009      	b.n	8002116 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7ff f93d 	bl	8001380 <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	4a9b      	ldr	r2, [pc, #620]	@ (800237c <HAL_RCC_OscConfig+0x624>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e12b      	b.n	800236e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002116:	4b98      	ldr	r3, [pc, #608]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	2202      	movs	r2, #2
 800211c:	4013      	ands	r3, r2
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x3aa>
 8002120:	e013      	b.n	800214a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7ff f92d 	bl	8001380 <HAL_GetTick>
 8002126:	0003      	movs	r3, r0
 8002128:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212a:	e009      	b.n	8002140 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7ff f928 	bl	8001380 <HAL_GetTick>
 8002130:	0002      	movs	r2, r0
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	4a91      	ldr	r2, [pc, #580]	@ (800237c <HAL_RCC_OscConfig+0x624>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e116      	b.n	800236e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002140:	4b8d      	ldr	r3, [pc, #564]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	2202      	movs	r2, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800214a:	231f      	movs	r3, #31
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002154:	4b88      	ldr	r3, [pc, #544]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	4b87      	ldr	r3, [pc, #540]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 800215a:	4989      	ldr	r1, [pc, #548]	@ (8002380 <HAL_RCC_OscConfig+0x628>)
 800215c:	400a      	ands	r2, r1
 800215e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2210      	movs	r2, #16
 8002166:	4013      	ands	r3, r2
 8002168:	d063      	beq.n	8002232 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d12a      	bne.n	80021c8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002172:	4b81      	ldr	r3, [pc, #516]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 8002174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002176:	4b80      	ldr	r3, [pc, #512]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 8002178:	2104      	movs	r1, #4
 800217a:	430a      	orrs	r2, r1
 800217c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800217e:	4b7e      	ldr	r3, [pc, #504]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 8002180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002182:	4b7d      	ldr	r3, [pc, #500]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 8002184:	2101      	movs	r1, #1
 8002186:	430a      	orrs	r2, r1
 8002188:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218a:	f7ff f8f9 	bl	8001380 <HAL_GetTick>
 800218e:	0003      	movs	r3, r0
 8002190:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002194:	f7ff f8f4 	bl	8001380 <HAL_GetTick>
 8002198:	0002      	movs	r2, r0
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e0e3      	b.n	800236e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021a6:	4b74      	ldr	r3, [pc, #464]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80021a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021aa:	2202      	movs	r2, #2
 80021ac:	4013      	ands	r3, r2
 80021ae:	d0f1      	beq.n	8002194 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021b0:	4b71      	ldr	r3, [pc, #452]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80021b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b4:	22f8      	movs	r2, #248	@ 0xf8
 80021b6:	4393      	bics	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	00da      	lsls	r2, r3, #3
 80021c0:	4b6d      	ldr	r3, [pc, #436]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80021c2:	430a      	orrs	r2, r1
 80021c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80021c6:	e034      	b.n	8002232 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	3305      	adds	r3, #5
 80021ce:	d111      	bne.n	80021f4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80021d0:	4b69      	ldr	r3, [pc, #420]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80021d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021d4:	4b68      	ldr	r3, [pc, #416]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80021d6:	2104      	movs	r1, #4
 80021d8:	438a      	bics	r2, r1
 80021da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021dc:	4b66      	ldr	r3, [pc, #408]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80021de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e0:	22f8      	movs	r2, #248	@ 0xf8
 80021e2:	4393      	bics	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	00da      	lsls	r2, r3, #3
 80021ec:	4b62      	ldr	r3, [pc, #392]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021f2:	e01e      	b.n	8002232 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021f4:	4b60      	ldr	r3, [pc, #384]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80021f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021f8:	4b5f      	ldr	r3, [pc, #380]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80021fa:	2104      	movs	r1, #4
 80021fc:	430a      	orrs	r2, r1
 80021fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002200:	4b5d      	ldr	r3, [pc, #372]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 8002202:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002204:	4b5c      	ldr	r3, [pc, #368]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 8002206:	2101      	movs	r1, #1
 8002208:	438a      	bics	r2, r1
 800220a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220c:	f7ff f8b8 	bl	8001380 <HAL_GetTick>
 8002210:	0003      	movs	r3, r0
 8002212:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002216:	f7ff f8b3 	bl	8001380 <HAL_GetTick>
 800221a:	0002      	movs	r2, r0
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0a2      	b.n	800236e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002228:	4b53      	ldr	r3, [pc, #332]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 800222a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222c:	2202      	movs	r2, #2
 800222e:	4013      	ands	r3, r2
 8002230:	d1f1      	bne.n	8002216 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d100      	bne.n	800223c <HAL_RCC_OscConfig+0x4e4>
 800223a:	e097      	b.n	800236c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800223c:	4b4e      	ldr	r3, [pc, #312]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	220c      	movs	r2, #12
 8002242:	4013      	ands	r3, r2
 8002244:	2b08      	cmp	r3, #8
 8002246:	d100      	bne.n	800224a <HAL_RCC_OscConfig+0x4f2>
 8002248:	e06b      	b.n	8002322 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d14c      	bne.n	80022ec <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b49      	ldr	r3, [pc, #292]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4b48      	ldr	r3, [pc, #288]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 8002258:	494a      	ldr	r1, [pc, #296]	@ (8002384 <HAL_RCC_OscConfig+0x62c>)
 800225a:	400a      	ands	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7ff f88f 	bl	8001380 <HAL_GetTick>
 8002262:	0003      	movs	r3, r0
 8002264:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002268:	f7ff f88a 	bl	8001380 <HAL_GetTick>
 800226c:	0002      	movs	r2, r0
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e079      	b.n	800236e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227a:	4b3f      	ldr	r3, [pc, #252]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	2380      	movs	r3, #128	@ 0x80
 8002280:	049b      	lsls	r3, r3, #18
 8002282:	4013      	ands	r3, r2
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002286:	4b3c      	ldr	r3, [pc, #240]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 8002288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228a:	220f      	movs	r2, #15
 800228c:	4393      	bics	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002294:	4b38      	ldr	r3, [pc, #224]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 8002296:	430a      	orrs	r2, r1
 8002298:	62da      	str	r2, [r3, #44]	@ 0x2c
 800229a:	4b37      	ldr	r3, [pc, #220]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4a3a      	ldr	r2, [pc, #232]	@ (8002388 <HAL_RCC_OscConfig+0x630>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	431a      	orrs	r2, r3
 80022ae:	4b32      	ldr	r3, [pc, #200]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80022b0:	430a      	orrs	r2, r1
 80022b2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b4:	4b30      	ldr	r3, [pc, #192]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80022ba:	2180      	movs	r1, #128	@ 0x80
 80022bc:	0449      	lsls	r1, r1, #17
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7ff f85d 	bl	8001380 <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022cc:	f7ff f858 	bl	8001380 <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e047      	b.n	800236e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022de:	4b26      	ldr	r3, [pc, #152]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	2380      	movs	r3, #128	@ 0x80
 80022e4:	049b      	lsls	r3, r3, #18
 80022e6:	4013      	ands	r3, r2
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x574>
 80022ea:	e03f      	b.n	800236c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ec:	4b22      	ldr	r3, [pc, #136]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b21      	ldr	r3, [pc, #132]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 80022f2:	4924      	ldr	r1, [pc, #144]	@ (8002384 <HAL_RCC_OscConfig+0x62c>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff f842 	bl	8001380 <HAL_GetTick>
 80022fc:	0003      	movs	r3, r0
 80022fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002302:	f7ff f83d 	bl	8001380 <HAL_GetTick>
 8002306:	0002      	movs	r2, r0
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e02c      	b.n	800236e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002314:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	2380      	movs	r3, #128	@ 0x80
 800231a:	049b      	lsls	r3, r3, #18
 800231c:	4013      	ands	r3, r2
 800231e:	d1f0      	bne.n	8002302 <HAL_RCC_OscConfig+0x5aa>
 8002320:	e024      	b.n	800236c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e01f      	b.n	800236e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800232e:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002334:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <HAL_RCC_OscConfig+0x620>)
 8002336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002338:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	2380      	movs	r3, #128	@ 0x80
 800233e:	025b      	lsls	r3, r3, #9
 8002340:	401a      	ands	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	429a      	cmp	r2, r3
 8002348:	d10e      	bne.n	8002368 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	220f      	movs	r2, #15
 800234e:	401a      	ands	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d107      	bne.n	8002368 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	23f0      	movs	r3, #240	@ 0xf0
 800235c:	039b      	lsls	r3, r3, #14
 800235e:	401a      	ands	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	b008      	add	sp, #32
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	40021000 	.word	0x40021000
 800237c:	00001388 	.word	0x00001388
 8002380:	efffffff 	.word	0xefffffff
 8002384:	feffffff 	.word	0xfeffffff
 8002388:	ffc2ffff 	.word	0xffc2ffff

0800238c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0b3      	b.n	8002508 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a0:	4b5b      	ldr	r3, [pc, #364]	@ (8002510 <HAL_RCC_ClockConfig+0x184>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2201      	movs	r2, #1
 80023a6:	4013      	ands	r3, r2
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d911      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b58      	ldr	r3, [pc, #352]	@ (8002510 <HAL_RCC_ClockConfig+0x184>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2201      	movs	r2, #1
 80023b4:	4393      	bics	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	4b55      	ldr	r3, [pc, #340]	@ (8002510 <HAL_RCC_ClockConfig+0x184>)
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c0:	4b53      	ldr	r3, [pc, #332]	@ (8002510 <HAL_RCC_ClockConfig+0x184>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2201      	movs	r2, #1
 80023c6:	4013      	ands	r3, r2
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d001      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e09a      	b.n	8002508 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2202      	movs	r2, #2
 80023d8:	4013      	ands	r3, r2
 80023da:	d015      	beq.n	8002408 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2204      	movs	r2, #4
 80023e2:	4013      	ands	r3, r2
 80023e4:	d006      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002514 <HAL_RCC_ClockConfig+0x188>)
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002514 <HAL_RCC_ClockConfig+0x188>)
 80023ec:	21e0      	movs	r1, #224	@ 0xe0
 80023ee:	00c9      	lsls	r1, r1, #3
 80023f0:	430a      	orrs	r2, r1
 80023f2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	4b47      	ldr	r3, [pc, #284]	@ (8002514 <HAL_RCC_ClockConfig+0x188>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	22f0      	movs	r2, #240	@ 0xf0
 80023fa:	4393      	bics	r3, r2
 80023fc:	0019      	movs	r1, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	4b44      	ldr	r3, [pc, #272]	@ (8002514 <HAL_RCC_ClockConfig+0x188>)
 8002404:	430a      	orrs	r2, r1
 8002406:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2201      	movs	r2, #1
 800240e:	4013      	ands	r3, r2
 8002410:	d040      	beq.n	8002494 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	4b3e      	ldr	r3, [pc, #248]	@ (8002514 <HAL_RCC_ClockConfig+0x188>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	2380      	movs	r3, #128	@ 0x80
 8002420:	029b      	lsls	r3, r3, #10
 8002422:	4013      	ands	r3, r2
 8002424:	d114      	bne.n	8002450 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e06e      	b.n	8002508 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	4b38      	ldr	r3, [pc, #224]	@ (8002514 <HAL_RCC_ClockConfig+0x188>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	2380      	movs	r3, #128	@ 0x80
 8002438:	049b      	lsls	r3, r3, #18
 800243a:	4013      	ands	r3, r2
 800243c:	d108      	bne.n	8002450 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e062      	b.n	8002508 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	4b34      	ldr	r3, [pc, #208]	@ (8002514 <HAL_RCC_ClockConfig+0x188>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2202      	movs	r2, #2
 8002448:	4013      	ands	r3, r2
 800244a:	d101      	bne.n	8002450 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e05b      	b.n	8002508 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002450:	4b30      	ldr	r3, [pc, #192]	@ (8002514 <HAL_RCC_ClockConfig+0x188>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2203      	movs	r2, #3
 8002456:	4393      	bics	r3, r2
 8002458:	0019      	movs	r1, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	4b2d      	ldr	r3, [pc, #180]	@ (8002514 <HAL_RCC_ClockConfig+0x188>)
 8002460:	430a      	orrs	r2, r1
 8002462:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002464:	f7fe ff8c 	bl	8001380 <HAL_GetTick>
 8002468:	0003      	movs	r3, r0
 800246a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246c:	e009      	b.n	8002482 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246e:	f7fe ff87 	bl	8001380 <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	4a27      	ldr	r2, [pc, #156]	@ (8002518 <HAL_RCC_ClockConfig+0x18c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e042      	b.n	8002508 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b24      	ldr	r3, [pc, #144]	@ (8002514 <HAL_RCC_ClockConfig+0x188>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	220c      	movs	r2, #12
 8002488:	401a      	ands	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	429a      	cmp	r2, r3
 8002492:	d1ec      	bne.n	800246e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b1e      	ldr	r3, [pc, #120]	@ (8002510 <HAL_RCC_ClockConfig+0x184>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2201      	movs	r2, #1
 800249a:	4013      	ands	r3, r2
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d211      	bcs.n	80024c6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002510 <HAL_RCC_ClockConfig+0x184>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2201      	movs	r2, #1
 80024a8:	4393      	bics	r3, r2
 80024aa:	0019      	movs	r1, r3
 80024ac:	4b18      	ldr	r3, [pc, #96]	@ (8002510 <HAL_RCC_ClockConfig+0x184>)
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b4:	4b16      	ldr	r3, [pc, #88]	@ (8002510 <HAL_RCC_ClockConfig+0x184>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2201      	movs	r2, #1
 80024ba:	4013      	ands	r3, r2
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e020      	b.n	8002508 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2204      	movs	r2, #4
 80024cc:	4013      	ands	r3, r2
 80024ce:	d009      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024d0:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <HAL_RCC_ClockConfig+0x188>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4a11      	ldr	r2, [pc, #68]	@ (800251c <HAL_RCC_ClockConfig+0x190>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	0019      	movs	r1, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	4b0d      	ldr	r3, [pc, #52]	@ (8002514 <HAL_RCC_ClockConfig+0x188>)
 80024e0:	430a      	orrs	r2, r1
 80024e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024e4:	f000 f820 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80024e8:	0001      	movs	r1, r0
 80024ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <HAL_RCC_ClockConfig+0x188>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	091b      	lsrs	r3, r3, #4
 80024f0:	220f      	movs	r2, #15
 80024f2:	4013      	ands	r3, r2
 80024f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002520 <HAL_RCC_ClockConfig+0x194>)
 80024f6:	5cd3      	ldrb	r3, [r2, r3]
 80024f8:	000a      	movs	r2, r1
 80024fa:	40da      	lsrs	r2, r3
 80024fc:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <HAL_RCC_ClockConfig+0x198>)
 80024fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002500:	2003      	movs	r0, #3
 8002502:	f7fe fef7 	bl	80012f4 <HAL_InitTick>
  
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	0018      	movs	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	b004      	add	sp, #16
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40022000 	.word	0x40022000
 8002514:	40021000 	.word	0x40021000
 8002518:	00001388 	.word	0x00001388
 800251c:	fffff8ff 	.word	0xfffff8ff
 8002520:	08004404 	.word	0x08004404
 8002524:	20000018 	.word	0x20000018

08002528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	2300      	movs	r3, #0
 800253c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002542:	4b20      	ldr	r3, [pc, #128]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	220c      	movs	r2, #12
 800254c:	4013      	ands	r3, r2
 800254e:	2b04      	cmp	r3, #4
 8002550:	d002      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x30>
 8002552:	2b08      	cmp	r3, #8
 8002554:	d003      	beq.n	800255e <HAL_RCC_GetSysClockFreq+0x36>
 8002556:	e02c      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002558:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800255a:	613b      	str	r3, [r7, #16]
      break;
 800255c:	e02c      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	0c9b      	lsrs	r3, r3, #18
 8002562:	220f      	movs	r2, #15
 8002564:	4013      	ands	r3, r2
 8002566:	4a19      	ldr	r2, [pc, #100]	@ (80025cc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002568:	5cd3      	ldrb	r3, [r2, r3]
 800256a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800256c:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800256e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002570:	220f      	movs	r2, #15
 8002572:	4013      	ands	r3, r2
 8002574:	4a16      	ldr	r2, [pc, #88]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002576:	5cd3      	ldrb	r3, [r2, r3]
 8002578:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	2380      	movs	r3, #128	@ 0x80
 800257e:	025b      	lsls	r3, r3, #9
 8002580:	4013      	ands	r3, r2
 8002582:	d009      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	4810      	ldr	r0, [pc, #64]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002588:	f7fd fdc8 	bl	800011c <__udivsi3>
 800258c:	0003      	movs	r3, r0
 800258e:	001a      	movs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4353      	muls	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e009      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	000a      	movs	r2, r1
 800259c:	0152      	lsls	r2, r2, #5
 800259e:	1a52      	subs	r2, r2, r1
 80025a0:	0193      	lsls	r3, r2, #6
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	185b      	adds	r3, r3, r1
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	613b      	str	r3, [r7, #16]
      break;
 80025b0:	e002      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b2:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025b4:	613b      	str	r3, [r7, #16]
      break;
 80025b6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025b8:	693b      	ldr	r3, [r7, #16]
}
 80025ba:	0018      	movs	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	b006      	add	sp, #24
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	40021000 	.word	0x40021000
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	0800441c 	.word	0x0800441c
 80025d0:	0800442c 	.word	0x0800442c

080025d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d8:	4b02      	ldr	r3, [pc, #8]	@ (80025e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	0018      	movs	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			@ (mov r8, r8)
 80025e4:	20000018 	.word	0x20000018

080025e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80025ec:	f7ff fff2 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 80025f0:	0001      	movs	r1, r0
 80025f2:	4b06      	ldr	r3, [pc, #24]	@ (800260c <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	2207      	movs	r2, #7
 80025fa:	4013      	ands	r3, r2
 80025fc:	4a04      	ldr	r2, [pc, #16]	@ (8002610 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025fe:	5cd3      	ldrb	r3, [r2, r3]
 8002600:	40d9      	lsrs	r1, r3
 8002602:	000b      	movs	r3, r1
}    
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	46c0      	nop			@ (mov r8, r8)
 800260c:	40021000 	.word	0x40021000
 8002610:	08004414 	.word	0x08004414

08002614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	2380      	movs	r3, #128	@ 0x80
 800262a:	025b      	lsls	r3, r3, #9
 800262c:	4013      	ands	r3, r2
 800262e:	d100      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002630:	e08e      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002632:	2017      	movs	r0, #23
 8002634:	183b      	adds	r3, r7, r0
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263a:	4b57      	ldr	r3, [pc, #348]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	2380      	movs	r3, #128	@ 0x80
 8002640:	055b      	lsls	r3, r3, #21
 8002642:	4013      	ands	r3, r2
 8002644:	d110      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	4b54      	ldr	r3, [pc, #336]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002648:	69da      	ldr	r2, [r3, #28]
 800264a:	4b53      	ldr	r3, [pc, #332]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800264c:	2180      	movs	r1, #128	@ 0x80
 800264e:	0549      	lsls	r1, r1, #21
 8002650:	430a      	orrs	r2, r1
 8002652:	61da      	str	r2, [r3, #28]
 8002654:	4b50      	ldr	r3, [pc, #320]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002656:	69da      	ldr	r2, [r3, #28]
 8002658:	2380      	movs	r3, #128	@ 0x80
 800265a:	055b      	lsls	r3, r3, #21
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002662:	183b      	adds	r3, r7, r0
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	4b4c      	ldr	r3, [pc, #304]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	@ 0x80
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4013      	ands	r3, r2
 8002672:	d11a      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002674:	4b49      	ldr	r3, [pc, #292]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b48      	ldr	r3, [pc, #288]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800267a:	2180      	movs	r1, #128	@ 0x80
 800267c:	0049      	lsls	r1, r1, #1
 800267e:	430a      	orrs	r2, r1
 8002680:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002682:	f7fe fe7d 	bl	8001380 <HAL_GetTick>
 8002686:	0003      	movs	r3, r0
 8002688:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268a:	e008      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268c:	f7fe fe78 	bl	8001380 <HAL_GetTick>
 8002690:	0002      	movs	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	@ 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e077      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269e:	4b3f      	ldr	r3, [pc, #252]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	2380      	movs	r3, #128	@ 0x80
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4013      	ands	r3, r2
 80026a8:	d0f0      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026ac:	6a1a      	ldr	r2, [r3, #32]
 80026ae:	23c0      	movs	r3, #192	@ 0xc0
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4013      	ands	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d034      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	23c0      	movs	r3, #192	@ 0xc0
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4013      	ands	r3, r2
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d02c      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026cc:	4b32      	ldr	r3, [pc, #200]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4a33      	ldr	r2, [pc, #204]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026d6:	4b30      	ldr	r3, [pc, #192]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026d8:	6a1a      	ldr	r2, [r3, #32]
 80026da:	4b2f      	ldr	r3, [pc, #188]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026dc:	2180      	movs	r1, #128	@ 0x80
 80026de:	0249      	lsls	r1, r1, #9
 80026e0:	430a      	orrs	r2, r1
 80026e2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026e6:	6a1a      	ldr	r2, [r3, #32]
 80026e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026ea:	492e      	ldr	r1, [pc, #184]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80026ec:	400a      	ands	r2, r1
 80026ee:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026f0:	4b29      	ldr	r3, [pc, #164]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	4013      	ands	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fe:	f7fe fe3f 	bl	8001380 <HAL_GetTick>
 8002702:	0003      	movs	r3, r0
 8002704:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002706:	e009      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f7fe fe3a 	bl	8001380 <HAL_GetTick>
 800270c:	0002      	movs	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	4a25      	ldr	r2, [pc, #148]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d901      	bls.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e038      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271c:	4b1e      	ldr	r3, [pc, #120]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	2202      	movs	r2, #2
 8002722:	4013      	ands	r3, r2
 8002724:	d0f0      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002726:	4b1c      	ldr	r3, [pc, #112]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a1d      	ldr	r2, [pc, #116]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800272c:	4013      	ands	r3, r2
 800272e:	0019      	movs	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	4b18      	ldr	r3, [pc, #96]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002736:	430a      	orrs	r2, r1
 8002738:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800273a:	2317      	movs	r3, #23
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002744:	4b14      	ldr	r3, [pc, #80]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002746:	69da      	ldr	r2, [r3, #28]
 8002748:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800274a:	4918      	ldr	r1, [pc, #96]	@ (80027ac <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800274c:	400a      	ands	r2, r1
 800274e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2201      	movs	r2, #1
 8002756:	4013      	ands	r3, r2
 8002758:	d009      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800275a:	4b0f      	ldr	r3, [pc, #60]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	2203      	movs	r2, #3
 8002760:	4393      	bics	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800276a:	430a      	orrs	r2, r1
 800276c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2220      	movs	r2, #32
 8002774:	4013      	ands	r3, r2
 8002776:	d009      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002778:	4b07      	ldr	r3, [pc, #28]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277c:	2210      	movs	r2, #16
 800277e:	4393      	bics	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002788:	430a      	orrs	r2, r1
 800278a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b006      	add	sp, #24
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	40021000 	.word	0x40021000
 800279c:	40007000 	.word	0x40007000
 80027a0:	fffffcff 	.word	0xfffffcff
 80027a4:	fffeffff 	.word	0xfffeffff
 80027a8:	00001388 	.word	0x00001388
 80027ac:	efffffff 	.word	0xefffffff

080027b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e042      	b.n	8002848 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	223d      	movs	r2, #61	@ 0x3d
 80027c6:	5c9b      	ldrb	r3, [r3, r2]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d107      	bne.n	80027de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	223c      	movs	r2, #60	@ 0x3c
 80027d2:	2100      	movs	r1, #0
 80027d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	0018      	movs	r0, r3
 80027da:	f7fe fc03 	bl	8000fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	223d      	movs	r2, #61	@ 0x3d
 80027e2:	2102      	movs	r1, #2
 80027e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3304      	adds	r3, #4
 80027ee:	0019      	movs	r1, r3
 80027f0:	0010      	movs	r0, r2
 80027f2:	f000 f943 	bl	8002a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2246      	movs	r2, #70	@ 0x46
 80027fa:	2101      	movs	r1, #1
 80027fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	223e      	movs	r2, #62	@ 0x3e
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	223f      	movs	r2, #63	@ 0x3f
 800280a:	2101      	movs	r1, #1
 800280c:	5499      	strb	r1, [r3, r2]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2240      	movs	r2, #64	@ 0x40
 8002812:	2101      	movs	r1, #1
 8002814:	5499      	strb	r1, [r3, r2]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2241      	movs	r2, #65	@ 0x41
 800281a:	2101      	movs	r1, #1
 800281c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2242      	movs	r2, #66	@ 0x42
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2243      	movs	r2, #67	@ 0x43
 800282a:	2101      	movs	r1, #1
 800282c:	5499      	strb	r1, [r3, r2]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2244      	movs	r2, #68	@ 0x44
 8002832:	2101      	movs	r1, #1
 8002834:	5499      	strb	r1, [r3, r2]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2245      	movs	r2, #69	@ 0x45
 800283a:	2101      	movs	r1, #1
 800283c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	223d      	movs	r2, #61	@ 0x3d
 8002842:	2101      	movs	r1, #1
 8002844:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2202      	movs	r2, #2
 800286c:	4013      	ands	r3, r2
 800286e:	d021      	beq.n	80028b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2202      	movs	r2, #2
 8002874:	4013      	ands	r3, r2
 8002876:	d01d      	beq.n	80028b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2203      	movs	r2, #3
 800287e:	4252      	negs	r2, r2
 8002880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2203      	movs	r2, #3
 8002890:	4013      	ands	r3, r2
 8002892:	d004      	beq.n	800289e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	0018      	movs	r0, r3
 8002898:	f000 f8d8 	bl	8002a4c <HAL_TIM_IC_CaptureCallback>
 800289c:	e007      	b.n	80028ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f000 f8cb 	bl	8002a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f000 f8d7 	bl	8002a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2204      	movs	r2, #4
 80028b8:	4013      	ands	r3, r2
 80028ba:	d022      	beq.n	8002902 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2204      	movs	r2, #4
 80028c0:	4013      	ands	r3, r2
 80028c2:	d01e      	beq.n	8002902 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2205      	movs	r2, #5
 80028ca:	4252      	negs	r2, r2
 80028cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2202      	movs	r2, #2
 80028d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	23c0      	movs	r3, #192	@ 0xc0
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4013      	ands	r3, r2
 80028e0:	d004      	beq.n	80028ec <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f000 f8b1 	bl	8002a4c <HAL_TIM_IC_CaptureCallback>
 80028ea:	e007      	b.n	80028fc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	0018      	movs	r0, r3
 80028f0:	f000 f8a4 	bl	8002a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	0018      	movs	r0, r3
 80028f8:	f000 f8b0 	bl	8002a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2208      	movs	r2, #8
 8002906:	4013      	ands	r3, r2
 8002908:	d021      	beq.n	800294e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2208      	movs	r2, #8
 800290e:	4013      	ands	r3, r2
 8002910:	d01d      	beq.n	800294e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2209      	movs	r2, #9
 8002918:	4252      	negs	r2, r2
 800291a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2204      	movs	r2, #4
 8002920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	2203      	movs	r2, #3
 800292a:	4013      	ands	r3, r2
 800292c:	d004      	beq.n	8002938 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0018      	movs	r0, r3
 8002932:	f000 f88b 	bl	8002a4c <HAL_TIM_IC_CaptureCallback>
 8002936:	e007      	b.n	8002948 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	0018      	movs	r0, r3
 800293c:	f000 f87e 	bl	8002a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	0018      	movs	r0, r3
 8002944:	f000 f88a 	bl	8002a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2210      	movs	r2, #16
 8002952:	4013      	ands	r3, r2
 8002954:	d022      	beq.n	800299c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2210      	movs	r2, #16
 800295a:	4013      	ands	r3, r2
 800295c:	d01e      	beq.n	800299c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2211      	movs	r2, #17
 8002964:	4252      	negs	r2, r2
 8002966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2208      	movs	r2, #8
 800296c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69da      	ldr	r2, [r3, #28]
 8002974:	23c0      	movs	r3, #192	@ 0xc0
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4013      	ands	r3, r2
 800297a:	d004      	beq.n	8002986 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	0018      	movs	r0, r3
 8002980:	f000 f864 	bl	8002a4c <HAL_TIM_IC_CaptureCallback>
 8002984:	e007      	b.n	8002996 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	0018      	movs	r0, r3
 800298a:	f000 f857 	bl	8002a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	0018      	movs	r0, r3
 8002992:	f000 f863 	bl	8002a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2201      	movs	r2, #1
 80029a0:	4013      	ands	r3, r2
 80029a2:	d00c      	beq.n	80029be <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2201      	movs	r2, #1
 80029a8:	4013      	ands	r3, r2
 80029aa:	d008      	beq.n	80029be <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	4252      	negs	r2, r2
 80029b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 f837 	bl	8002a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2280      	movs	r2, #128	@ 0x80
 80029c2:	4013      	ands	r3, r2
 80029c4:	d00c      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2280      	movs	r2, #128	@ 0x80
 80029ca:	4013      	ands	r3, r2
 80029cc:	d008      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2281      	movs	r2, #129	@ 0x81
 80029d4:	4252      	negs	r2, r2
 80029d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 f8da 	bl	8002b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2240      	movs	r2, #64	@ 0x40
 80029e4:	4013      	ands	r3, r2
 80029e6:	d00c      	beq.n	8002a02 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2240      	movs	r2, #64	@ 0x40
 80029ec:	4013      	ands	r3, r2
 80029ee:	d008      	beq.n	8002a02 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2241      	movs	r2, #65	@ 0x41
 80029f6:	4252      	negs	r2, r2
 80029f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	0018      	movs	r0, r3
 80029fe:	f000 f835 	bl	8002a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2220      	movs	r2, #32
 8002a06:	4013      	ands	r3, r2
 8002a08:	d00c      	beq.n	8002a24 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d008      	beq.n	8002a24 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2221      	movs	r2, #33	@ 0x21
 8002a18:	4252      	negs	r2, r2
 8002a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f000 f8b0 	bl	8002b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a24:	46c0      	nop			@ (mov r8, r8)
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b004      	add	sp, #16
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a34:	46c0      	nop			@ (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a44:	46c0      	nop			@ (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b002      	add	sp, #8
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a54:	46c0      	nop			@ (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b002      	add	sp, #8
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a64:	46c0      	nop			@ (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b002      	add	sp, #8
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a74:	46c0      	nop			@ (mov r8, r8)
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b002      	add	sp, #8
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a36      	ldr	r2, [pc, #216]	@ (8002b68 <TIM_Base_SetConfig+0xec>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d003      	beq.n	8002a9c <TIM_Base_SetConfig+0x20>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a35      	ldr	r2, [pc, #212]	@ (8002b6c <TIM_Base_SetConfig+0xf0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d108      	bne.n	8002aae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2270      	movs	r2, #112	@ 0x70
 8002aa0:	4393      	bics	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b68 <TIM_Base_SetConfig+0xec>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d013      	beq.n	8002ade <TIM_Base_SetConfig+0x62>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8002b6c <TIM_Base_SetConfig+0xf0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00f      	beq.n	8002ade <TIM_Base_SetConfig+0x62>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8002b70 <TIM_Base_SetConfig+0xf4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00b      	beq.n	8002ade <TIM_Base_SetConfig+0x62>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a2a      	ldr	r2, [pc, #168]	@ (8002b74 <TIM_Base_SetConfig+0xf8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d007      	beq.n	8002ade <TIM_Base_SetConfig+0x62>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a29      	ldr	r2, [pc, #164]	@ (8002b78 <TIM_Base_SetConfig+0xfc>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d003      	beq.n	8002ade <TIM_Base_SetConfig+0x62>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a28      	ldr	r2, [pc, #160]	@ (8002b7c <TIM_Base_SetConfig+0x100>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d108      	bne.n	8002af0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4a27      	ldr	r2, [pc, #156]	@ (8002b80 <TIM_Base_SetConfig+0x104>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2280      	movs	r2, #128	@ 0x80
 8002af4:	4393      	bics	r3, r2
 8002af6:	001a      	movs	r2, r3
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a13      	ldr	r2, [pc, #76]	@ (8002b68 <TIM_Base_SetConfig+0xec>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00b      	beq.n	8002b36 <TIM_Base_SetConfig+0xba>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a14      	ldr	r2, [pc, #80]	@ (8002b74 <TIM_Base_SetConfig+0xf8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <TIM_Base_SetConfig+0xba>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a13      	ldr	r2, [pc, #76]	@ (8002b78 <TIM_Base_SetConfig+0xfc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d003      	beq.n	8002b36 <TIM_Base_SetConfig+0xba>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a12      	ldr	r2, [pc, #72]	@ (8002b7c <TIM_Base_SetConfig+0x100>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d103      	bne.n	8002b3e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d106      	bne.n	8002b5e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	2201      	movs	r2, #1
 8002b56:	4393      	bics	r3, r2
 8002b58:	001a      	movs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	611a      	str	r2, [r3, #16]
  }
}
 8002b5e:	46c0      	nop			@ (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b004      	add	sp, #16
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			@ (mov r8, r8)
 8002b68:	40012c00 	.word	0x40012c00
 8002b6c:	40000400 	.word	0x40000400
 8002b70:	40002000 	.word	0x40002000
 8002b74:	40014000 	.word	0x40014000
 8002b78:	40014400 	.word	0x40014400
 8002b7c:	40014800 	.word	0x40014800
 8002b80:	fffffcff 	.word	0xfffffcff

08002b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b8c:	46c0      	nop			@ (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b002      	add	sp, #8
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b9c:	46c0      	nop			@ (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e044      	b.n	8002c40 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d107      	bne.n	8002bce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2278      	movs	r2, #120	@ 0x78
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7fe fa31 	bl	8001030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2224      	movs	r2, #36	@ 0x24
 8002bd2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2101      	movs	r1, #1
 8002be0:	438a      	bics	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 fa0c 	bl	800300c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f000 f8c8 	bl	8002d8c <UART_SetConfig>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e01c      	b.n	8002c40 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	490d      	ldr	r1, [pc, #52]	@ (8002c48 <HAL_UART_Init+0xa4>)
 8002c12:	400a      	ands	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2108      	movs	r1, #8
 8002c22:	438a      	bics	r2, r1
 8002c24:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2101      	movs	r1, #1
 8002c32:	430a      	orrs	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f000 fa9b 	bl	8003174 <UART_CheckIdleState>
 8002c3e:	0003      	movs	r3, r0
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b002      	add	sp, #8
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	fffff7ff 	.word	0xfffff7ff

08002c4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	@ 0x28
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	1dbb      	adds	r3, r7, #6
 8002c5a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d000      	beq.n	8002c66 <HAL_UART_Transmit+0x1a>
 8002c64:	e08c      	b.n	8002d80 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_UART_Transmit+0x28>
 8002c6c:	1dbb      	adds	r3, r7, #6
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e084      	b.n	8002d82 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	015b      	lsls	r3, r3, #5
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d109      	bne.n	8002c98 <HAL_UART_Transmit+0x4c>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d105      	bne.n	8002c98 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	4013      	ands	r3, r2
 8002c92:	d001      	beq.n	8002c98 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e074      	b.n	8002d82 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2284      	movs	r2, #132	@ 0x84
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2221      	movs	r2, #33	@ 0x21
 8002ca4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ca6:	f7fe fb6b 	bl	8001380 <HAL_GetTick>
 8002caa:	0003      	movs	r3, r0
 8002cac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1dba      	adds	r2, r7, #6
 8002cb2:	2150      	movs	r1, #80	@ 0x50
 8002cb4:	8812      	ldrh	r2, [r2, #0]
 8002cb6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	1dba      	adds	r2, r7, #6
 8002cbc:	2152      	movs	r1, #82	@ 0x52
 8002cbe:	8812      	ldrh	r2, [r2, #0]
 8002cc0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	2380      	movs	r3, #128	@ 0x80
 8002cc8:	015b      	lsls	r3, r3, #5
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d108      	bne.n	8002ce0 <HAL_UART_Transmit+0x94>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d104      	bne.n	8002ce0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	61bb      	str	r3, [r7, #24]
 8002cde:	e003      	b.n	8002ce8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	0013      	movs	r3, r2
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2180      	movs	r1, #128	@ 0x80
 8002cf8:	f000 fae4 	bl	80032c4 <UART_WaitOnFlagUntilTimeout>
 8002cfc:	1e03      	subs	r3, r0, #0
 8002cfe:	d004      	beq.n	8002d0a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2220      	movs	r2, #32
 8002d04:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e03b      	b.n	8002d82 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10b      	bne.n	8002d28 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	881a      	ldrh	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	05d2      	lsls	r2, r2, #23
 8002d1a:	0dd2      	lsrs	r2, r2, #23
 8002d1c:	b292      	uxth	r2, r2
 8002d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	3302      	adds	r3, #2
 8002d24:	61bb      	str	r3, [r7, #24]
 8002d26:	e007      	b.n	8002d38 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3301      	adds	r3, #1
 8002d36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2252      	movs	r2, #82	@ 0x52
 8002d3c:	5a9b      	ldrh	r3, [r3, r2]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b299      	uxth	r1, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2252      	movs	r2, #82	@ 0x52
 8002d48:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2252      	movs	r2, #82	@ 0x52
 8002d4e:	5a9b      	ldrh	r3, [r3, r2]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1c9      	bne.n	8002cea <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	0013      	movs	r3, r2
 8002d60:	2200      	movs	r2, #0
 8002d62:	2140      	movs	r1, #64	@ 0x40
 8002d64:	f000 faae 	bl	80032c4 <UART_WaitOnFlagUntilTimeout>
 8002d68:	1e03      	subs	r3, r0, #0
 8002d6a:	d004      	beq.n	8002d76 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e005      	b.n	8002d82 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	0018      	movs	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b008      	add	sp, #32
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d94:	231e      	movs	r3, #30
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a8d      	ldr	r2, [pc, #564]	@ (8002ff0 <UART_SetConfig+0x264>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4a88      	ldr	r2, [pc, #544]	@ (8002ff4 <UART_SetConfig+0x268>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a7f      	ldr	r2, [pc, #508]	@ (8002ff8 <UART_SetConfig+0x26c>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a7b      	ldr	r2, [pc, #492]	@ (8002ffc <UART_SetConfig+0x270>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d127      	bne.n	8002e62 <UART_SetConfig+0xd6>
 8002e12:	4b7b      	ldr	r3, [pc, #492]	@ (8003000 <UART_SetConfig+0x274>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	2203      	movs	r2, #3
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d00d      	beq.n	8002e3a <UART_SetConfig+0xae>
 8002e1e:	d81b      	bhi.n	8002e58 <UART_SetConfig+0xcc>
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d014      	beq.n	8002e4e <UART_SetConfig+0xc2>
 8002e24:	d818      	bhi.n	8002e58 <UART_SetConfig+0xcc>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <UART_SetConfig+0xa4>
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d00a      	beq.n	8002e44 <UART_SetConfig+0xb8>
 8002e2e:	e013      	b.n	8002e58 <UART_SetConfig+0xcc>
 8002e30:	231f      	movs	r3, #31
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
 8002e38:	e021      	b.n	8002e7e <UART_SetConfig+0xf2>
 8002e3a:	231f      	movs	r3, #31
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	2202      	movs	r2, #2
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	e01c      	b.n	8002e7e <UART_SetConfig+0xf2>
 8002e44:	231f      	movs	r3, #31
 8002e46:	18fb      	adds	r3, r7, r3
 8002e48:	2204      	movs	r2, #4
 8002e4a:	701a      	strb	r2, [r3, #0]
 8002e4c:	e017      	b.n	8002e7e <UART_SetConfig+0xf2>
 8002e4e:	231f      	movs	r3, #31
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	2208      	movs	r2, #8
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e012      	b.n	8002e7e <UART_SetConfig+0xf2>
 8002e58:	231f      	movs	r3, #31
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	2210      	movs	r2, #16
 8002e5e:	701a      	strb	r2, [r3, #0]
 8002e60:	e00d      	b.n	8002e7e <UART_SetConfig+0xf2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a67      	ldr	r2, [pc, #412]	@ (8003004 <UART_SetConfig+0x278>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d104      	bne.n	8002e76 <UART_SetConfig+0xea>
 8002e6c:	231f      	movs	r3, #31
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
 8002e74:	e003      	b.n	8002e7e <UART_SetConfig+0xf2>
 8002e76:	231f      	movs	r3, #31
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	2210      	movs	r2, #16
 8002e7c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	2380      	movs	r3, #128	@ 0x80
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d15c      	bne.n	8002f44 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002e8a:	231f      	movs	r3, #31
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d015      	beq.n	8002ec0 <UART_SetConfig+0x134>
 8002e94:	dc18      	bgt.n	8002ec8 <UART_SetConfig+0x13c>
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d00d      	beq.n	8002eb6 <UART_SetConfig+0x12a>
 8002e9a:	dc15      	bgt.n	8002ec8 <UART_SetConfig+0x13c>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <UART_SetConfig+0x11a>
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d005      	beq.n	8002eb0 <UART_SetConfig+0x124>
 8002ea4:	e010      	b.n	8002ec8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea6:	f7ff fb9f 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 8002eaa:	0003      	movs	r3, r0
 8002eac:	61bb      	str	r3, [r7, #24]
        break;
 8002eae:	e012      	b.n	8002ed6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eb0:	4b55      	ldr	r3, [pc, #340]	@ (8003008 <UART_SetConfig+0x27c>)
 8002eb2:	61bb      	str	r3, [r7, #24]
        break;
 8002eb4:	e00f      	b.n	8002ed6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eb6:	f7ff fb37 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	61bb      	str	r3, [r7, #24]
        break;
 8002ebe:	e00a      	b.n	8002ed6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ec0:	2380      	movs	r3, #128	@ 0x80
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	61bb      	str	r3, [r7, #24]
        break;
 8002ec6:	e006      	b.n	8002ed6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ecc:	231e      	movs	r3, #30
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
        break;
 8002ed4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d100      	bne.n	8002ede <UART_SetConfig+0x152>
 8002edc:	e07a      	b.n	8002fd4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	005a      	lsls	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	18d2      	adds	r2, r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	0019      	movs	r1, r3
 8002ef0:	0010      	movs	r0, r2
 8002ef2:	f7fd f913 	bl	800011c <__udivsi3>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b0f      	cmp	r3, #15
 8002efe:	d91c      	bls.n	8002f3a <UART_SetConfig+0x1ae>
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	2380      	movs	r3, #128	@ 0x80
 8002f04:	025b      	lsls	r3, r3, #9
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d217      	bcs.n	8002f3a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	200e      	movs	r0, #14
 8002f10:	183b      	adds	r3, r7, r0
 8002f12:	210f      	movs	r1, #15
 8002f14:	438a      	bics	r2, r1
 8002f16:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2207      	movs	r2, #7
 8002f20:	4013      	ands	r3, r2
 8002f22:	b299      	uxth	r1, r3
 8002f24:	183b      	adds	r3, r7, r0
 8002f26:	183a      	adds	r2, r7, r0
 8002f28:	8812      	ldrh	r2, [r2, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	183a      	adds	r2, r7, r0
 8002f34:	8812      	ldrh	r2, [r2, #0]
 8002f36:	60da      	str	r2, [r3, #12]
 8002f38:	e04c      	b.n	8002fd4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002f3a:	231e      	movs	r3, #30
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	e047      	b.n	8002fd4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f44:	231f      	movs	r3, #31
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d015      	beq.n	8002f7a <UART_SetConfig+0x1ee>
 8002f4e:	dc18      	bgt.n	8002f82 <UART_SetConfig+0x1f6>
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d00d      	beq.n	8002f70 <UART_SetConfig+0x1e4>
 8002f54:	dc15      	bgt.n	8002f82 <UART_SetConfig+0x1f6>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1d4>
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d005      	beq.n	8002f6a <UART_SetConfig+0x1de>
 8002f5e:	e010      	b.n	8002f82 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f60:	f7ff fb42 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 8002f64:	0003      	movs	r3, r0
 8002f66:	61bb      	str	r3, [r7, #24]
        break;
 8002f68:	e012      	b.n	8002f90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f6a:	4b27      	ldr	r3, [pc, #156]	@ (8003008 <UART_SetConfig+0x27c>)
 8002f6c:	61bb      	str	r3, [r7, #24]
        break;
 8002f6e:	e00f      	b.n	8002f90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f70:	f7ff fada 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8002f74:	0003      	movs	r3, r0
 8002f76:	61bb      	str	r3, [r7, #24]
        break;
 8002f78:	e00a      	b.n	8002f90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f7a:	2380      	movs	r3, #128	@ 0x80
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	61bb      	str	r3, [r7, #24]
        break;
 8002f80:	e006      	b.n	8002f90 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f86:	231e      	movs	r3, #30
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
        break;
 8002f8e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d01e      	beq.n	8002fd4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	085a      	lsrs	r2, r3, #1
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	18d2      	adds	r2, r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	0010      	movs	r0, r2
 8002fa8:	f7fd f8b8 	bl	800011c <__udivsi3>
 8002fac:	0003      	movs	r3, r0
 8002fae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	2b0f      	cmp	r3, #15
 8002fb4:	d90a      	bls.n	8002fcc <UART_SetConfig+0x240>
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	2380      	movs	r3, #128	@ 0x80
 8002fba:	025b      	lsls	r3, r3, #9
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d205      	bcs.n	8002fcc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	e003      	b.n	8002fd4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002fcc:	231e      	movs	r3, #30
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002fe0:	231e      	movs	r3, #30
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	781b      	ldrb	r3, [r3, #0]
}
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b008      	add	sp, #32
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			@ (mov r8, r8)
 8002ff0:	ffff69f3 	.word	0xffff69f3
 8002ff4:	ffffcfff 	.word	0xffffcfff
 8002ff8:	fffff4ff 	.word	0xfffff4ff
 8002ffc:	40013800 	.word	0x40013800
 8003000:	40021000 	.word	0x40021000
 8003004:	40004400 	.word	0x40004400
 8003008:	007a1200 	.word	0x007a1200

0800300c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	2208      	movs	r2, #8
 800301a:	4013      	ands	r3, r2
 800301c:	d00b      	beq.n	8003036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4a4a      	ldr	r2, [pc, #296]	@ (8003150 <UART_AdvFeatureConfig+0x144>)
 8003026:	4013      	ands	r3, r2
 8003028:	0019      	movs	r1, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303a:	2201      	movs	r2, #1
 800303c:	4013      	ands	r3, r2
 800303e:	d00b      	beq.n	8003058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4a43      	ldr	r2, [pc, #268]	@ (8003154 <UART_AdvFeatureConfig+0x148>)
 8003048:	4013      	ands	r3, r2
 800304a:	0019      	movs	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	2202      	movs	r2, #2
 800305e:	4013      	ands	r3, r2
 8003060:	d00b      	beq.n	800307a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4a3b      	ldr	r2, [pc, #236]	@ (8003158 <UART_AdvFeatureConfig+0x14c>)
 800306a:	4013      	ands	r3, r2
 800306c:	0019      	movs	r1, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	2204      	movs	r2, #4
 8003080:	4013      	ands	r3, r2
 8003082:	d00b      	beq.n	800309c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a34      	ldr	r2, [pc, #208]	@ (800315c <UART_AdvFeatureConfig+0x150>)
 800308c:	4013      	ands	r3, r2
 800308e:	0019      	movs	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	2210      	movs	r2, #16
 80030a2:	4013      	ands	r3, r2
 80030a4:	d00b      	beq.n	80030be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003160 <UART_AdvFeatureConfig+0x154>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	0019      	movs	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	2220      	movs	r2, #32
 80030c4:	4013      	ands	r3, r2
 80030c6:	d00b      	beq.n	80030e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4a25      	ldr	r2, [pc, #148]	@ (8003164 <UART_AdvFeatureConfig+0x158>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	2240      	movs	r2, #64	@ 0x40
 80030e6:	4013      	ands	r3, r2
 80030e8:	d01d      	beq.n	8003126 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003168 <UART_AdvFeatureConfig+0x15c>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	0019      	movs	r1, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003106:	2380      	movs	r3, #128	@ 0x80
 8003108:	035b      	lsls	r3, r3, #13
 800310a:	429a      	cmp	r2, r3
 800310c:	d10b      	bne.n	8003126 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a15      	ldr	r2, [pc, #84]	@ (800316c <UART_AdvFeatureConfig+0x160>)
 8003116:	4013      	ands	r3, r2
 8003118:	0019      	movs	r1, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	2280      	movs	r2, #128	@ 0x80
 800312c:	4013      	ands	r3, r2
 800312e:	d00b      	beq.n	8003148 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4a0e      	ldr	r2, [pc, #56]	@ (8003170 <UART_AdvFeatureConfig+0x164>)
 8003138:	4013      	ands	r3, r2
 800313a:	0019      	movs	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	605a      	str	r2, [r3, #4]
  }
}
 8003148:	46c0      	nop			@ (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b002      	add	sp, #8
 800314e:	bd80      	pop	{r7, pc}
 8003150:	ffff7fff 	.word	0xffff7fff
 8003154:	fffdffff 	.word	0xfffdffff
 8003158:	fffeffff 	.word	0xfffeffff
 800315c:	fffbffff 	.word	0xfffbffff
 8003160:	ffffefff 	.word	0xffffefff
 8003164:	ffffdfff 	.word	0xffffdfff
 8003168:	ffefffff 	.word	0xffefffff
 800316c:	ff9fffff 	.word	0xff9fffff
 8003170:	fff7ffff 	.word	0xfff7ffff

08003174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b092      	sub	sp, #72	@ 0x48
 8003178:	af02      	add	r7, sp, #8
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2284      	movs	r2, #132	@ 0x84
 8003180:	2100      	movs	r1, #0
 8003182:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003184:	f7fe f8fc 	bl	8001380 <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2208      	movs	r2, #8
 8003194:	4013      	ands	r3, r2
 8003196:	2b08      	cmp	r3, #8
 8003198:	d12c      	bne.n	80031f4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800319a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800319c:	2280      	movs	r2, #128	@ 0x80
 800319e:	0391      	lsls	r1, r2, #14
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	4a46      	ldr	r2, [pc, #280]	@ (80032bc <UART_CheckIdleState+0x148>)
 80031a4:	9200      	str	r2, [sp, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f000 f88c 	bl	80032c4 <UART_WaitOnFlagUntilTimeout>
 80031ac:	1e03      	subs	r3, r0, #0
 80031ae:	d021      	beq.n	80031f4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b0:	f3ef 8310 	mrs	r3, PRIMASK
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031ba:	2301      	movs	r3, #1
 80031bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c0:	f383 8810 	msr	PRIMASK, r3
}
 80031c4:	46c0      	nop			@ (mov r8, r8)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2180      	movs	r1, #128	@ 0x80
 80031d2:	438a      	bics	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031dc:	f383 8810 	msr	PRIMASK, r3
}
 80031e0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2278      	movs	r2, #120	@ 0x78
 80031ec:	2100      	movs	r1, #0
 80031ee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e05f      	b.n	80032b4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2204      	movs	r2, #4
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d146      	bne.n	8003290 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003204:	2280      	movs	r2, #128	@ 0x80
 8003206:	03d1      	lsls	r1, r2, #15
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	4a2c      	ldr	r2, [pc, #176]	@ (80032bc <UART_CheckIdleState+0x148>)
 800320c:	9200      	str	r2, [sp, #0]
 800320e:	2200      	movs	r2, #0
 8003210:	f000 f858 	bl	80032c4 <UART_WaitOnFlagUntilTimeout>
 8003214:	1e03      	subs	r3, r0, #0
 8003216:	d03b      	beq.n	8003290 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003218:	f3ef 8310 	mrs	r3, PRIMASK
 800321c:	60fb      	str	r3, [r7, #12]
  return(result);
 800321e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003220:	637b      	str	r3, [r7, #52]	@ 0x34
 8003222:	2301      	movs	r3, #1
 8003224:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f383 8810 	msr	PRIMASK, r3
}
 800322c:	46c0      	nop			@ (mov r8, r8)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4921      	ldr	r1, [pc, #132]	@ (80032c0 <UART_CheckIdleState+0x14c>)
 800323a:	400a      	ands	r2, r1
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003240:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f383 8810 	msr	PRIMASK, r3
}
 8003248:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324a:	f3ef 8310 	mrs	r3, PRIMASK
 800324e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003250:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003252:	633b      	str	r3, [r7, #48]	@ 0x30
 8003254:	2301      	movs	r3, #1
 8003256:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f383 8810 	msr	PRIMASK, r3
}
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2101      	movs	r1, #1
 800326c:	438a      	bics	r2, r1
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003272:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	f383 8810 	msr	PRIMASK, r3
}
 800327a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2280      	movs	r2, #128	@ 0x80
 8003280:	2120      	movs	r1, #32
 8003282:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2278      	movs	r2, #120	@ 0x78
 8003288:	2100      	movs	r1, #0
 800328a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e011      	b.n	80032b4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2280      	movs	r2, #128	@ 0x80
 800329a:	2120      	movs	r1, #32
 800329c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2278      	movs	r2, #120	@ 0x78
 80032ae:	2100      	movs	r1, #0
 80032b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	0018      	movs	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b010      	add	sp, #64	@ 0x40
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	01ffffff 	.word	0x01ffffff
 80032c0:	fffffedf 	.word	0xfffffedf

080032c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	1dfb      	adds	r3, r7, #7
 80032d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d4:	e051      	b.n	800337a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	3301      	adds	r3, #1
 80032da:	d04e      	beq.n	800337a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032dc:	f7fe f850 	bl	8001380 <HAL_GetTick>
 80032e0:	0002      	movs	r2, r0
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d302      	bcc.n	80032f2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e051      	b.n	800339a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2204      	movs	r2, #4
 80032fe:	4013      	ands	r3, r2
 8003300:	d03b      	beq.n	800337a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b80      	cmp	r3, #128	@ 0x80
 8003306:	d038      	beq.n	800337a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b40      	cmp	r3, #64	@ 0x40
 800330c:	d035      	beq.n	800337a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	2208      	movs	r2, #8
 8003316:	4013      	ands	r3, r2
 8003318:	2b08      	cmp	r3, #8
 800331a:	d111      	bne.n	8003340 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2208      	movs	r2, #8
 8003322:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	0018      	movs	r0, r3
 8003328:	f000 f83c 	bl	80033a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2284      	movs	r2, #132	@ 0x84
 8003330:	2108      	movs	r1, #8
 8003332:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2278      	movs	r2, #120	@ 0x78
 8003338:	2100      	movs	r1, #0
 800333a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e02c      	b.n	800339a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	2380      	movs	r3, #128	@ 0x80
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	401a      	ands	r2, r3
 800334c:	2380      	movs	r3, #128	@ 0x80
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	429a      	cmp	r2, r3
 8003352:	d112      	bne.n	800337a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2280      	movs	r2, #128	@ 0x80
 800335a:	0112      	lsls	r2, r2, #4
 800335c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	0018      	movs	r0, r3
 8003362:	f000 f81f 	bl	80033a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2284      	movs	r2, #132	@ 0x84
 800336a:	2120      	movs	r1, #32
 800336c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2278      	movs	r2, #120	@ 0x78
 8003372:	2100      	movs	r1, #0
 8003374:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e00f      	b.n	800339a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	4013      	ands	r3, r2
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	425a      	negs	r2, r3
 800338a:	4153      	adcs	r3, r2
 800338c:	b2db      	uxtb	r3, r3
 800338e:	001a      	movs	r2, r3
 8003390:	1dfb      	adds	r3, r7, #7
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d09e      	beq.n	80032d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	0018      	movs	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	b004      	add	sp, #16
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08e      	sub	sp, #56	@ 0x38
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ac:	f3ef 8310 	mrs	r3, PRIMASK
 80033b0:	617b      	str	r3, [r7, #20]
  return(result);
 80033b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80033b6:	2301      	movs	r3, #1
 80033b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f383 8810 	msr	PRIMASK, r3
}
 80033c0:	46c0      	nop			@ (mov r8, r8)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4926      	ldr	r1, [pc, #152]	@ (8003468 <UART_EndRxTransfer+0xc4>)
 80033ce:	400a      	ands	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f383 8810 	msr	PRIMASK, r3
}
 80033dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033de:	f3ef 8310 	mrs	r3, PRIMASK
 80033e2:	623b      	str	r3, [r7, #32]
  return(result);
 80033e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80033e8:	2301      	movs	r3, #1
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ee:	f383 8810 	msr	PRIMASK, r3
}
 80033f2:	46c0      	nop			@ (mov r8, r8)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2101      	movs	r1, #1
 8003400:	438a      	bics	r2, r1
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003406:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340a:	f383 8810 	msr	PRIMASK, r3
}
 800340e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003414:	2b01      	cmp	r3, #1
 8003416:	d118      	bne.n	800344a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003418:	f3ef 8310 	mrs	r3, PRIMASK
 800341c:	60bb      	str	r3, [r7, #8]
  return(result);
 800341e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003422:	2301      	movs	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f383 8810 	msr	PRIMASK, r3
}
 800342c:	46c0      	nop			@ (mov r8, r8)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2110      	movs	r1, #16
 800343a:	438a      	bics	r2, r1
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003440:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f383 8810 	msr	PRIMASK, r3
}
 8003448:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2280      	movs	r2, #128	@ 0x80
 800344e:	2120      	movs	r1, #32
 8003450:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	b00e      	add	sp, #56	@ 0x38
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			@ (mov r8, r8)
 8003468:	fffffedf 	.word	0xfffffedf

0800346c <std>:
 800346c:	2300      	movs	r3, #0
 800346e:	b510      	push	{r4, lr}
 8003470:	0004      	movs	r4, r0
 8003472:	6003      	str	r3, [r0, #0]
 8003474:	6043      	str	r3, [r0, #4]
 8003476:	6083      	str	r3, [r0, #8]
 8003478:	8181      	strh	r1, [r0, #12]
 800347a:	6643      	str	r3, [r0, #100]	@ 0x64
 800347c:	81c2      	strh	r2, [r0, #14]
 800347e:	6103      	str	r3, [r0, #16]
 8003480:	6143      	str	r3, [r0, #20]
 8003482:	6183      	str	r3, [r0, #24]
 8003484:	0019      	movs	r1, r3
 8003486:	2208      	movs	r2, #8
 8003488:	305c      	adds	r0, #92	@ 0x5c
 800348a:	f000 f90f 	bl	80036ac <memset>
 800348e:	4b0b      	ldr	r3, [pc, #44]	@ (80034bc <std+0x50>)
 8003490:	6224      	str	r4, [r4, #32]
 8003492:	6263      	str	r3, [r4, #36]	@ 0x24
 8003494:	4b0a      	ldr	r3, [pc, #40]	@ (80034c0 <std+0x54>)
 8003496:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003498:	4b0a      	ldr	r3, [pc, #40]	@ (80034c4 <std+0x58>)
 800349a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800349c:	4b0a      	ldr	r3, [pc, #40]	@ (80034c8 <std+0x5c>)
 800349e:	6323      	str	r3, [r4, #48]	@ 0x30
 80034a0:	4b0a      	ldr	r3, [pc, #40]	@ (80034cc <std+0x60>)
 80034a2:	429c      	cmp	r4, r3
 80034a4:	d005      	beq.n	80034b2 <std+0x46>
 80034a6:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <std+0x64>)
 80034a8:	429c      	cmp	r4, r3
 80034aa:	d002      	beq.n	80034b2 <std+0x46>
 80034ac:	4b09      	ldr	r3, [pc, #36]	@ (80034d4 <std+0x68>)
 80034ae:	429c      	cmp	r4, r3
 80034b0:	d103      	bne.n	80034ba <std+0x4e>
 80034b2:	0020      	movs	r0, r4
 80034b4:	3058      	adds	r0, #88	@ 0x58
 80034b6:	f000 f979 	bl	80037ac <__retarget_lock_init_recursive>
 80034ba:	bd10      	pop	{r4, pc}
 80034bc:	08003615 	.word	0x08003615
 80034c0:	0800363d 	.word	0x0800363d
 80034c4:	08003675 	.word	0x08003675
 80034c8:	080036a1 	.word	0x080036a1
 80034cc:	200001d4 	.word	0x200001d4
 80034d0:	2000023c 	.word	0x2000023c
 80034d4:	200002a4 	.word	0x200002a4

080034d8 <stdio_exit_handler>:
 80034d8:	b510      	push	{r4, lr}
 80034da:	4a03      	ldr	r2, [pc, #12]	@ (80034e8 <stdio_exit_handler+0x10>)
 80034dc:	4903      	ldr	r1, [pc, #12]	@ (80034ec <stdio_exit_handler+0x14>)
 80034de:	4804      	ldr	r0, [pc, #16]	@ (80034f0 <stdio_exit_handler+0x18>)
 80034e0:	f000 f86c 	bl	80035bc <_fwalk_sglue>
 80034e4:	bd10      	pop	{r4, pc}
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	20000024 	.word	0x20000024
 80034ec:	0800403d 	.word	0x0800403d
 80034f0:	20000034 	.word	0x20000034

080034f4 <cleanup_stdio>:
 80034f4:	6841      	ldr	r1, [r0, #4]
 80034f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <cleanup_stdio+0x30>)
 80034f8:	b510      	push	{r4, lr}
 80034fa:	0004      	movs	r4, r0
 80034fc:	4299      	cmp	r1, r3
 80034fe:	d001      	beq.n	8003504 <cleanup_stdio+0x10>
 8003500:	f000 fd9c 	bl	800403c <_fflush_r>
 8003504:	68a1      	ldr	r1, [r4, #8]
 8003506:	4b08      	ldr	r3, [pc, #32]	@ (8003528 <cleanup_stdio+0x34>)
 8003508:	4299      	cmp	r1, r3
 800350a:	d002      	beq.n	8003512 <cleanup_stdio+0x1e>
 800350c:	0020      	movs	r0, r4
 800350e:	f000 fd95 	bl	800403c <_fflush_r>
 8003512:	68e1      	ldr	r1, [r4, #12]
 8003514:	4b05      	ldr	r3, [pc, #20]	@ (800352c <cleanup_stdio+0x38>)
 8003516:	4299      	cmp	r1, r3
 8003518:	d002      	beq.n	8003520 <cleanup_stdio+0x2c>
 800351a:	0020      	movs	r0, r4
 800351c:	f000 fd8e 	bl	800403c <_fflush_r>
 8003520:	bd10      	pop	{r4, pc}
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	200001d4 	.word	0x200001d4
 8003528:	2000023c 	.word	0x2000023c
 800352c:	200002a4 	.word	0x200002a4

08003530 <global_stdio_init.part.0>:
 8003530:	b510      	push	{r4, lr}
 8003532:	4b09      	ldr	r3, [pc, #36]	@ (8003558 <global_stdio_init.part.0+0x28>)
 8003534:	4a09      	ldr	r2, [pc, #36]	@ (800355c <global_stdio_init.part.0+0x2c>)
 8003536:	2104      	movs	r1, #4
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	4809      	ldr	r0, [pc, #36]	@ (8003560 <global_stdio_init.part.0+0x30>)
 800353c:	2200      	movs	r2, #0
 800353e:	f7ff ff95 	bl	800346c <std>
 8003542:	2201      	movs	r2, #1
 8003544:	2109      	movs	r1, #9
 8003546:	4807      	ldr	r0, [pc, #28]	@ (8003564 <global_stdio_init.part.0+0x34>)
 8003548:	f7ff ff90 	bl	800346c <std>
 800354c:	2202      	movs	r2, #2
 800354e:	2112      	movs	r1, #18
 8003550:	4805      	ldr	r0, [pc, #20]	@ (8003568 <global_stdio_init.part.0+0x38>)
 8003552:	f7ff ff8b 	bl	800346c <std>
 8003556:	bd10      	pop	{r4, pc}
 8003558:	2000030c 	.word	0x2000030c
 800355c:	080034d9 	.word	0x080034d9
 8003560:	200001d4 	.word	0x200001d4
 8003564:	2000023c 	.word	0x2000023c
 8003568:	200002a4 	.word	0x200002a4

0800356c <__sfp_lock_acquire>:
 800356c:	b510      	push	{r4, lr}
 800356e:	4802      	ldr	r0, [pc, #8]	@ (8003578 <__sfp_lock_acquire+0xc>)
 8003570:	f000 f91d 	bl	80037ae <__retarget_lock_acquire_recursive>
 8003574:	bd10      	pop	{r4, pc}
 8003576:	46c0      	nop			@ (mov r8, r8)
 8003578:	20000315 	.word	0x20000315

0800357c <__sfp_lock_release>:
 800357c:	b510      	push	{r4, lr}
 800357e:	4802      	ldr	r0, [pc, #8]	@ (8003588 <__sfp_lock_release+0xc>)
 8003580:	f000 f916 	bl	80037b0 <__retarget_lock_release_recursive>
 8003584:	bd10      	pop	{r4, pc}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	20000315 	.word	0x20000315

0800358c <__sinit>:
 800358c:	b510      	push	{r4, lr}
 800358e:	0004      	movs	r4, r0
 8003590:	f7ff ffec 	bl	800356c <__sfp_lock_acquire>
 8003594:	6a23      	ldr	r3, [r4, #32]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <__sinit+0x14>
 800359a:	f7ff ffef 	bl	800357c <__sfp_lock_release>
 800359e:	bd10      	pop	{r4, pc}
 80035a0:	4b04      	ldr	r3, [pc, #16]	@ (80035b4 <__sinit+0x28>)
 80035a2:	6223      	str	r3, [r4, #32]
 80035a4:	4b04      	ldr	r3, [pc, #16]	@ (80035b8 <__sinit+0x2c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f6      	bne.n	800359a <__sinit+0xe>
 80035ac:	f7ff ffc0 	bl	8003530 <global_stdio_init.part.0>
 80035b0:	e7f3      	b.n	800359a <__sinit+0xe>
 80035b2:	46c0      	nop			@ (mov r8, r8)
 80035b4:	080034f5 	.word	0x080034f5
 80035b8:	2000030c 	.word	0x2000030c

080035bc <_fwalk_sglue>:
 80035bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035be:	0014      	movs	r4, r2
 80035c0:	2600      	movs	r6, #0
 80035c2:	9000      	str	r0, [sp, #0]
 80035c4:	9101      	str	r1, [sp, #4]
 80035c6:	68a5      	ldr	r5, [r4, #8]
 80035c8:	6867      	ldr	r7, [r4, #4]
 80035ca:	3f01      	subs	r7, #1
 80035cc:	d504      	bpl.n	80035d8 <_fwalk_sglue+0x1c>
 80035ce:	6824      	ldr	r4, [r4, #0]
 80035d0:	2c00      	cmp	r4, #0
 80035d2:	d1f8      	bne.n	80035c6 <_fwalk_sglue+0xa>
 80035d4:	0030      	movs	r0, r6
 80035d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035d8:	89ab      	ldrh	r3, [r5, #12]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d908      	bls.n	80035f0 <_fwalk_sglue+0x34>
 80035de:	220e      	movs	r2, #14
 80035e0:	5eab      	ldrsh	r3, [r5, r2]
 80035e2:	3301      	adds	r3, #1
 80035e4:	d004      	beq.n	80035f0 <_fwalk_sglue+0x34>
 80035e6:	0029      	movs	r1, r5
 80035e8:	9800      	ldr	r0, [sp, #0]
 80035ea:	9b01      	ldr	r3, [sp, #4]
 80035ec:	4798      	blx	r3
 80035ee:	4306      	orrs	r6, r0
 80035f0:	3568      	adds	r5, #104	@ 0x68
 80035f2:	e7ea      	b.n	80035ca <_fwalk_sglue+0xe>

080035f4 <iprintf>:
 80035f4:	b40f      	push	{r0, r1, r2, r3}
 80035f6:	b507      	push	{r0, r1, r2, lr}
 80035f8:	4905      	ldr	r1, [pc, #20]	@ (8003610 <iprintf+0x1c>)
 80035fa:	ab04      	add	r3, sp, #16
 80035fc:	6808      	ldr	r0, [r1, #0]
 80035fe:	cb04      	ldmia	r3!, {r2}
 8003600:	6881      	ldr	r1, [r0, #8]
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	f000 f9fa 	bl	80039fc <_vfiprintf_r>
 8003608:	b003      	add	sp, #12
 800360a:	bc08      	pop	{r3}
 800360c:	b004      	add	sp, #16
 800360e:	4718      	bx	r3
 8003610:	20000030 	.word	0x20000030

08003614 <__sread>:
 8003614:	b570      	push	{r4, r5, r6, lr}
 8003616:	000c      	movs	r4, r1
 8003618:	250e      	movs	r5, #14
 800361a:	5f49      	ldrsh	r1, [r1, r5]
 800361c:	f000 f874 	bl	8003708 <_read_r>
 8003620:	2800      	cmp	r0, #0
 8003622:	db03      	blt.n	800362c <__sread+0x18>
 8003624:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003626:	181b      	adds	r3, r3, r0
 8003628:	6563      	str	r3, [r4, #84]	@ 0x54
 800362a:	bd70      	pop	{r4, r5, r6, pc}
 800362c:	89a3      	ldrh	r3, [r4, #12]
 800362e:	4a02      	ldr	r2, [pc, #8]	@ (8003638 <__sread+0x24>)
 8003630:	4013      	ands	r3, r2
 8003632:	81a3      	strh	r3, [r4, #12]
 8003634:	e7f9      	b.n	800362a <__sread+0x16>
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	ffffefff 	.word	0xffffefff

0800363c <__swrite>:
 800363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363e:	001f      	movs	r7, r3
 8003640:	898b      	ldrh	r3, [r1, #12]
 8003642:	0005      	movs	r5, r0
 8003644:	000c      	movs	r4, r1
 8003646:	0016      	movs	r6, r2
 8003648:	05db      	lsls	r3, r3, #23
 800364a:	d505      	bpl.n	8003658 <__swrite+0x1c>
 800364c:	230e      	movs	r3, #14
 800364e:	5ec9      	ldrsh	r1, [r1, r3]
 8003650:	2200      	movs	r2, #0
 8003652:	2302      	movs	r3, #2
 8003654:	f000 f844 	bl	80036e0 <_lseek_r>
 8003658:	89a3      	ldrh	r3, [r4, #12]
 800365a:	4a05      	ldr	r2, [pc, #20]	@ (8003670 <__swrite+0x34>)
 800365c:	0028      	movs	r0, r5
 800365e:	4013      	ands	r3, r2
 8003660:	81a3      	strh	r3, [r4, #12]
 8003662:	0032      	movs	r2, r6
 8003664:	230e      	movs	r3, #14
 8003666:	5ee1      	ldrsh	r1, [r4, r3]
 8003668:	003b      	movs	r3, r7
 800366a:	f000 f861 	bl	8003730 <_write_r>
 800366e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003670:	ffffefff 	.word	0xffffefff

08003674 <__sseek>:
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	000c      	movs	r4, r1
 8003678:	250e      	movs	r5, #14
 800367a:	5f49      	ldrsh	r1, [r1, r5]
 800367c:	f000 f830 	bl	80036e0 <_lseek_r>
 8003680:	89a3      	ldrh	r3, [r4, #12]
 8003682:	1c42      	adds	r2, r0, #1
 8003684:	d103      	bne.n	800368e <__sseek+0x1a>
 8003686:	4a05      	ldr	r2, [pc, #20]	@ (800369c <__sseek+0x28>)
 8003688:	4013      	ands	r3, r2
 800368a:	81a3      	strh	r3, [r4, #12]
 800368c:	bd70      	pop	{r4, r5, r6, pc}
 800368e:	2280      	movs	r2, #128	@ 0x80
 8003690:	0152      	lsls	r2, r2, #5
 8003692:	4313      	orrs	r3, r2
 8003694:	81a3      	strh	r3, [r4, #12]
 8003696:	6560      	str	r0, [r4, #84]	@ 0x54
 8003698:	e7f8      	b.n	800368c <__sseek+0x18>
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	ffffefff 	.word	0xffffefff

080036a0 <__sclose>:
 80036a0:	b510      	push	{r4, lr}
 80036a2:	230e      	movs	r3, #14
 80036a4:	5ec9      	ldrsh	r1, [r1, r3]
 80036a6:	f000 f809 	bl	80036bc <_close_r>
 80036aa:	bd10      	pop	{r4, pc}

080036ac <memset>:
 80036ac:	0003      	movs	r3, r0
 80036ae:	1882      	adds	r2, r0, r2
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d100      	bne.n	80036b6 <memset+0xa>
 80036b4:	4770      	bx	lr
 80036b6:	7019      	strb	r1, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	e7f9      	b.n	80036b0 <memset+0x4>

080036bc <_close_r>:
 80036bc:	2300      	movs	r3, #0
 80036be:	b570      	push	{r4, r5, r6, lr}
 80036c0:	4d06      	ldr	r5, [pc, #24]	@ (80036dc <_close_r+0x20>)
 80036c2:	0004      	movs	r4, r0
 80036c4:	0008      	movs	r0, r1
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	f7fd fd6d 	bl	80011a6 <_close>
 80036cc:	1c43      	adds	r3, r0, #1
 80036ce:	d103      	bne.n	80036d8 <_close_r+0x1c>
 80036d0:	682b      	ldr	r3, [r5, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d000      	beq.n	80036d8 <_close_r+0x1c>
 80036d6:	6023      	str	r3, [r4, #0]
 80036d8:	bd70      	pop	{r4, r5, r6, pc}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	20000310 	.word	0x20000310

080036e0 <_lseek_r>:
 80036e0:	b570      	push	{r4, r5, r6, lr}
 80036e2:	0004      	movs	r4, r0
 80036e4:	0008      	movs	r0, r1
 80036e6:	0011      	movs	r1, r2
 80036e8:	001a      	movs	r2, r3
 80036ea:	2300      	movs	r3, #0
 80036ec:	4d05      	ldr	r5, [pc, #20]	@ (8003704 <_lseek_r+0x24>)
 80036ee:	602b      	str	r3, [r5, #0]
 80036f0:	f7fd fd7a 	bl	80011e8 <_lseek>
 80036f4:	1c43      	adds	r3, r0, #1
 80036f6:	d103      	bne.n	8003700 <_lseek_r+0x20>
 80036f8:	682b      	ldr	r3, [r5, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d000      	beq.n	8003700 <_lseek_r+0x20>
 80036fe:	6023      	str	r3, [r4, #0]
 8003700:	bd70      	pop	{r4, r5, r6, pc}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	20000310 	.word	0x20000310

08003708 <_read_r>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	0004      	movs	r4, r0
 800370c:	0008      	movs	r0, r1
 800370e:	0011      	movs	r1, r2
 8003710:	001a      	movs	r2, r3
 8003712:	2300      	movs	r3, #0
 8003714:	4d05      	ldr	r5, [pc, #20]	@ (800372c <_read_r+0x24>)
 8003716:	602b      	str	r3, [r5, #0]
 8003718:	f7fd fd0c 	bl	8001134 <_read>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d103      	bne.n	8003728 <_read_r+0x20>
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d000      	beq.n	8003728 <_read_r+0x20>
 8003726:	6023      	str	r3, [r4, #0]
 8003728:	bd70      	pop	{r4, r5, r6, pc}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	20000310 	.word	0x20000310

08003730 <_write_r>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	0004      	movs	r4, r0
 8003734:	0008      	movs	r0, r1
 8003736:	0011      	movs	r1, r2
 8003738:	001a      	movs	r2, r3
 800373a:	2300      	movs	r3, #0
 800373c:	4d05      	ldr	r5, [pc, #20]	@ (8003754 <_write_r+0x24>)
 800373e:	602b      	str	r3, [r5, #0]
 8003740:	f7fd fd15 	bl	800116e <_write>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	d103      	bne.n	8003750 <_write_r+0x20>
 8003748:	682b      	ldr	r3, [r5, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d000      	beq.n	8003750 <_write_r+0x20>
 800374e:	6023      	str	r3, [r4, #0]
 8003750:	bd70      	pop	{r4, r5, r6, pc}
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	20000310 	.word	0x20000310

08003758 <__errno>:
 8003758:	4b01      	ldr	r3, [pc, #4]	@ (8003760 <__errno+0x8>)
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	4770      	bx	lr
 800375e:	46c0      	nop			@ (mov r8, r8)
 8003760:	20000030 	.word	0x20000030

08003764 <__libc_init_array>:
 8003764:	b570      	push	{r4, r5, r6, lr}
 8003766:	2600      	movs	r6, #0
 8003768:	4c0c      	ldr	r4, [pc, #48]	@ (800379c <__libc_init_array+0x38>)
 800376a:	4d0d      	ldr	r5, [pc, #52]	@ (80037a0 <__libc_init_array+0x3c>)
 800376c:	1b64      	subs	r4, r4, r5
 800376e:	10a4      	asrs	r4, r4, #2
 8003770:	42a6      	cmp	r6, r4
 8003772:	d109      	bne.n	8003788 <__libc_init_array+0x24>
 8003774:	2600      	movs	r6, #0
 8003776:	f000 fddb 	bl	8004330 <_init>
 800377a:	4c0a      	ldr	r4, [pc, #40]	@ (80037a4 <__libc_init_array+0x40>)
 800377c:	4d0a      	ldr	r5, [pc, #40]	@ (80037a8 <__libc_init_array+0x44>)
 800377e:	1b64      	subs	r4, r4, r5
 8003780:	10a4      	asrs	r4, r4, #2
 8003782:	42a6      	cmp	r6, r4
 8003784:	d105      	bne.n	8003792 <__libc_init_array+0x2e>
 8003786:	bd70      	pop	{r4, r5, r6, pc}
 8003788:	00b3      	lsls	r3, r6, #2
 800378a:	58eb      	ldr	r3, [r5, r3]
 800378c:	4798      	blx	r3
 800378e:	3601      	adds	r6, #1
 8003790:	e7ee      	b.n	8003770 <__libc_init_array+0xc>
 8003792:	00b3      	lsls	r3, r6, #2
 8003794:	58eb      	ldr	r3, [r5, r3]
 8003796:	4798      	blx	r3
 8003798:	3601      	adds	r6, #1
 800379a:	e7f2      	b.n	8003782 <__libc_init_array+0x1e>
 800379c:	08004470 	.word	0x08004470
 80037a0:	08004470 	.word	0x08004470
 80037a4:	08004474 	.word	0x08004474
 80037a8:	08004470 	.word	0x08004470

080037ac <__retarget_lock_init_recursive>:
 80037ac:	4770      	bx	lr

080037ae <__retarget_lock_acquire_recursive>:
 80037ae:	4770      	bx	lr

080037b0 <__retarget_lock_release_recursive>:
 80037b0:	4770      	bx	lr
	...

080037b4 <_free_r>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	0005      	movs	r5, r0
 80037b8:	1e0c      	subs	r4, r1, #0
 80037ba:	d010      	beq.n	80037de <_free_r+0x2a>
 80037bc:	3c04      	subs	r4, #4
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	da00      	bge.n	80037c6 <_free_r+0x12>
 80037c4:	18e4      	adds	r4, r4, r3
 80037c6:	0028      	movs	r0, r5
 80037c8:	f000 f8e0 	bl	800398c <__malloc_lock>
 80037cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003844 <_free_r+0x90>)
 80037ce:	6813      	ldr	r3, [r2, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d105      	bne.n	80037e0 <_free_r+0x2c>
 80037d4:	6063      	str	r3, [r4, #4]
 80037d6:	6014      	str	r4, [r2, #0]
 80037d8:	0028      	movs	r0, r5
 80037da:	f000 f8df 	bl	800399c <__malloc_unlock>
 80037de:	bd70      	pop	{r4, r5, r6, pc}
 80037e0:	42a3      	cmp	r3, r4
 80037e2:	d908      	bls.n	80037f6 <_free_r+0x42>
 80037e4:	6820      	ldr	r0, [r4, #0]
 80037e6:	1821      	adds	r1, r4, r0
 80037e8:	428b      	cmp	r3, r1
 80037ea:	d1f3      	bne.n	80037d4 <_free_r+0x20>
 80037ec:	6819      	ldr	r1, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	1809      	adds	r1, r1, r0
 80037f2:	6021      	str	r1, [r4, #0]
 80037f4:	e7ee      	b.n	80037d4 <_free_r+0x20>
 80037f6:	001a      	movs	r2, r3
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <_free_r+0x4e>
 80037fe:	42a3      	cmp	r3, r4
 8003800:	d9f9      	bls.n	80037f6 <_free_r+0x42>
 8003802:	6811      	ldr	r1, [r2, #0]
 8003804:	1850      	adds	r0, r2, r1
 8003806:	42a0      	cmp	r0, r4
 8003808:	d10b      	bne.n	8003822 <_free_r+0x6e>
 800380a:	6820      	ldr	r0, [r4, #0]
 800380c:	1809      	adds	r1, r1, r0
 800380e:	1850      	adds	r0, r2, r1
 8003810:	6011      	str	r1, [r2, #0]
 8003812:	4283      	cmp	r3, r0
 8003814:	d1e0      	bne.n	80037d8 <_free_r+0x24>
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	1841      	adds	r1, r0, r1
 800381c:	6011      	str	r1, [r2, #0]
 800381e:	6053      	str	r3, [r2, #4]
 8003820:	e7da      	b.n	80037d8 <_free_r+0x24>
 8003822:	42a0      	cmp	r0, r4
 8003824:	d902      	bls.n	800382c <_free_r+0x78>
 8003826:	230c      	movs	r3, #12
 8003828:	602b      	str	r3, [r5, #0]
 800382a:	e7d5      	b.n	80037d8 <_free_r+0x24>
 800382c:	6820      	ldr	r0, [r4, #0]
 800382e:	1821      	adds	r1, r4, r0
 8003830:	428b      	cmp	r3, r1
 8003832:	d103      	bne.n	800383c <_free_r+0x88>
 8003834:	6819      	ldr	r1, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	1809      	adds	r1, r1, r0
 800383a:	6021      	str	r1, [r4, #0]
 800383c:	6063      	str	r3, [r4, #4]
 800383e:	6054      	str	r4, [r2, #4]
 8003840:	e7ca      	b.n	80037d8 <_free_r+0x24>
 8003842:	46c0      	nop			@ (mov r8, r8)
 8003844:	2000031c 	.word	0x2000031c

08003848 <sbrk_aligned>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	4e0f      	ldr	r6, [pc, #60]	@ (8003888 <sbrk_aligned+0x40>)
 800384c:	000d      	movs	r5, r1
 800384e:	6831      	ldr	r1, [r6, #0]
 8003850:	0004      	movs	r4, r0
 8003852:	2900      	cmp	r1, #0
 8003854:	d102      	bne.n	800385c <sbrk_aligned+0x14>
 8003856:	f000 fcbd 	bl	80041d4 <_sbrk_r>
 800385a:	6030      	str	r0, [r6, #0]
 800385c:	0029      	movs	r1, r5
 800385e:	0020      	movs	r0, r4
 8003860:	f000 fcb8 	bl	80041d4 <_sbrk_r>
 8003864:	1c43      	adds	r3, r0, #1
 8003866:	d103      	bne.n	8003870 <sbrk_aligned+0x28>
 8003868:	2501      	movs	r5, #1
 800386a:	426d      	negs	r5, r5
 800386c:	0028      	movs	r0, r5
 800386e:	bd70      	pop	{r4, r5, r6, pc}
 8003870:	2303      	movs	r3, #3
 8003872:	1cc5      	adds	r5, r0, #3
 8003874:	439d      	bics	r5, r3
 8003876:	42a8      	cmp	r0, r5
 8003878:	d0f8      	beq.n	800386c <sbrk_aligned+0x24>
 800387a:	1a29      	subs	r1, r5, r0
 800387c:	0020      	movs	r0, r4
 800387e:	f000 fca9 	bl	80041d4 <_sbrk_r>
 8003882:	3001      	adds	r0, #1
 8003884:	d1f2      	bne.n	800386c <sbrk_aligned+0x24>
 8003886:	e7ef      	b.n	8003868 <sbrk_aligned+0x20>
 8003888:	20000318 	.word	0x20000318

0800388c <_malloc_r>:
 800388c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800388e:	2203      	movs	r2, #3
 8003890:	1ccb      	adds	r3, r1, #3
 8003892:	4393      	bics	r3, r2
 8003894:	3308      	adds	r3, #8
 8003896:	0005      	movs	r5, r0
 8003898:	001f      	movs	r7, r3
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d234      	bcs.n	8003908 <_malloc_r+0x7c>
 800389e:	270c      	movs	r7, #12
 80038a0:	42b9      	cmp	r1, r7
 80038a2:	d833      	bhi.n	800390c <_malloc_r+0x80>
 80038a4:	0028      	movs	r0, r5
 80038a6:	f000 f871 	bl	800398c <__malloc_lock>
 80038aa:	4e37      	ldr	r6, [pc, #220]	@ (8003988 <_malloc_r+0xfc>)
 80038ac:	6833      	ldr	r3, [r6, #0]
 80038ae:	001c      	movs	r4, r3
 80038b0:	2c00      	cmp	r4, #0
 80038b2:	d12f      	bne.n	8003914 <_malloc_r+0x88>
 80038b4:	0039      	movs	r1, r7
 80038b6:	0028      	movs	r0, r5
 80038b8:	f7ff ffc6 	bl	8003848 <sbrk_aligned>
 80038bc:	0004      	movs	r4, r0
 80038be:	1c43      	adds	r3, r0, #1
 80038c0:	d15f      	bne.n	8003982 <_malloc_r+0xf6>
 80038c2:	6834      	ldr	r4, [r6, #0]
 80038c4:	9400      	str	r4, [sp, #0]
 80038c6:	9b00      	ldr	r3, [sp, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d14a      	bne.n	8003962 <_malloc_r+0xd6>
 80038cc:	2c00      	cmp	r4, #0
 80038ce:	d052      	beq.n	8003976 <_malloc_r+0xea>
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	0028      	movs	r0, r5
 80038d4:	18e3      	adds	r3, r4, r3
 80038d6:	9900      	ldr	r1, [sp, #0]
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	f000 fc7b 	bl	80041d4 <_sbrk_r>
 80038de:	9b01      	ldr	r3, [sp, #4]
 80038e0:	4283      	cmp	r3, r0
 80038e2:	d148      	bne.n	8003976 <_malloc_r+0xea>
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	0028      	movs	r0, r5
 80038e8:	1aff      	subs	r7, r7, r3
 80038ea:	0039      	movs	r1, r7
 80038ec:	f7ff ffac 	bl	8003848 <sbrk_aligned>
 80038f0:	3001      	adds	r0, #1
 80038f2:	d040      	beq.n	8003976 <_malloc_r+0xea>
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	19db      	adds	r3, r3, r7
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	6833      	ldr	r3, [r6, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	2a00      	cmp	r2, #0
 8003900:	d133      	bne.n	800396a <_malloc_r+0xde>
 8003902:	9b00      	ldr	r3, [sp, #0]
 8003904:	6033      	str	r3, [r6, #0]
 8003906:	e019      	b.n	800393c <_malloc_r+0xb0>
 8003908:	2b00      	cmp	r3, #0
 800390a:	dac9      	bge.n	80038a0 <_malloc_r+0x14>
 800390c:	230c      	movs	r3, #12
 800390e:	602b      	str	r3, [r5, #0]
 8003910:	2000      	movs	r0, #0
 8003912:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003914:	6821      	ldr	r1, [r4, #0]
 8003916:	1bc9      	subs	r1, r1, r7
 8003918:	d420      	bmi.n	800395c <_malloc_r+0xd0>
 800391a:	290b      	cmp	r1, #11
 800391c:	d90a      	bls.n	8003934 <_malloc_r+0xa8>
 800391e:	19e2      	adds	r2, r4, r7
 8003920:	6027      	str	r7, [r4, #0]
 8003922:	42a3      	cmp	r3, r4
 8003924:	d104      	bne.n	8003930 <_malloc_r+0xa4>
 8003926:	6032      	str	r2, [r6, #0]
 8003928:	6863      	ldr	r3, [r4, #4]
 800392a:	6011      	str	r1, [r2, #0]
 800392c:	6053      	str	r3, [r2, #4]
 800392e:	e005      	b.n	800393c <_malloc_r+0xb0>
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	e7f9      	b.n	8003928 <_malloc_r+0x9c>
 8003934:	6862      	ldr	r2, [r4, #4]
 8003936:	42a3      	cmp	r3, r4
 8003938:	d10e      	bne.n	8003958 <_malloc_r+0xcc>
 800393a:	6032      	str	r2, [r6, #0]
 800393c:	0028      	movs	r0, r5
 800393e:	f000 f82d 	bl	800399c <__malloc_unlock>
 8003942:	0020      	movs	r0, r4
 8003944:	2207      	movs	r2, #7
 8003946:	300b      	adds	r0, #11
 8003948:	1d23      	adds	r3, r4, #4
 800394a:	4390      	bics	r0, r2
 800394c:	1ac2      	subs	r2, r0, r3
 800394e:	4298      	cmp	r0, r3
 8003950:	d0df      	beq.n	8003912 <_malloc_r+0x86>
 8003952:	1a1b      	subs	r3, r3, r0
 8003954:	50a3      	str	r3, [r4, r2]
 8003956:	e7dc      	b.n	8003912 <_malloc_r+0x86>
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	e7ef      	b.n	800393c <_malloc_r+0xb0>
 800395c:	0023      	movs	r3, r4
 800395e:	6864      	ldr	r4, [r4, #4]
 8003960:	e7a6      	b.n	80038b0 <_malloc_r+0x24>
 8003962:	9c00      	ldr	r4, [sp, #0]
 8003964:	6863      	ldr	r3, [r4, #4]
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	e7ad      	b.n	80038c6 <_malloc_r+0x3a>
 800396a:	001a      	movs	r2, r3
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	42a3      	cmp	r3, r4
 8003970:	d1fb      	bne.n	800396a <_malloc_r+0xde>
 8003972:	2300      	movs	r3, #0
 8003974:	e7da      	b.n	800392c <_malloc_r+0xa0>
 8003976:	230c      	movs	r3, #12
 8003978:	0028      	movs	r0, r5
 800397a:	602b      	str	r3, [r5, #0]
 800397c:	f000 f80e 	bl	800399c <__malloc_unlock>
 8003980:	e7c6      	b.n	8003910 <_malloc_r+0x84>
 8003982:	6007      	str	r7, [r0, #0]
 8003984:	e7da      	b.n	800393c <_malloc_r+0xb0>
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	2000031c 	.word	0x2000031c

0800398c <__malloc_lock>:
 800398c:	b510      	push	{r4, lr}
 800398e:	4802      	ldr	r0, [pc, #8]	@ (8003998 <__malloc_lock+0xc>)
 8003990:	f7ff ff0d 	bl	80037ae <__retarget_lock_acquire_recursive>
 8003994:	bd10      	pop	{r4, pc}
 8003996:	46c0      	nop			@ (mov r8, r8)
 8003998:	20000314 	.word	0x20000314

0800399c <__malloc_unlock>:
 800399c:	b510      	push	{r4, lr}
 800399e:	4802      	ldr	r0, [pc, #8]	@ (80039a8 <__malloc_unlock+0xc>)
 80039a0:	f7ff ff06 	bl	80037b0 <__retarget_lock_release_recursive>
 80039a4:	bd10      	pop	{r4, pc}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	20000314 	.word	0x20000314

080039ac <__sfputc_r>:
 80039ac:	6893      	ldr	r3, [r2, #8]
 80039ae:	b510      	push	{r4, lr}
 80039b0:	3b01      	subs	r3, #1
 80039b2:	6093      	str	r3, [r2, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	da04      	bge.n	80039c2 <__sfputc_r+0x16>
 80039b8:	6994      	ldr	r4, [r2, #24]
 80039ba:	42a3      	cmp	r3, r4
 80039bc:	db07      	blt.n	80039ce <__sfputc_r+0x22>
 80039be:	290a      	cmp	r1, #10
 80039c0:	d005      	beq.n	80039ce <__sfputc_r+0x22>
 80039c2:	6813      	ldr	r3, [r2, #0]
 80039c4:	1c58      	adds	r0, r3, #1
 80039c6:	6010      	str	r0, [r2, #0]
 80039c8:	7019      	strb	r1, [r3, #0]
 80039ca:	0008      	movs	r0, r1
 80039cc:	bd10      	pop	{r4, pc}
 80039ce:	f000 fb60 	bl	8004092 <__swbuf_r>
 80039d2:	0001      	movs	r1, r0
 80039d4:	e7f9      	b.n	80039ca <__sfputc_r+0x1e>

080039d6 <__sfputs_r>:
 80039d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d8:	0006      	movs	r6, r0
 80039da:	000f      	movs	r7, r1
 80039dc:	0014      	movs	r4, r2
 80039de:	18d5      	adds	r5, r2, r3
 80039e0:	42ac      	cmp	r4, r5
 80039e2:	d101      	bne.n	80039e8 <__sfputs_r+0x12>
 80039e4:	2000      	movs	r0, #0
 80039e6:	e007      	b.n	80039f8 <__sfputs_r+0x22>
 80039e8:	7821      	ldrb	r1, [r4, #0]
 80039ea:	003a      	movs	r2, r7
 80039ec:	0030      	movs	r0, r6
 80039ee:	f7ff ffdd 	bl	80039ac <__sfputc_r>
 80039f2:	3401      	adds	r4, #1
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	d1f3      	bne.n	80039e0 <__sfputs_r+0xa>
 80039f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039fc <_vfiprintf_r>:
 80039fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039fe:	b0a1      	sub	sp, #132	@ 0x84
 8003a00:	000f      	movs	r7, r1
 8003a02:	0015      	movs	r5, r2
 8003a04:	001e      	movs	r6, r3
 8003a06:	9003      	str	r0, [sp, #12]
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d004      	beq.n	8003a16 <_vfiprintf_r+0x1a>
 8003a0c:	6a03      	ldr	r3, [r0, #32]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <_vfiprintf_r+0x1a>
 8003a12:	f7ff fdbb 	bl	800358c <__sinit>
 8003a16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a18:	07db      	lsls	r3, r3, #31
 8003a1a:	d405      	bmi.n	8003a28 <_vfiprintf_r+0x2c>
 8003a1c:	89bb      	ldrh	r3, [r7, #12]
 8003a1e:	059b      	lsls	r3, r3, #22
 8003a20:	d402      	bmi.n	8003a28 <_vfiprintf_r+0x2c>
 8003a22:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003a24:	f7ff fec3 	bl	80037ae <__retarget_lock_acquire_recursive>
 8003a28:	89bb      	ldrh	r3, [r7, #12]
 8003a2a:	071b      	lsls	r3, r3, #28
 8003a2c:	d502      	bpl.n	8003a34 <_vfiprintf_r+0x38>
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d113      	bne.n	8003a5c <_vfiprintf_r+0x60>
 8003a34:	0039      	movs	r1, r7
 8003a36:	9803      	ldr	r0, [sp, #12]
 8003a38:	f000 fb6e 	bl	8004118 <__swsetup_r>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d00d      	beq.n	8003a5c <_vfiprintf_r+0x60>
 8003a40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a42:	07db      	lsls	r3, r3, #31
 8003a44:	d503      	bpl.n	8003a4e <_vfiprintf_r+0x52>
 8003a46:	2001      	movs	r0, #1
 8003a48:	4240      	negs	r0, r0
 8003a4a:	b021      	add	sp, #132	@ 0x84
 8003a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a4e:	89bb      	ldrh	r3, [r7, #12]
 8003a50:	059b      	lsls	r3, r3, #22
 8003a52:	d4f8      	bmi.n	8003a46 <_vfiprintf_r+0x4a>
 8003a54:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003a56:	f7ff feab 	bl	80037b0 <__retarget_lock_release_recursive>
 8003a5a:	e7f4      	b.n	8003a46 <_vfiprintf_r+0x4a>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	ac08      	add	r4, sp, #32
 8003a60:	6163      	str	r3, [r4, #20]
 8003a62:	3320      	adds	r3, #32
 8003a64:	7663      	strb	r3, [r4, #25]
 8003a66:	3310      	adds	r3, #16
 8003a68:	76a3      	strb	r3, [r4, #26]
 8003a6a:	9607      	str	r6, [sp, #28]
 8003a6c:	002e      	movs	r6, r5
 8003a6e:	7833      	ldrb	r3, [r6, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <_vfiprintf_r+0x7c>
 8003a74:	2b25      	cmp	r3, #37	@ 0x25
 8003a76:	d148      	bne.n	8003b0a <_vfiprintf_r+0x10e>
 8003a78:	1b73      	subs	r3, r6, r5
 8003a7a:	9305      	str	r3, [sp, #20]
 8003a7c:	42ae      	cmp	r6, r5
 8003a7e:	d00b      	beq.n	8003a98 <_vfiprintf_r+0x9c>
 8003a80:	002a      	movs	r2, r5
 8003a82:	0039      	movs	r1, r7
 8003a84:	9803      	ldr	r0, [sp, #12]
 8003a86:	f7ff ffa6 	bl	80039d6 <__sfputs_r>
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	d100      	bne.n	8003a90 <_vfiprintf_r+0x94>
 8003a8e:	e0ae      	b.n	8003bee <_vfiprintf_r+0x1f2>
 8003a90:	6963      	ldr	r3, [r4, #20]
 8003a92:	9a05      	ldr	r2, [sp, #20]
 8003a94:	189b      	adds	r3, r3, r2
 8003a96:	6163      	str	r3, [r4, #20]
 8003a98:	7833      	ldrb	r3, [r6, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d100      	bne.n	8003aa0 <_vfiprintf_r+0xa4>
 8003a9e:	e0a6      	b.n	8003bee <_vfiprintf_r+0x1f2>
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	4252      	negs	r2, r2
 8003aa6:	6062      	str	r2, [r4, #4]
 8003aa8:	a904      	add	r1, sp, #16
 8003aaa:	3254      	adds	r2, #84	@ 0x54
 8003aac:	1852      	adds	r2, r2, r1
 8003aae:	1c75      	adds	r5, r6, #1
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	60e3      	str	r3, [r4, #12]
 8003ab4:	60a3      	str	r3, [r4, #8]
 8003ab6:	7013      	strb	r3, [r2, #0]
 8003ab8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003aba:	4b59      	ldr	r3, [pc, #356]	@ (8003c20 <_vfiprintf_r+0x224>)
 8003abc:	2205      	movs	r2, #5
 8003abe:	0018      	movs	r0, r3
 8003ac0:	7829      	ldrb	r1, [r5, #0]
 8003ac2:	9305      	str	r3, [sp, #20]
 8003ac4:	f000 fb98 	bl	80041f8 <memchr>
 8003ac8:	1c6e      	adds	r6, r5, #1
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d11f      	bne.n	8003b0e <_vfiprintf_r+0x112>
 8003ace:	6822      	ldr	r2, [r4, #0]
 8003ad0:	06d3      	lsls	r3, r2, #27
 8003ad2:	d504      	bpl.n	8003ade <_vfiprintf_r+0xe2>
 8003ad4:	2353      	movs	r3, #83	@ 0x53
 8003ad6:	a904      	add	r1, sp, #16
 8003ad8:	185b      	adds	r3, r3, r1
 8003ada:	2120      	movs	r1, #32
 8003adc:	7019      	strb	r1, [r3, #0]
 8003ade:	0713      	lsls	r3, r2, #28
 8003ae0:	d504      	bpl.n	8003aec <_vfiprintf_r+0xf0>
 8003ae2:	2353      	movs	r3, #83	@ 0x53
 8003ae4:	a904      	add	r1, sp, #16
 8003ae6:	185b      	adds	r3, r3, r1
 8003ae8:	212b      	movs	r1, #43	@ 0x2b
 8003aea:	7019      	strb	r1, [r3, #0]
 8003aec:	782b      	ldrb	r3, [r5, #0]
 8003aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8003af0:	d016      	beq.n	8003b20 <_vfiprintf_r+0x124>
 8003af2:	002e      	movs	r6, r5
 8003af4:	2100      	movs	r1, #0
 8003af6:	200a      	movs	r0, #10
 8003af8:	68e3      	ldr	r3, [r4, #12]
 8003afa:	7832      	ldrb	r2, [r6, #0]
 8003afc:	1c75      	adds	r5, r6, #1
 8003afe:	3a30      	subs	r2, #48	@ 0x30
 8003b00:	2a09      	cmp	r2, #9
 8003b02:	d950      	bls.n	8003ba6 <_vfiprintf_r+0x1aa>
 8003b04:	2900      	cmp	r1, #0
 8003b06:	d111      	bne.n	8003b2c <_vfiprintf_r+0x130>
 8003b08:	e017      	b.n	8003b3a <_vfiprintf_r+0x13e>
 8003b0a:	3601      	adds	r6, #1
 8003b0c:	e7af      	b.n	8003a6e <_vfiprintf_r+0x72>
 8003b0e:	9b05      	ldr	r3, [sp, #20]
 8003b10:	6822      	ldr	r2, [r4, #0]
 8003b12:	1ac0      	subs	r0, r0, r3
 8003b14:	2301      	movs	r3, #1
 8003b16:	4083      	lsls	r3, r0
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	0035      	movs	r5, r6
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	e7cc      	b.n	8003aba <_vfiprintf_r+0xbe>
 8003b20:	9b07      	ldr	r3, [sp, #28]
 8003b22:	1d19      	adds	r1, r3, #4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	9107      	str	r1, [sp, #28]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	db01      	blt.n	8003b30 <_vfiprintf_r+0x134>
 8003b2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b2e:	e004      	b.n	8003b3a <_vfiprintf_r+0x13e>
 8003b30:	425b      	negs	r3, r3
 8003b32:	60e3      	str	r3, [r4, #12]
 8003b34:	2302      	movs	r3, #2
 8003b36:	4313      	orrs	r3, r2
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	7833      	ldrb	r3, [r6, #0]
 8003b3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b3e:	d10c      	bne.n	8003b5a <_vfiprintf_r+0x15e>
 8003b40:	7873      	ldrb	r3, [r6, #1]
 8003b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b44:	d134      	bne.n	8003bb0 <_vfiprintf_r+0x1b4>
 8003b46:	9b07      	ldr	r3, [sp, #28]
 8003b48:	3602      	adds	r6, #2
 8003b4a:	1d1a      	adds	r2, r3, #4
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	9207      	str	r2, [sp, #28]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	da01      	bge.n	8003b58 <_vfiprintf_r+0x15c>
 8003b54:	2301      	movs	r3, #1
 8003b56:	425b      	negs	r3, r3
 8003b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b5a:	4d32      	ldr	r5, [pc, #200]	@ (8003c24 <_vfiprintf_r+0x228>)
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	0028      	movs	r0, r5
 8003b60:	7831      	ldrb	r1, [r6, #0]
 8003b62:	f000 fb49 	bl	80041f8 <memchr>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d006      	beq.n	8003b78 <_vfiprintf_r+0x17c>
 8003b6a:	2340      	movs	r3, #64	@ 0x40
 8003b6c:	1b40      	subs	r0, r0, r5
 8003b6e:	4083      	lsls	r3, r0
 8003b70:	6822      	ldr	r2, [r4, #0]
 8003b72:	3601      	adds	r6, #1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	6023      	str	r3, [r4, #0]
 8003b78:	7831      	ldrb	r1, [r6, #0]
 8003b7a:	2206      	movs	r2, #6
 8003b7c:	482a      	ldr	r0, [pc, #168]	@ (8003c28 <_vfiprintf_r+0x22c>)
 8003b7e:	1c75      	adds	r5, r6, #1
 8003b80:	7621      	strb	r1, [r4, #24]
 8003b82:	f000 fb39 	bl	80041f8 <memchr>
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d040      	beq.n	8003c0c <_vfiprintf_r+0x210>
 8003b8a:	4b28      	ldr	r3, [pc, #160]	@ (8003c2c <_vfiprintf_r+0x230>)
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d122      	bne.n	8003bd6 <_vfiprintf_r+0x1da>
 8003b90:	2207      	movs	r2, #7
 8003b92:	9b07      	ldr	r3, [sp, #28]
 8003b94:	3307      	adds	r3, #7
 8003b96:	4393      	bics	r3, r2
 8003b98:	3308      	adds	r3, #8
 8003b9a:	9307      	str	r3, [sp, #28]
 8003b9c:	6963      	ldr	r3, [r4, #20]
 8003b9e:	9a04      	ldr	r2, [sp, #16]
 8003ba0:	189b      	adds	r3, r3, r2
 8003ba2:	6163      	str	r3, [r4, #20]
 8003ba4:	e762      	b.n	8003a6c <_vfiprintf_r+0x70>
 8003ba6:	4343      	muls	r3, r0
 8003ba8:	002e      	movs	r6, r5
 8003baa:	2101      	movs	r1, #1
 8003bac:	189b      	adds	r3, r3, r2
 8003bae:	e7a4      	b.n	8003afa <_vfiprintf_r+0xfe>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	200a      	movs	r0, #10
 8003bb4:	0019      	movs	r1, r3
 8003bb6:	3601      	adds	r6, #1
 8003bb8:	6063      	str	r3, [r4, #4]
 8003bba:	7832      	ldrb	r2, [r6, #0]
 8003bbc:	1c75      	adds	r5, r6, #1
 8003bbe:	3a30      	subs	r2, #48	@ 0x30
 8003bc0:	2a09      	cmp	r2, #9
 8003bc2:	d903      	bls.n	8003bcc <_vfiprintf_r+0x1d0>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0c8      	beq.n	8003b5a <_vfiprintf_r+0x15e>
 8003bc8:	9109      	str	r1, [sp, #36]	@ 0x24
 8003bca:	e7c6      	b.n	8003b5a <_vfiprintf_r+0x15e>
 8003bcc:	4341      	muls	r1, r0
 8003bce:	002e      	movs	r6, r5
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	1889      	adds	r1, r1, r2
 8003bd4:	e7f1      	b.n	8003bba <_vfiprintf_r+0x1be>
 8003bd6:	aa07      	add	r2, sp, #28
 8003bd8:	9200      	str	r2, [sp, #0]
 8003bda:	0021      	movs	r1, r4
 8003bdc:	003a      	movs	r2, r7
 8003bde:	4b14      	ldr	r3, [pc, #80]	@ (8003c30 <_vfiprintf_r+0x234>)
 8003be0:	9803      	ldr	r0, [sp, #12]
 8003be2:	e000      	b.n	8003be6 <_vfiprintf_r+0x1ea>
 8003be4:	bf00      	nop
 8003be6:	9004      	str	r0, [sp, #16]
 8003be8:	9b04      	ldr	r3, [sp, #16]
 8003bea:	3301      	adds	r3, #1
 8003bec:	d1d6      	bne.n	8003b9c <_vfiprintf_r+0x1a0>
 8003bee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bf0:	07db      	lsls	r3, r3, #31
 8003bf2:	d405      	bmi.n	8003c00 <_vfiprintf_r+0x204>
 8003bf4:	89bb      	ldrh	r3, [r7, #12]
 8003bf6:	059b      	lsls	r3, r3, #22
 8003bf8:	d402      	bmi.n	8003c00 <_vfiprintf_r+0x204>
 8003bfa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003bfc:	f7ff fdd8 	bl	80037b0 <__retarget_lock_release_recursive>
 8003c00:	89bb      	ldrh	r3, [r7, #12]
 8003c02:	065b      	lsls	r3, r3, #25
 8003c04:	d500      	bpl.n	8003c08 <_vfiprintf_r+0x20c>
 8003c06:	e71e      	b.n	8003a46 <_vfiprintf_r+0x4a>
 8003c08:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003c0a:	e71e      	b.n	8003a4a <_vfiprintf_r+0x4e>
 8003c0c:	aa07      	add	r2, sp, #28
 8003c0e:	9200      	str	r2, [sp, #0]
 8003c10:	0021      	movs	r1, r4
 8003c12:	003a      	movs	r2, r7
 8003c14:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <_vfiprintf_r+0x234>)
 8003c16:	9803      	ldr	r0, [sp, #12]
 8003c18:	f000 f87c 	bl	8003d14 <_printf_i>
 8003c1c:	e7e3      	b.n	8003be6 <_vfiprintf_r+0x1ea>
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	0800443c 	.word	0x0800443c
 8003c24:	08004442 	.word	0x08004442
 8003c28:	08004446 	.word	0x08004446
 8003c2c:	00000000 	.word	0x00000000
 8003c30:	080039d7 	.word	0x080039d7

08003c34 <_printf_common>:
 8003c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c36:	0016      	movs	r6, r2
 8003c38:	9301      	str	r3, [sp, #4]
 8003c3a:	688a      	ldr	r2, [r1, #8]
 8003c3c:	690b      	ldr	r3, [r1, #16]
 8003c3e:	000c      	movs	r4, r1
 8003c40:	9000      	str	r0, [sp, #0]
 8003c42:	4293      	cmp	r3, r2
 8003c44:	da00      	bge.n	8003c48 <_printf_common+0x14>
 8003c46:	0013      	movs	r3, r2
 8003c48:	0022      	movs	r2, r4
 8003c4a:	6033      	str	r3, [r6, #0]
 8003c4c:	3243      	adds	r2, #67	@ 0x43
 8003c4e:	7812      	ldrb	r2, [r2, #0]
 8003c50:	2a00      	cmp	r2, #0
 8003c52:	d001      	beq.n	8003c58 <_printf_common+0x24>
 8003c54:	3301      	adds	r3, #1
 8003c56:	6033      	str	r3, [r6, #0]
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	069b      	lsls	r3, r3, #26
 8003c5c:	d502      	bpl.n	8003c64 <_printf_common+0x30>
 8003c5e:	6833      	ldr	r3, [r6, #0]
 8003c60:	3302      	adds	r3, #2
 8003c62:	6033      	str	r3, [r6, #0]
 8003c64:	6822      	ldr	r2, [r4, #0]
 8003c66:	2306      	movs	r3, #6
 8003c68:	0015      	movs	r5, r2
 8003c6a:	401d      	ands	r5, r3
 8003c6c:	421a      	tst	r2, r3
 8003c6e:	d027      	beq.n	8003cc0 <_printf_common+0x8c>
 8003c70:	0023      	movs	r3, r4
 8003c72:	3343      	adds	r3, #67	@ 0x43
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	1e5a      	subs	r2, r3, #1
 8003c78:	4193      	sbcs	r3, r2
 8003c7a:	6822      	ldr	r2, [r4, #0]
 8003c7c:	0692      	lsls	r2, r2, #26
 8003c7e:	d430      	bmi.n	8003ce2 <_printf_common+0xae>
 8003c80:	0022      	movs	r2, r4
 8003c82:	9901      	ldr	r1, [sp, #4]
 8003c84:	9800      	ldr	r0, [sp, #0]
 8003c86:	9d08      	ldr	r5, [sp, #32]
 8003c88:	3243      	adds	r2, #67	@ 0x43
 8003c8a:	47a8      	blx	r5
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d025      	beq.n	8003cdc <_printf_common+0xa8>
 8003c90:	2206      	movs	r2, #6
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	2500      	movs	r5, #0
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d105      	bne.n	8003ca8 <_printf_common+0x74>
 8003c9c:	6833      	ldr	r3, [r6, #0]
 8003c9e:	68e5      	ldr	r5, [r4, #12]
 8003ca0:	1aed      	subs	r5, r5, r3
 8003ca2:	43eb      	mvns	r3, r5
 8003ca4:	17db      	asrs	r3, r3, #31
 8003ca6:	401d      	ands	r5, r3
 8003ca8:	68a3      	ldr	r3, [r4, #8]
 8003caa:	6922      	ldr	r2, [r4, #16]
 8003cac:	4293      	cmp	r3, r2
 8003cae:	dd01      	ble.n	8003cb4 <_printf_common+0x80>
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	18ed      	adds	r5, r5, r3
 8003cb4:	2600      	movs	r6, #0
 8003cb6:	42b5      	cmp	r5, r6
 8003cb8:	d120      	bne.n	8003cfc <_printf_common+0xc8>
 8003cba:	2000      	movs	r0, #0
 8003cbc:	e010      	b.n	8003ce0 <_printf_common+0xac>
 8003cbe:	3501      	adds	r5, #1
 8003cc0:	68e3      	ldr	r3, [r4, #12]
 8003cc2:	6832      	ldr	r2, [r6, #0]
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	42ab      	cmp	r3, r5
 8003cc8:	ddd2      	ble.n	8003c70 <_printf_common+0x3c>
 8003cca:	0022      	movs	r2, r4
 8003ccc:	2301      	movs	r3, #1
 8003cce:	9901      	ldr	r1, [sp, #4]
 8003cd0:	9800      	ldr	r0, [sp, #0]
 8003cd2:	9f08      	ldr	r7, [sp, #32]
 8003cd4:	3219      	adds	r2, #25
 8003cd6:	47b8      	blx	r7
 8003cd8:	3001      	adds	r0, #1
 8003cda:	d1f0      	bne.n	8003cbe <_printf_common+0x8a>
 8003cdc:	2001      	movs	r0, #1
 8003cde:	4240      	negs	r0, r0
 8003ce0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ce2:	2030      	movs	r0, #48	@ 0x30
 8003ce4:	18e1      	adds	r1, r4, r3
 8003ce6:	3143      	adds	r1, #67	@ 0x43
 8003ce8:	7008      	strb	r0, [r1, #0]
 8003cea:	0021      	movs	r1, r4
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	3145      	adds	r1, #69	@ 0x45
 8003cf0:	7809      	ldrb	r1, [r1, #0]
 8003cf2:	18a2      	adds	r2, r4, r2
 8003cf4:	3243      	adds	r2, #67	@ 0x43
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	7011      	strb	r1, [r2, #0]
 8003cfa:	e7c1      	b.n	8003c80 <_printf_common+0x4c>
 8003cfc:	0022      	movs	r2, r4
 8003cfe:	2301      	movs	r3, #1
 8003d00:	9901      	ldr	r1, [sp, #4]
 8003d02:	9800      	ldr	r0, [sp, #0]
 8003d04:	9f08      	ldr	r7, [sp, #32]
 8003d06:	321a      	adds	r2, #26
 8003d08:	47b8      	blx	r7
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	d0e6      	beq.n	8003cdc <_printf_common+0xa8>
 8003d0e:	3601      	adds	r6, #1
 8003d10:	e7d1      	b.n	8003cb6 <_printf_common+0x82>
	...

08003d14 <_printf_i>:
 8003d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d16:	b08b      	sub	sp, #44	@ 0x2c
 8003d18:	9206      	str	r2, [sp, #24]
 8003d1a:	000a      	movs	r2, r1
 8003d1c:	3243      	adds	r2, #67	@ 0x43
 8003d1e:	9307      	str	r3, [sp, #28]
 8003d20:	9005      	str	r0, [sp, #20]
 8003d22:	9203      	str	r2, [sp, #12]
 8003d24:	7e0a      	ldrb	r2, [r1, #24]
 8003d26:	000c      	movs	r4, r1
 8003d28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003d2a:	2a78      	cmp	r2, #120	@ 0x78
 8003d2c:	d809      	bhi.n	8003d42 <_printf_i+0x2e>
 8003d2e:	2a62      	cmp	r2, #98	@ 0x62
 8003d30:	d80b      	bhi.n	8003d4a <_printf_i+0x36>
 8003d32:	2a00      	cmp	r2, #0
 8003d34:	d100      	bne.n	8003d38 <_printf_i+0x24>
 8003d36:	e0bc      	b.n	8003eb2 <_printf_i+0x19e>
 8003d38:	497b      	ldr	r1, [pc, #492]	@ (8003f28 <_printf_i+0x214>)
 8003d3a:	9104      	str	r1, [sp, #16]
 8003d3c:	2a58      	cmp	r2, #88	@ 0x58
 8003d3e:	d100      	bne.n	8003d42 <_printf_i+0x2e>
 8003d40:	e090      	b.n	8003e64 <_printf_i+0x150>
 8003d42:	0025      	movs	r5, r4
 8003d44:	3542      	adds	r5, #66	@ 0x42
 8003d46:	702a      	strb	r2, [r5, #0]
 8003d48:	e022      	b.n	8003d90 <_printf_i+0x7c>
 8003d4a:	0010      	movs	r0, r2
 8003d4c:	3863      	subs	r0, #99	@ 0x63
 8003d4e:	2815      	cmp	r0, #21
 8003d50:	d8f7      	bhi.n	8003d42 <_printf_i+0x2e>
 8003d52:	f7fc f9d9 	bl	8000108 <__gnu_thumb1_case_shi>
 8003d56:	0016      	.short	0x0016
 8003d58:	fff6001f 	.word	0xfff6001f
 8003d5c:	fff6fff6 	.word	0xfff6fff6
 8003d60:	001ffff6 	.word	0x001ffff6
 8003d64:	fff6fff6 	.word	0xfff6fff6
 8003d68:	fff6fff6 	.word	0xfff6fff6
 8003d6c:	003600a1 	.word	0x003600a1
 8003d70:	fff60080 	.word	0xfff60080
 8003d74:	00b2fff6 	.word	0x00b2fff6
 8003d78:	0036fff6 	.word	0x0036fff6
 8003d7c:	fff6fff6 	.word	0xfff6fff6
 8003d80:	0084      	.short	0x0084
 8003d82:	0025      	movs	r5, r4
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	3542      	adds	r5, #66	@ 0x42
 8003d88:	1d11      	adds	r1, r2, #4
 8003d8a:	6019      	str	r1, [r3, #0]
 8003d8c:	6813      	ldr	r3, [r2, #0]
 8003d8e:	702b      	strb	r3, [r5, #0]
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0a0      	b.n	8003ed6 <_printf_i+0x1c2>
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	6809      	ldr	r1, [r1, #0]
 8003d98:	1d02      	adds	r2, r0, #4
 8003d9a:	060d      	lsls	r5, r1, #24
 8003d9c:	d50b      	bpl.n	8003db6 <_printf_i+0xa2>
 8003d9e:	6806      	ldr	r6, [r0, #0]
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	2e00      	cmp	r6, #0
 8003da4:	da03      	bge.n	8003dae <_printf_i+0x9a>
 8003da6:	232d      	movs	r3, #45	@ 0x2d
 8003da8:	9a03      	ldr	r2, [sp, #12]
 8003daa:	4276      	negs	r6, r6
 8003dac:	7013      	strb	r3, [r2, #0]
 8003dae:	4b5e      	ldr	r3, [pc, #376]	@ (8003f28 <_printf_i+0x214>)
 8003db0:	270a      	movs	r7, #10
 8003db2:	9304      	str	r3, [sp, #16]
 8003db4:	e018      	b.n	8003de8 <_printf_i+0xd4>
 8003db6:	6806      	ldr	r6, [r0, #0]
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	0649      	lsls	r1, r1, #25
 8003dbc:	d5f1      	bpl.n	8003da2 <_printf_i+0x8e>
 8003dbe:	b236      	sxth	r6, r6
 8003dc0:	e7ef      	b.n	8003da2 <_printf_i+0x8e>
 8003dc2:	6808      	ldr	r0, [r1, #0]
 8003dc4:	6819      	ldr	r1, [r3, #0]
 8003dc6:	c940      	ldmia	r1!, {r6}
 8003dc8:	0605      	lsls	r5, r0, #24
 8003dca:	d402      	bmi.n	8003dd2 <_printf_i+0xbe>
 8003dcc:	0640      	lsls	r0, r0, #25
 8003dce:	d500      	bpl.n	8003dd2 <_printf_i+0xbe>
 8003dd0:	b2b6      	uxth	r6, r6
 8003dd2:	6019      	str	r1, [r3, #0]
 8003dd4:	4b54      	ldr	r3, [pc, #336]	@ (8003f28 <_printf_i+0x214>)
 8003dd6:	270a      	movs	r7, #10
 8003dd8:	9304      	str	r3, [sp, #16]
 8003dda:	2a6f      	cmp	r2, #111	@ 0x6f
 8003ddc:	d100      	bne.n	8003de0 <_printf_i+0xcc>
 8003dde:	3f02      	subs	r7, #2
 8003de0:	0023      	movs	r3, r4
 8003de2:	2200      	movs	r2, #0
 8003de4:	3343      	adds	r3, #67	@ 0x43
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	6863      	ldr	r3, [r4, #4]
 8003dea:	60a3      	str	r3, [r4, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	db03      	blt.n	8003df8 <_printf_i+0xe4>
 8003df0:	2104      	movs	r1, #4
 8003df2:	6822      	ldr	r2, [r4, #0]
 8003df4:	438a      	bics	r2, r1
 8003df6:	6022      	str	r2, [r4, #0]
 8003df8:	2e00      	cmp	r6, #0
 8003dfa:	d102      	bne.n	8003e02 <_printf_i+0xee>
 8003dfc:	9d03      	ldr	r5, [sp, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00c      	beq.n	8003e1c <_printf_i+0x108>
 8003e02:	9d03      	ldr	r5, [sp, #12]
 8003e04:	0030      	movs	r0, r6
 8003e06:	0039      	movs	r1, r7
 8003e08:	f7fc fa0e 	bl	8000228 <__aeabi_uidivmod>
 8003e0c:	9b04      	ldr	r3, [sp, #16]
 8003e0e:	3d01      	subs	r5, #1
 8003e10:	5c5b      	ldrb	r3, [r3, r1]
 8003e12:	702b      	strb	r3, [r5, #0]
 8003e14:	0033      	movs	r3, r6
 8003e16:	0006      	movs	r6, r0
 8003e18:	429f      	cmp	r7, r3
 8003e1a:	d9f3      	bls.n	8003e04 <_printf_i+0xf0>
 8003e1c:	2f08      	cmp	r7, #8
 8003e1e:	d109      	bne.n	8003e34 <_printf_i+0x120>
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	07db      	lsls	r3, r3, #31
 8003e24:	d506      	bpl.n	8003e34 <_printf_i+0x120>
 8003e26:	6862      	ldr	r2, [r4, #4]
 8003e28:	6923      	ldr	r3, [r4, #16]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	dc02      	bgt.n	8003e34 <_printf_i+0x120>
 8003e2e:	2330      	movs	r3, #48	@ 0x30
 8003e30:	3d01      	subs	r5, #1
 8003e32:	702b      	strb	r3, [r5, #0]
 8003e34:	9b03      	ldr	r3, [sp, #12]
 8003e36:	1b5b      	subs	r3, r3, r5
 8003e38:	6123      	str	r3, [r4, #16]
 8003e3a:	9b07      	ldr	r3, [sp, #28]
 8003e3c:	0021      	movs	r1, r4
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	9805      	ldr	r0, [sp, #20]
 8003e42:	9b06      	ldr	r3, [sp, #24]
 8003e44:	aa09      	add	r2, sp, #36	@ 0x24
 8003e46:	f7ff fef5 	bl	8003c34 <_printf_common>
 8003e4a:	3001      	adds	r0, #1
 8003e4c:	d148      	bne.n	8003ee0 <_printf_i+0x1cc>
 8003e4e:	2001      	movs	r0, #1
 8003e50:	4240      	negs	r0, r0
 8003e52:	b00b      	add	sp, #44	@ 0x2c
 8003e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e56:	2220      	movs	r2, #32
 8003e58:	6809      	ldr	r1, [r1, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	6022      	str	r2, [r4, #0]
 8003e5e:	2278      	movs	r2, #120	@ 0x78
 8003e60:	4932      	ldr	r1, [pc, #200]	@ (8003f2c <_printf_i+0x218>)
 8003e62:	9104      	str	r1, [sp, #16]
 8003e64:	0021      	movs	r1, r4
 8003e66:	3145      	adds	r1, #69	@ 0x45
 8003e68:	700a      	strb	r2, [r1, #0]
 8003e6a:	6819      	ldr	r1, [r3, #0]
 8003e6c:	6822      	ldr	r2, [r4, #0]
 8003e6e:	c940      	ldmia	r1!, {r6}
 8003e70:	0610      	lsls	r0, r2, #24
 8003e72:	d402      	bmi.n	8003e7a <_printf_i+0x166>
 8003e74:	0650      	lsls	r0, r2, #25
 8003e76:	d500      	bpl.n	8003e7a <_printf_i+0x166>
 8003e78:	b2b6      	uxth	r6, r6
 8003e7a:	6019      	str	r1, [r3, #0]
 8003e7c:	07d3      	lsls	r3, r2, #31
 8003e7e:	d502      	bpl.n	8003e86 <_printf_i+0x172>
 8003e80:	2320      	movs	r3, #32
 8003e82:	4313      	orrs	r3, r2
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	2e00      	cmp	r6, #0
 8003e88:	d001      	beq.n	8003e8e <_printf_i+0x17a>
 8003e8a:	2710      	movs	r7, #16
 8003e8c:	e7a8      	b.n	8003de0 <_printf_i+0xcc>
 8003e8e:	2220      	movs	r2, #32
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	4393      	bics	r3, r2
 8003e94:	6023      	str	r3, [r4, #0]
 8003e96:	e7f8      	b.n	8003e8a <_printf_i+0x176>
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	680d      	ldr	r5, [r1, #0]
 8003e9c:	1d10      	adds	r0, r2, #4
 8003e9e:	6949      	ldr	r1, [r1, #20]
 8003ea0:	6018      	str	r0, [r3, #0]
 8003ea2:	6813      	ldr	r3, [r2, #0]
 8003ea4:	062e      	lsls	r6, r5, #24
 8003ea6:	d501      	bpl.n	8003eac <_printf_i+0x198>
 8003ea8:	6019      	str	r1, [r3, #0]
 8003eaa:	e002      	b.n	8003eb2 <_printf_i+0x19e>
 8003eac:	066d      	lsls	r5, r5, #25
 8003eae:	d5fb      	bpl.n	8003ea8 <_printf_i+0x194>
 8003eb0:	8019      	strh	r1, [r3, #0]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	9d03      	ldr	r5, [sp, #12]
 8003eb6:	6123      	str	r3, [r4, #16]
 8003eb8:	e7bf      	b.n	8003e3a <_printf_i+0x126>
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	1d11      	adds	r1, r2, #4
 8003ebe:	6019      	str	r1, [r3, #0]
 8003ec0:	6815      	ldr	r5, [r2, #0]
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	0028      	movs	r0, r5
 8003ec6:	6862      	ldr	r2, [r4, #4]
 8003ec8:	f000 f996 	bl	80041f8 <memchr>
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d001      	beq.n	8003ed4 <_printf_i+0x1c0>
 8003ed0:	1b40      	subs	r0, r0, r5
 8003ed2:	6060      	str	r0, [r4, #4]
 8003ed4:	6863      	ldr	r3, [r4, #4]
 8003ed6:	6123      	str	r3, [r4, #16]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	9a03      	ldr	r2, [sp, #12]
 8003edc:	7013      	strb	r3, [r2, #0]
 8003ede:	e7ac      	b.n	8003e3a <_printf_i+0x126>
 8003ee0:	002a      	movs	r2, r5
 8003ee2:	6923      	ldr	r3, [r4, #16]
 8003ee4:	9906      	ldr	r1, [sp, #24]
 8003ee6:	9805      	ldr	r0, [sp, #20]
 8003ee8:	9d07      	ldr	r5, [sp, #28]
 8003eea:	47a8      	blx	r5
 8003eec:	3001      	adds	r0, #1
 8003eee:	d0ae      	beq.n	8003e4e <_printf_i+0x13a>
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	079b      	lsls	r3, r3, #30
 8003ef4:	d415      	bmi.n	8003f22 <_printf_i+0x20e>
 8003ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ef8:	68e0      	ldr	r0, [r4, #12]
 8003efa:	4298      	cmp	r0, r3
 8003efc:	daa9      	bge.n	8003e52 <_printf_i+0x13e>
 8003efe:	0018      	movs	r0, r3
 8003f00:	e7a7      	b.n	8003e52 <_printf_i+0x13e>
 8003f02:	0022      	movs	r2, r4
 8003f04:	2301      	movs	r3, #1
 8003f06:	9906      	ldr	r1, [sp, #24]
 8003f08:	9805      	ldr	r0, [sp, #20]
 8003f0a:	9e07      	ldr	r6, [sp, #28]
 8003f0c:	3219      	adds	r2, #25
 8003f0e:	47b0      	blx	r6
 8003f10:	3001      	adds	r0, #1
 8003f12:	d09c      	beq.n	8003e4e <_printf_i+0x13a>
 8003f14:	3501      	adds	r5, #1
 8003f16:	68e3      	ldr	r3, [r4, #12]
 8003f18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	42ab      	cmp	r3, r5
 8003f1e:	dcf0      	bgt.n	8003f02 <_printf_i+0x1ee>
 8003f20:	e7e9      	b.n	8003ef6 <_printf_i+0x1e2>
 8003f22:	2500      	movs	r5, #0
 8003f24:	e7f7      	b.n	8003f16 <_printf_i+0x202>
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	0800444d 	.word	0x0800444d
 8003f2c:	0800445e 	.word	0x0800445e

08003f30 <__sflush_r>:
 8003f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f32:	220c      	movs	r2, #12
 8003f34:	5e8b      	ldrsh	r3, [r1, r2]
 8003f36:	0005      	movs	r5, r0
 8003f38:	000c      	movs	r4, r1
 8003f3a:	071a      	lsls	r2, r3, #28
 8003f3c:	d456      	bmi.n	8003fec <__sflush_r+0xbc>
 8003f3e:	684a      	ldr	r2, [r1, #4]
 8003f40:	2a00      	cmp	r2, #0
 8003f42:	dc02      	bgt.n	8003f4a <__sflush_r+0x1a>
 8003f44:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003f46:	2a00      	cmp	r2, #0
 8003f48:	dd4e      	ble.n	8003fe8 <__sflush_r+0xb8>
 8003f4a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003f4c:	2f00      	cmp	r7, #0
 8003f4e:	d04b      	beq.n	8003fe8 <__sflush_r+0xb8>
 8003f50:	2200      	movs	r2, #0
 8003f52:	2080      	movs	r0, #128	@ 0x80
 8003f54:	682e      	ldr	r6, [r5, #0]
 8003f56:	602a      	str	r2, [r5, #0]
 8003f58:	001a      	movs	r2, r3
 8003f5a:	0140      	lsls	r0, r0, #5
 8003f5c:	6a21      	ldr	r1, [r4, #32]
 8003f5e:	4002      	ands	r2, r0
 8003f60:	4203      	tst	r3, r0
 8003f62:	d033      	beq.n	8003fcc <__sflush_r+0x9c>
 8003f64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	075b      	lsls	r3, r3, #29
 8003f6a:	d506      	bpl.n	8003f7a <__sflush_r+0x4a>
 8003f6c:	6863      	ldr	r3, [r4, #4]
 8003f6e:	1ad2      	subs	r2, r2, r3
 8003f70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <__sflush_r+0x4a>
 8003f76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f78:	1ad2      	subs	r2, r2, r3
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	0028      	movs	r0, r5
 8003f7e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003f80:	6a21      	ldr	r1, [r4, #32]
 8003f82:	47b8      	blx	r7
 8003f84:	89a2      	ldrh	r2, [r4, #12]
 8003f86:	1c43      	adds	r3, r0, #1
 8003f88:	d106      	bne.n	8003f98 <__sflush_r+0x68>
 8003f8a:	6829      	ldr	r1, [r5, #0]
 8003f8c:	291d      	cmp	r1, #29
 8003f8e:	d846      	bhi.n	800401e <__sflush_r+0xee>
 8003f90:	4b29      	ldr	r3, [pc, #164]	@ (8004038 <__sflush_r+0x108>)
 8003f92:	410b      	asrs	r3, r1
 8003f94:	07db      	lsls	r3, r3, #31
 8003f96:	d442      	bmi.n	800401e <__sflush_r+0xee>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	6063      	str	r3, [r4, #4]
 8003f9c:	6923      	ldr	r3, [r4, #16]
 8003f9e:	6023      	str	r3, [r4, #0]
 8003fa0:	04d2      	lsls	r2, r2, #19
 8003fa2:	d505      	bpl.n	8003fb0 <__sflush_r+0x80>
 8003fa4:	1c43      	adds	r3, r0, #1
 8003fa6:	d102      	bne.n	8003fae <__sflush_r+0x7e>
 8003fa8:	682b      	ldr	r3, [r5, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d100      	bne.n	8003fb0 <__sflush_r+0x80>
 8003fae:	6560      	str	r0, [r4, #84]	@ 0x54
 8003fb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003fb2:	602e      	str	r6, [r5, #0]
 8003fb4:	2900      	cmp	r1, #0
 8003fb6:	d017      	beq.n	8003fe8 <__sflush_r+0xb8>
 8003fb8:	0023      	movs	r3, r4
 8003fba:	3344      	adds	r3, #68	@ 0x44
 8003fbc:	4299      	cmp	r1, r3
 8003fbe:	d002      	beq.n	8003fc6 <__sflush_r+0x96>
 8003fc0:	0028      	movs	r0, r5
 8003fc2:	f7ff fbf7 	bl	80037b4 <_free_r>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003fca:	e00d      	b.n	8003fe8 <__sflush_r+0xb8>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	0028      	movs	r0, r5
 8003fd0:	47b8      	blx	r7
 8003fd2:	0002      	movs	r2, r0
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	d1c6      	bne.n	8003f66 <__sflush_r+0x36>
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0c3      	beq.n	8003f66 <__sflush_r+0x36>
 8003fde:	2b1d      	cmp	r3, #29
 8003fe0:	d001      	beq.n	8003fe6 <__sflush_r+0xb6>
 8003fe2:	2b16      	cmp	r3, #22
 8003fe4:	d11a      	bne.n	800401c <__sflush_r+0xec>
 8003fe6:	602e      	str	r6, [r5, #0]
 8003fe8:	2000      	movs	r0, #0
 8003fea:	e01e      	b.n	800402a <__sflush_r+0xfa>
 8003fec:	690e      	ldr	r6, [r1, #16]
 8003fee:	2e00      	cmp	r6, #0
 8003ff0:	d0fa      	beq.n	8003fe8 <__sflush_r+0xb8>
 8003ff2:	680f      	ldr	r7, [r1, #0]
 8003ff4:	600e      	str	r6, [r1, #0]
 8003ff6:	1bba      	subs	r2, r7, r6
 8003ff8:	9201      	str	r2, [sp, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	079b      	lsls	r3, r3, #30
 8003ffe:	d100      	bne.n	8004002 <__sflush_r+0xd2>
 8004000:	694a      	ldr	r2, [r1, #20]
 8004002:	60a2      	str	r2, [r4, #8]
 8004004:	9b01      	ldr	r3, [sp, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	ddee      	ble.n	8003fe8 <__sflush_r+0xb8>
 800400a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800400c:	0032      	movs	r2, r6
 800400e:	001f      	movs	r7, r3
 8004010:	0028      	movs	r0, r5
 8004012:	9b01      	ldr	r3, [sp, #4]
 8004014:	6a21      	ldr	r1, [r4, #32]
 8004016:	47b8      	blx	r7
 8004018:	2800      	cmp	r0, #0
 800401a:	dc07      	bgt.n	800402c <__sflush_r+0xfc>
 800401c:	89a2      	ldrh	r2, [r4, #12]
 800401e:	2340      	movs	r3, #64	@ 0x40
 8004020:	2001      	movs	r0, #1
 8004022:	4313      	orrs	r3, r2
 8004024:	b21b      	sxth	r3, r3
 8004026:	81a3      	strh	r3, [r4, #12]
 8004028:	4240      	negs	r0, r0
 800402a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800402c:	9b01      	ldr	r3, [sp, #4]
 800402e:	1836      	adds	r6, r6, r0
 8004030:	1a1b      	subs	r3, r3, r0
 8004032:	9301      	str	r3, [sp, #4]
 8004034:	e7e6      	b.n	8004004 <__sflush_r+0xd4>
 8004036:	46c0      	nop			@ (mov r8, r8)
 8004038:	dfbffffe 	.word	0xdfbffffe

0800403c <_fflush_r>:
 800403c:	690b      	ldr	r3, [r1, #16]
 800403e:	b570      	push	{r4, r5, r6, lr}
 8004040:	0005      	movs	r5, r0
 8004042:	000c      	movs	r4, r1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d102      	bne.n	800404e <_fflush_r+0x12>
 8004048:	2500      	movs	r5, #0
 800404a:	0028      	movs	r0, r5
 800404c:	bd70      	pop	{r4, r5, r6, pc}
 800404e:	2800      	cmp	r0, #0
 8004050:	d004      	beq.n	800405c <_fflush_r+0x20>
 8004052:	6a03      	ldr	r3, [r0, #32]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <_fflush_r+0x20>
 8004058:	f7ff fa98 	bl	800358c <__sinit>
 800405c:	220c      	movs	r2, #12
 800405e:	5ea3      	ldrsh	r3, [r4, r2]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f1      	beq.n	8004048 <_fflush_r+0xc>
 8004064:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004066:	07d2      	lsls	r2, r2, #31
 8004068:	d404      	bmi.n	8004074 <_fflush_r+0x38>
 800406a:	059b      	lsls	r3, r3, #22
 800406c:	d402      	bmi.n	8004074 <_fflush_r+0x38>
 800406e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004070:	f7ff fb9d 	bl	80037ae <__retarget_lock_acquire_recursive>
 8004074:	0028      	movs	r0, r5
 8004076:	0021      	movs	r1, r4
 8004078:	f7ff ff5a 	bl	8003f30 <__sflush_r>
 800407c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800407e:	0005      	movs	r5, r0
 8004080:	07db      	lsls	r3, r3, #31
 8004082:	d4e2      	bmi.n	800404a <_fflush_r+0xe>
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	059b      	lsls	r3, r3, #22
 8004088:	d4df      	bmi.n	800404a <_fflush_r+0xe>
 800408a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800408c:	f7ff fb90 	bl	80037b0 <__retarget_lock_release_recursive>
 8004090:	e7db      	b.n	800404a <_fflush_r+0xe>

08004092 <__swbuf_r>:
 8004092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004094:	0006      	movs	r6, r0
 8004096:	000d      	movs	r5, r1
 8004098:	0014      	movs	r4, r2
 800409a:	2800      	cmp	r0, #0
 800409c:	d004      	beq.n	80040a8 <__swbuf_r+0x16>
 800409e:	6a03      	ldr	r3, [r0, #32]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <__swbuf_r+0x16>
 80040a4:	f7ff fa72 	bl	800358c <__sinit>
 80040a8:	69a3      	ldr	r3, [r4, #24]
 80040aa:	60a3      	str	r3, [r4, #8]
 80040ac:	89a3      	ldrh	r3, [r4, #12]
 80040ae:	071b      	lsls	r3, r3, #28
 80040b0:	d502      	bpl.n	80040b8 <__swbuf_r+0x26>
 80040b2:	6923      	ldr	r3, [r4, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d109      	bne.n	80040cc <__swbuf_r+0x3a>
 80040b8:	0021      	movs	r1, r4
 80040ba:	0030      	movs	r0, r6
 80040bc:	f000 f82c 	bl	8004118 <__swsetup_r>
 80040c0:	2800      	cmp	r0, #0
 80040c2:	d003      	beq.n	80040cc <__swbuf_r+0x3a>
 80040c4:	2501      	movs	r5, #1
 80040c6:	426d      	negs	r5, r5
 80040c8:	0028      	movs	r0, r5
 80040ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040cc:	6923      	ldr	r3, [r4, #16]
 80040ce:	6820      	ldr	r0, [r4, #0]
 80040d0:	b2ef      	uxtb	r7, r5
 80040d2:	1ac0      	subs	r0, r0, r3
 80040d4:	6963      	ldr	r3, [r4, #20]
 80040d6:	b2ed      	uxtb	r5, r5
 80040d8:	4283      	cmp	r3, r0
 80040da:	dc05      	bgt.n	80040e8 <__swbuf_r+0x56>
 80040dc:	0021      	movs	r1, r4
 80040de:	0030      	movs	r0, r6
 80040e0:	f7ff ffac 	bl	800403c <_fflush_r>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	d1ed      	bne.n	80040c4 <__swbuf_r+0x32>
 80040e8:	68a3      	ldr	r3, [r4, #8]
 80040ea:	3001      	adds	r0, #1
 80040ec:	3b01      	subs	r3, #1
 80040ee:	60a3      	str	r3, [r4, #8]
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	6022      	str	r2, [r4, #0]
 80040f6:	701f      	strb	r7, [r3, #0]
 80040f8:	6963      	ldr	r3, [r4, #20]
 80040fa:	4283      	cmp	r3, r0
 80040fc:	d004      	beq.n	8004108 <__swbuf_r+0x76>
 80040fe:	89a3      	ldrh	r3, [r4, #12]
 8004100:	07db      	lsls	r3, r3, #31
 8004102:	d5e1      	bpl.n	80040c8 <__swbuf_r+0x36>
 8004104:	2d0a      	cmp	r5, #10
 8004106:	d1df      	bne.n	80040c8 <__swbuf_r+0x36>
 8004108:	0021      	movs	r1, r4
 800410a:	0030      	movs	r0, r6
 800410c:	f7ff ff96 	bl	800403c <_fflush_r>
 8004110:	2800      	cmp	r0, #0
 8004112:	d0d9      	beq.n	80040c8 <__swbuf_r+0x36>
 8004114:	e7d6      	b.n	80040c4 <__swbuf_r+0x32>
	...

08004118 <__swsetup_r>:
 8004118:	4b2d      	ldr	r3, [pc, #180]	@ (80041d0 <__swsetup_r+0xb8>)
 800411a:	b570      	push	{r4, r5, r6, lr}
 800411c:	0005      	movs	r5, r0
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	000c      	movs	r4, r1
 8004122:	2800      	cmp	r0, #0
 8004124:	d004      	beq.n	8004130 <__swsetup_r+0x18>
 8004126:	6a03      	ldr	r3, [r0, #32]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <__swsetup_r+0x18>
 800412c:	f7ff fa2e 	bl	800358c <__sinit>
 8004130:	230c      	movs	r3, #12
 8004132:	5ee2      	ldrsh	r2, [r4, r3]
 8004134:	0713      	lsls	r3, r2, #28
 8004136:	d423      	bmi.n	8004180 <__swsetup_r+0x68>
 8004138:	06d3      	lsls	r3, r2, #27
 800413a:	d407      	bmi.n	800414c <__swsetup_r+0x34>
 800413c:	2309      	movs	r3, #9
 800413e:	602b      	str	r3, [r5, #0]
 8004140:	2340      	movs	r3, #64	@ 0x40
 8004142:	2001      	movs	r0, #1
 8004144:	4313      	orrs	r3, r2
 8004146:	81a3      	strh	r3, [r4, #12]
 8004148:	4240      	negs	r0, r0
 800414a:	e03a      	b.n	80041c2 <__swsetup_r+0xaa>
 800414c:	0752      	lsls	r2, r2, #29
 800414e:	d513      	bpl.n	8004178 <__swsetup_r+0x60>
 8004150:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004152:	2900      	cmp	r1, #0
 8004154:	d008      	beq.n	8004168 <__swsetup_r+0x50>
 8004156:	0023      	movs	r3, r4
 8004158:	3344      	adds	r3, #68	@ 0x44
 800415a:	4299      	cmp	r1, r3
 800415c:	d002      	beq.n	8004164 <__swsetup_r+0x4c>
 800415e:	0028      	movs	r0, r5
 8004160:	f7ff fb28 	bl	80037b4 <_free_r>
 8004164:	2300      	movs	r3, #0
 8004166:	6363      	str	r3, [r4, #52]	@ 0x34
 8004168:	2224      	movs	r2, #36	@ 0x24
 800416a:	89a3      	ldrh	r3, [r4, #12]
 800416c:	4393      	bics	r3, r2
 800416e:	81a3      	strh	r3, [r4, #12]
 8004170:	2300      	movs	r3, #0
 8004172:	6063      	str	r3, [r4, #4]
 8004174:	6923      	ldr	r3, [r4, #16]
 8004176:	6023      	str	r3, [r4, #0]
 8004178:	2308      	movs	r3, #8
 800417a:	89a2      	ldrh	r2, [r4, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	81a3      	strh	r3, [r4, #12]
 8004180:	6923      	ldr	r3, [r4, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10b      	bne.n	800419e <__swsetup_r+0x86>
 8004186:	21a0      	movs	r1, #160	@ 0xa0
 8004188:	2280      	movs	r2, #128	@ 0x80
 800418a:	89a3      	ldrh	r3, [r4, #12]
 800418c:	0089      	lsls	r1, r1, #2
 800418e:	0092      	lsls	r2, r2, #2
 8004190:	400b      	ands	r3, r1
 8004192:	4293      	cmp	r3, r2
 8004194:	d003      	beq.n	800419e <__swsetup_r+0x86>
 8004196:	0021      	movs	r1, r4
 8004198:	0028      	movs	r0, r5
 800419a:	f000 f863 	bl	8004264 <__smakebuf_r>
 800419e:	230c      	movs	r3, #12
 80041a0:	5ee2      	ldrsh	r2, [r4, r3]
 80041a2:	2101      	movs	r1, #1
 80041a4:	0013      	movs	r3, r2
 80041a6:	400b      	ands	r3, r1
 80041a8:	420a      	tst	r2, r1
 80041aa:	d00b      	beq.n	80041c4 <__swsetup_r+0xac>
 80041ac:	2300      	movs	r3, #0
 80041ae:	60a3      	str	r3, [r4, #8]
 80041b0:	6963      	ldr	r3, [r4, #20]
 80041b2:	425b      	negs	r3, r3
 80041b4:	61a3      	str	r3, [r4, #24]
 80041b6:	2000      	movs	r0, #0
 80041b8:	6923      	ldr	r3, [r4, #16]
 80041ba:	4283      	cmp	r3, r0
 80041bc:	d101      	bne.n	80041c2 <__swsetup_r+0xaa>
 80041be:	0613      	lsls	r3, r2, #24
 80041c0:	d4be      	bmi.n	8004140 <__swsetup_r+0x28>
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
 80041c4:	0791      	lsls	r1, r2, #30
 80041c6:	d400      	bmi.n	80041ca <__swsetup_r+0xb2>
 80041c8:	6963      	ldr	r3, [r4, #20]
 80041ca:	60a3      	str	r3, [r4, #8]
 80041cc:	e7f3      	b.n	80041b6 <__swsetup_r+0x9e>
 80041ce:	46c0      	nop			@ (mov r8, r8)
 80041d0:	20000030 	.word	0x20000030

080041d4 <_sbrk_r>:
 80041d4:	2300      	movs	r3, #0
 80041d6:	b570      	push	{r4, r5, r6, lr}
 80041d8:	4d06      	ldr	r5, [pc, #24]	@ (80041f4 <_sbrk_r+0x20>)
 80041da:	0004      	movs	r4, r0
 80041dc:	0008      	movs	r0, r1
 80041de:	602b      	str	r3, [r5, #0]
 80041e0:	f7fd f80e 	bl	8001200 <_sbrk>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d103      	bne.n	80041f0 <_sbrk_r+0x1c>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d000      	beq.n	80041f0 <_sbrk_r+0x1c>
 80041ee:	6023      	str	r3, [r4, #0]
 80041f0:	bd70      	pop	{r4, r5, r6, pc}
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	20000310 	.word	0x20000310

080041f8 <memchr>:
 80041f8:	b2c9      	uxtb	r1, r1
 80041fa:	1882      	adds	r2, r0, r2
 80041fc:	4290      	cmp	r0, r2
 80041fe:	d101      	bne.n	8004204 <memchr+0xc>
 8004200:	2000      	movs	r0, #0
 8004202:	4770      	bx	lr
 8004204:	7803      	ldrb	r3, [r0, #0]
 8004206:	428b      	cmp	r3, r1
 8004208:	d0fb      	beq.n	8004202 <memchr+0xa>
 800420a:	3001      	adds	r0, #1
 800420c:	e7f6      	b.n	80041fc <memchr+0x4>
	...

08004210 <__swhatbuf_r>:
 8004210:	b570      	push	{r4, r5, r6, lr}
 8004212:	000e      	movs	r6, r1
 8004214:	001d      	movs	r5, r3
 8004216:	230e      	movs	r3, #14
 8004218:	5ec9      	ldrsh	r1, [r1, r3]
 800421a:	0014      	movs	r4, r2
 800421c:	b096      	sub	sp, #88	@ 0x58
 800421e:	2900      	cmp	r1, #0
 8004220:	da0c      	bge.n	800423c <__swhatbuf_r+0x2c>
 8004222:	89b2      	ldrh	r2, [r6, #12]
 8004224:	2380      	movs	r3, #128	@ 0x80
 8004226:	0011      	movs	r1, r2
 8004228:	4019      	ands	r1, r3
 800422a:	421a      	tst	r2, r3
 800422c:	d114      	bne.n	8004258 <__swhatbuf_r+0x48>
 800422e:	2380      	movs	r3, #128	@ 0x80
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	2000      	movs	r0, #0
 8004234:	6029      	str	r1, [r5, #0]
 8004236:	6023      	str	r3, [r4, #0]
 8004238:	b016      	add	sp, #88	@ 0x58
 800423a:	bd70      	pop	{r4, r5, r6, pc}
 800423c:	466a      	mov	r2, sp
 800423e:	f000 f853 	bl	80042e8 <_fstat_r>
 8004242:	2800      	cmp	r0, #0
 8004244:	dbed      	blt.n	8004222 <__swhatbuf_r+0x12>
 8004246:	23f0      	movs	r3, #240	@ 0xf0
 8004248:	9901      	ldr	r1, [sp, #4]
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	4019      	ands	r1, r3
 800424e:	4b04      	ldr	r3, [pc, #16]	@ (8004260 <__swhatbuf_r+0x50>)
 8004250:	18c9      	adds	r1, r1, r3
 8004252:	424b      	negs	r3, r1
 8004254:	4159      	adcs	r1, r3
 8004256:	e7ea      	b.n	800422e <__swhatbuf_r+0x1e>
 8004258:	2100      	movs	r1, #0
 800425a:	2340      	movs	r3, #64	@ 0x40
 800425c:	e7e9      	b.n	8004232 <__swhatbuf_r+0x22>
 800425e:	46c0      	nop			@ (mov r8, r8)
 8004260:	ffffe000 	.word	0xffffe000

08004264 <__smakebuf_r>:
 8004264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004266:	2602      	movs	r6, #2
 8004268:	898b      	ldrh	r3, [r1, #12]
 800426a:	0005      	movs	r5, r0
 800426c:	000c      	movs	r4, r1
 800426e:	b085      	sub	sp, #20
 8004270:	4233      	tst	r3, r6
 8004272:	d007      	beq.n	8004284 <__smakebuf_r+0x20>
 8004274:	0023      	movs	r3, r4
 8004276:	3347      	adds	r3, #71	@ 0x47
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	6123      	str	r3, [r4, #16]
 800427c:	2301      	movs	r3, #1
 800427e:	6163      	str	r3, [r4, #20]
 8004280:	b005      	add	sp, #20
 8004282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004284:	ab03      	add	r3, sp, #12
 8004286:	aa02      	add	r2, sp, #8
 8004288:	f7ff ffc2 	bl	8004210 <__swhatbuf_r>
 800428c:	9f02      	ldr	r7, [sp, #8]
 800428e:	9001      	str	r0, [sp, #4]
 8004290:	0039      	movs	r1, r7
 8004292:	0028      	movs	r0, r5
 8004294:	f7ff fafa 	bl	800388c <_malloc_r>
 8004298:	2800      	cmp	r0, #0
 800429a:	d108      	bne.n	80042ae <__smakebuf_r+0x4a>
 800429c:	220c      	movs	r2, #12
 800429e:	5ea3      	ldrsh	r3, [r4, r2]
 80042a0:	059a      	lsls	r2, r3, #22
 80042a2:	d4ed      	bmi.n	8004280 <__smakebuf_r+0x1c>
 80042a4:	2203      	movs	r2, #3
 80042a6:	4393      	bics	r3, r2
 80042a8:	431e      	orrs	r6, r3
 80042aa:	81a6      	strh	r6, [r4, #12]
 80042ac:	e7e2      	b.n	8004274 <__smakebuf_r+0x10>
 80042ae:	2380      	movs	r3, #128	@ 0x80
 80042b0:	89a2      	ldrh	r2, [r4, #12]
 80042b2:	6020      	str	r0, [r4, #0]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	81a3      	strh	r3, [r4, #12]
 80042b8:	9b03      	ldr	r3, [sp, #12]
 80042ba:	6120      	str	r0, [r4, #16]
 80042bc:	6167      	str	r7, [r4, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00c      	beq.n	80042dc <__smakebuf_r+0x78>
 80042c2:	0028      	movs	r0, r5
 80042c4:	230e      	movs	r3, #14
 80042c6:	5ee1      	ldrsh	r1, [r4, r3]
 80042c8:	f000 f820 	bl	800430c <_isatty_r>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d005      	beq.n	80042dc <__smakebuf_r+0x78>
 80042d0:	2303      	movs	r3, #3
 80042d2:	89a2      	ldrh	r2, [r4, #12]
 80042d4:	439a      	bics	r2, r3
 80042d6:	3b02      	subs	r3, #2
 80042d8:	4313      	orrs	r3, r2
 80042da:	81a3      	strh	r3, [r4, #12]
 80042dc:	89a3      	ldrh	r3, [r4, #12]
 80042de:	9a01      	ldr	r2, [sp, #4]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	81a3      	strh	r3, [r4, #12]
 80042e4:	e7cc      	b.n	8004280 <__smakebuf_r+0x1c>
	...

080042e8 <_fstat_r>:
 80042e8:	2300      	movs	r3, #0
 80042ea:	b570      	push	{r4, r5, r6, lr}
 80042ec:	4d06      	ldr	r5, [pc, #24]	@ (8004308 <_fstat_r+0x20>)
 80042ee:	0004      	movs	r4, r0
 80042f0:	0008      	movs	r0, r1
 80042f2:	0011      	movs	r1, r2
 80042f4:	602b      	str	r3, [r5, #0]
 80042f6:	f7fc ff60 	bl	80011ba <_fstat>
 80042fa:	1c43      	adds	r3, r0, #1
 80042fc:	d103      	bne.n	8004306 <_fstat_r+0x1e>
 80042fe:	682b      	ldr	r3, [r5, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d000      	beq.n	8004306 <_fstat_r+0x1e>
 8004304:	6023      	str	r3, [r4, #0]
 8004306:	bd70      	pop	{r4, r5, r6, pc}
 8004308:	20000310 	.word	0x20000310

0800430c <_isatty_r>:
 800430c:	2300      	movs	r3, #0
 800430e:	b570      	push	{r4, r5, r6, lr}
 8004310:	4d06      	ldr	r5, [pc, #24]	@ (800432c <_isatty_r+0x20>)
 8004312:	0004      	movs	r4, r0
 8004314:	0008      	movs	r0, r1
 8004316:	602b      	str	r3, [r5, #0]
 8004318:	f7fc ff5d 	bl	80011d6 <_isatty>
 800431c:	1c43      	adds	r3, r0, #1
 800431e:	d103      	bne.n	8004328 <_isatty_r+0x1c>
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d000      	beq.n	8004328 <_isatty_r+0x1c>
 8004326:	6023      	str	r3, [r4, #0]
 8004328:	bd70      	pop	{r4, r5, r6, pc}
 800432a:	46c0      	nop			@ (mov r8, r8)
 800432c:	20000310 	.word	0x20000310

08004330 <_init>:
 8004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004332:	46c0      	nop			@ (mov r8, r8)
 8004334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004336:	bc08      	pop	{r3}
 8004338:	469e      	mov	lr, r3
 800433a:	4770      	bx	lr

0800433c <_fini>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	46c0      	nop			@ (mov r8, r8)
 8004340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004342:	bc08      	pop	{r3}
 8004344:	469e      	mov	lr, r3
 8004346:	4770      	bx	lr
