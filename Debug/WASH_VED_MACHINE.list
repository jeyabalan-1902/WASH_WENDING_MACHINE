
WASH_VED_MACHINE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  080044a0  080044a0  000054a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004674  08004674  0000607c  2**0
                  CONTENTS
  4 .ARM          00000000  08004674  08004674  0000607c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004674  08004674  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004674  08004674  00005674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004678  08004678  00005678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800467c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000007c  080046f8  0000607c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  080046f8  00006320  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcdf  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000200d  00000000  00000000  00013d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00015d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8d  00000000  00000000  00016b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012406  00000000  00000000  00017595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001076d  00000000  00000000  0002999b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b043  00000000  00000000  0003a108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a514b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f0  00000000  00000000  000a5190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000a8980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004488 	.word	0x08004488

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08004488 	.word	0x08004488

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <Delay_us>:
#define DATA_HIGH() HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET)
#define DATA_LOW()  HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);


void Delay_us (int time)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<time; i++)
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	e00c      	b.n	8000430 <Delay_us+0x28>
	{
		for (int j=0; j<7; j++)
 8000416:	2300      	movs	r3, #0
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	e003      	b.n	8000424 <Delay_us+0x1c>
		{
			__asm__("nop");
 800041c:	46c0      	nop			@ (mov r8, r8)
		for (int j=0; j<7; j++)
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	3301      	adds	r3, #1
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	2b06      	cmp	r3, #6
 8000428:	ddf8      	ble.n	800041c <Delay_us+0x14>
	for (int i=0; i<time; i++)
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	3301      	adds	r3, #1
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fa      	ldr	r2, [r7, #12]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	429a      	cmp	r2, r3
 8000436:	dbee      	blt.n	8000416 <Delay_us+0xe>
		}
	}
}
 8000438:	46c0      	nop			@ (mov r8, r8)
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b004      	add	sp, #16
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <start>:

void start (void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0

	CLK_HIGH();
 8000448:	2380      	movs	r3, #128	@ 0x80
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	480c      	ldr	r0, [pc, #48]	@ (8000480 <start+0x3c>)
 800044e:	2201      	movs	r2, #1
 8000450:	0019      	movs	r1, r3
 8000452:	f001 fc93 	bl	8001d7c <HAL_GPIO_WritePin>
	DATA_HIGH();
 8000456:	2380      	movs	r3, #128	@ 0x80
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	4809      	ldr	r0, [pc, #36]	@ (8000480 <start+0x3c>)
 800045c:	2201      	movs	r2, #1
 800045e:	0019      	movs	r1, r3
 8000460:	f001 fc8c 	bl	8001d7c <HAL_GPIO_WritePin>
	Delay_us (2);
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff ffcf 	bl	8000408 <Delay_us>
	DATA_LOW();
 800046a:	2380      	movs	r3, #128	@ 0x80
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	4804      	ldr	r0, [pc, #16]	@ (8000480 <start+0x3c>)
 8000470:	2200      	movs	r2, #0
 8000472:	0019      	movs	r1, r3
 8000474:	f001 fc82 	bl	8001d7c <HAL_GPIO_WritePin>
}
 8000478:	46c0      	nop			@ (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	48000400 	.word	0x48000400

08000484 <stop>:

void stop (void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	CLK_LOW();
 8000488:	2380      	movs	r3, #128	@ 0x80
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	4812      	ldr	r0, [pc, #72]	@ (80004d8 <stop+0x54>)
 800048e:	2200      	movs	r2, #0
 8000490:	0019      	movs	r1, r3
 8000492:	f001 fc73 	bl	8001d7c <HAL_GPIO_WritePin>
	Delay_us (2);
 8000496:	2002      	movs	r0, #2
 8000498:	f7ff ffb6 	bl	8000408 <Delay_us>
	DATA_LOW();
 800049c:	2380      	movs	r3, #128	@ 0x80
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	480d      	ldr	r0, [pc, #52]	@ (80004d8 <stop+0x54>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	0019      	movs	r1, r3
 80004a6:	f001 fc69 	bl	8001d7c <HAL_GPIO_WritePin>
	Delay_us (2);
 80004aa:	2002      	movs	r0, #2
 80004ac:	f7ff ffac 	bl	8000408 <Delay_us>
	CLK_HIGH();
 80004b0:	2380      	movs	r3, #128	@ 0x80
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	4808      	ldr	r0, [pc, #32]	@ (80004d8 <stop+0x54>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	0019      	movs	r1, r3
 80004ba:	f001 fc5f 	bl	8001d7c <HAL_GPIO_WritePin>
	Delay_us (2);
 80004be:	2002      	movs	r0, #2
 80004c0:	f7ff ffa2 	bl	8000408 <Delay_us>
	DATA_HIGH();
 80004c4:	2380      	movs	r3, #128	@ 0x80
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	4803      	ldr	r0, [pc, #12]	@ (80004d8 <stop+0x54>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	0019      	movs	r1, r3
 80004ce:	f001 fc55 	bl	8001d7c <HAL_GPIO_WritePin>
}
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	48000400 	.word	0x48000400

080004dc <waitforAck>:

void waitforAck (void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	CLK_LOW();
 80004e0:	2380      	movs	r3, #128	@ 0x80
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	480d      	ldr	r0, [pc, #52]	@ (800051c <waitforAck+0x40>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	0019      	movs	r1, r3
 80004ea:	f001 fc47 	bl	8001d7c <HAL_GPIO_WritePin>
	Delay_us (5); // After the falling edge of the eighth clock delay 5us
 80004ee:	2005      	movs	r0, #5
 80004f0:	f7ff ff8a 	bl	8000408 <Delay_us>
	              // ACK signals the beginning of judgment
//	while (dio);  // Check the state of the Data pin
	CLK_HIGH();
 80004f4:	2380      	movs	r3, #128	@ 0x80
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	4808      	ldr	r0, [pc, #32]	@ (800051c <waitforAck+0x40>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	0019      	movs	r1, r3
 80004fe:	f001 fc3d 	bl	8001d7c <HAL_GPIO_WritePin>
	Delay_us (2);
 8000502:	2002      	movs	r0, #2
 8000504:	f7ff ff80 	bl	8000408 <Delay_us>
	CLK_LOW();
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	4803      	ldr	r0, [pc, #12]	@ (800051c <waitforAck+0x40>)
 800050e:	2200      	movs	r2, #0
 8000510:	0019      	movs	r1, r3
 8000512:	f001 fc33 	bl	8001d7c <HAL_GPIO_WritePin>
}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	48000400 	.word	0x48000400

08000520 <writeByte>:

void writeByte (uint8_t byte)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	0002      	movs	r2, r0
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	701a      	strb	r2, [r3, #0]
	int i;
	for (i = 0; i<8; i++)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e02f      	b.n	8000592 <writeByte+0x72>
	{
		CLK_LOW();
 8000532:	2380      	movs	r3, #128	@ 0x80
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	481b      	ldr	r0, [pc, #108]	@ (80005a4 <writeByte+0x84>)
 8000538:	2200      	movs	r2, #0
 800053a:	0019      	movs	r1, r3
 800053c:	f001 fc1e 	bl	8001d7c <HAL_GPIO_WritePin>
		if (byte & 0x01) // low front
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2201      	movs	r2, #1
 8000546:	4013      	ands	r3, r2
 8000548:	d007      	beq.n	800055a <writeByte+0x3a>
		{
			DATA_HIGH();
 800054a:	2380      	movs	r3, #128	@ 0x80
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	4815      	ldr	r0, [pc, #84]	@ (80005a4 <writeByte+0x84>)
 8000550:	2201      	movs	r2, #1
 8000552:	0019      	movs	r1, r3
 8000554:	f001 fc12 	bl	8001d7c <HAL_GPIO_WritePin>
 8000558:	e006      	b.n	8000568 <writeByte+0x48>
		}
		else
		{
			DATA_LOW();
 800055a:	2380      	movs	r3, #128	@ 0x80
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4811      	ldr	r0, [pc, #68]	@ (80005a4 <writeByte+0x84>)
 8000560:	2200      	movs	r2, #0
 8000562:	0019      	movs	r1, r3
 8000564:	f001 fc0a 	bl	8001d7c <HAL_GPIO_WritePin>
		}
		Delay_us (3);
 8000568:	2003      	movs	r0, #3
 800056a:	f7ff ff4d 	bl	8000408 <Delay_us>
		byte = byte >> 1;
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	1dfa      	adds	r2, r7, #7
 8000572:	7812      	ldrb	r2, [r2, #0]
 8000574:	0852      	lsrs	r2, r2, #1
 8000576:	701a      	strb	r2, [r3, #0]
		CLK_HIGH();
 8000578:	2380      	movs	r3, #128	@ 0x80
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	4809      	ldr	r0, [pc, #36]	@ (80005a4 <writeByte+0x84>)
 800057e:	2201      	movs	r2, #1
 8000580:	0019      	movs	r1, r3
 8000582:	f001 fbfb 	bl	8001d7c <HAL_GPIO_WritePin>
		Delay_us (3);
 8000586:	2003      	movs	r0, #3
 8000588:	f7ff ff3e 	bl	8000408 <Delay_us>
	for (i = 0; i<8; i++)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3301      	adds	r3, #1
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2b07      	cmp	r3, #7
 8000596:	ddcc      	ble.n	8000532 <writeByte+0x12>
	}
}
 8000598:	46c0      	nop			@ (mov r8, r8)
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b004      	add	sp, #16
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	48000400 	.word	0x48000400

080005a8 <TM1637_WriteData>:

void TM1637_WriteData (uint8_t Addr, uint8_t *data, int size)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b087      	sub	sp, #28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60b9      	str	r1, [r7, #8]
 80005b0:	607a      	str	r2, [r7, #4]
 80005b2:	240f      	movs	r4, #15
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	1c02      	adds	r2, r0, #0
 80005b8:	701a      	strb	r2, [r3, #0]
	start();
 80005ba:	f7ff ff43 	bl	8000444 <start>
	writeByte(0x40);
 80005be:	2040      	movs	r0, #64	@ 0x40
 80005c0:	f7ff ffae 	bl	8000520 <writeByte>
	waitforAck();
 80005c4:	f7ff ff8a 	bl	80004dc <waitforAck>
	stop();
 80005c8:	f7ff ff5c 	bl	8000484 <stop>

	start();
 80005cc:	f7ff ff3a 	bl	8000444 <start>
	writeByte(Addr);
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	0018      	movs	r0, r3
 80005d6:	f7ff ffa3 	bl	8000520 <writeByte>
	waitforAck();
 80005da:	f7ff ff7f 	bl	80004dc <waitforAck>
	for (int i=0; i<size; i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	e00b      	b.n	80005fc <TM1637_WriteData+0x54>
	{
		writeByte(data[i]);
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	18d3      	adds	r3, r2, r3
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	0018      	movs	r0, r3
 80005ee:	f7ff ff97 	bl	8000520 <writeByte>
		waitforAck();
 80005f2:	f7ff ff73 	bl	80004dc <waitforAck>
	for (int i=0; i<size; i++)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	dbef      	blt.n	80005e4 <TM1637_WriteData+0x3c>
	}
	stop();
 8000604:	f7ff ff3e 	bl	8000484 <stop>

	start();
 8000608:	f7ff ff1c 	bl	8000444 <start>
	writeByte(0x8A);
 800060c:	208a      	movs	r0, #138	@ 0x8a
 800060e:	f7ff ff87 	bl	8000520 <writeByte>
	waitforAck();
 8000612:	f7ff ff63 	bl	80004dc <waitforAck>
	stop();
 8000616:	f7ff ff35 	bl	8000484 <stop>
}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b007      	add	sp, #28
 8000620:	bd90      	pop	{r4, r7, pc}
	...

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 fe9c 	bl	8001364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f966 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 fa7a 	bl	8000b28 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000634:	f000 fa48 	bl	8000ac8 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000638:	f000 f9c8 	bl	80009cc <MX_ADC_Init>
  MX_TIM6_Init();
 800063c:	f000 fa22 	bl	8000a84 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  printf("system start\n\r");
 8000640:	4b9c      	ldr	r3, [pc, #624]	@ (80008b4 <main+0x290>)
 8000642:	0018      	movs	r0, r3
 8000644:	f003 f822 	bl	800368c <iprintf>
  state = 0;
 8000648:	4b9b      	ldr	r3, [pc, #620]	@ (80008b8 <main+0x294>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
  task_start_time = 0;
 800064e:	4b9b      	ldr	r3, [pc, #620]	@ (80008bc <main+0x298>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (state)
 8000654:	4b98      	ldr	r3, [pc, #608]	@ (80008b8 <main+0x294>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b06      	cmp	r3, #6
 800065a:	d900      	bls.n	800065e <main+0x3a>
 800065c:	e11c      	b.n	8000898 <main+0x274>
 800065e:	009a      	lsls	r2, r3, #2
 8000660:	4b97      	ldr	r3, [pc, #604]	@ (80008c0 <main+0x29c>)
 8000662:	18d3      	adds	r3, r2, r3
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	469f      	mov	pc, r3
	  {
		  case 0:
			  DisplayDashes();
 8000668:	f000 fc10 	bl	8000e8c <DisplayDashes>
			  processPulse();
 800066c:	f000 faf0 	bl	8000c50 <processPulse>
			  break;
 8000670:	e11f      	b.n	80008b2 <main+0x28e>

		  case 1:

			  if (!initial_display_done)
 8000672:	4b94      	ldr	r3, [pc, #592]	@ (80008c4 <main+0x2a0>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d10c      	bne.n	8000694 <main+0x70>
			  {
				  Display_fifty();
 800067a:	f000 fbbf 	bl	8000dfc <Display_fifty>
				  task_start_time = HAL_GetTick();
 800067e:	f000 fecb 	bl	8001418 <HAL_GetTick>
 8000682:	0002      	movs	r2, r0
 8000684:	4b8d      	ldr	r3, [pc, #564]	@ (80008bc <main+0x298>)
 8000686:	601a      	str	r2, [r3, #0]
				  initial_display_done = 1;
 8000688:	4b8e      	ldr	r3, [pc, #568]	@ (80008c4 <main+0x2a0>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
				  countdown_seconds = 20;
 800068e:	4b8e      	ldr	r3, [pc, #568]	@ (80008c8 <main+0x2a4>)
 8000690:	2214      	movs	r2, #20
 8000692:	601a      	str	r2, [r3, #0]
			  }

			  if (HAL_GetTick() - task_start_time >= 2000)
 8000694:	f000 fec0 	bl	8001418 <HAL_GetTick>
 8000698:	0002      	movs	r2, r0
 800069a:	4b88      	ldr	r3, [pc, #544]	@ (80008bc <main+0x298>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1ad2      	subs	r2, r2, r3
 80006a0:	23fa      	movs	r3, #250	@ 0xfa
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d200      	bcs.n	80006aa <main+0x86>
 80006a8:	e0fa      	b.n	80008a0 <main+0x27c>
			  {
				  HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_SET);
 80006aa:	2380      	movs	r3, #128	@ 0x80
 80006ac:	011b      	lsls	r3, r3, #4
 80006ae:	4887      	ldr	r0, [pc, #540]	@ (80008cc <main+0x2a8>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	0019      	movs	r1, r3
 80006b4:	f001 fb62 	bl	8001d7c <HAL_GPIO_WritePin>
				  //printf("20 sec countdown starts....\n\r");
				  if (HAL_GetTick() - task_start_time < 23000)
 80006b8:	f000 feae 	bl	8001418 <HAL_GetTick>
 80006bc:	0002      	movs	r2, r0
 80006be:	4b7f      	ldr	r3, [pc, #508]	@ (80008bc <main+0x298>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	4a82      	ldr	r2, [pc, #520]	@ (80008d0 <main+0x2ac>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d802      	bhi.n	80006d0 <main+0xac>
				  {
					  TM1637_Countdown_20Sec();
 80006ca:	f000 fb15 	bl	8000cf8 <TM1637_Countdown_20Sec>
					      coin_pulse = 0;
					      initial_display_done = 0;
					  }
				  }
			  }
			  break;
 80006ce:	e0e7      	b.n	80008a0 <main+0x27c>
					  if (countdown_seconds == 0)
 80006d0:	4b7d      	ldr	r3, [pc, #500]	@ (80008c8 <main+0x2a4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d000      	beq.n	80006da <main+0xb6>
 80006d8:	e0e2      	b.n	80008a0 <main+0x27c>
					      printf("20 sec countdown completed\n");
 80006da:	4b7e      	ldr	r3, [pc, #504]	@ (80008d4 <main+0x2b0>)
 80006dc:	0018      	movs	r0, r3
 80006de:	f003 f83b 	bl	8003758 <puts>
					      HAL_GPIO_WritePin(REL_SIG_1_GPIO_Port, REL_SIG_1_Pin, GPIO_PIN_RESET);
 80006e2:	2380      	movs	r3, #128	@ 0x80
 80006e4:	011b      	lsls	r3, r3, #4
 80006e6:	4879      	ldr	r0, [pc, #484]	@ (80008cc <main+0x2a8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	0019      	movs	r1, r3
 80006ec:	f001 fb46 	bl	8001d7c <HAL_GPIO_WritePin>
					      printf("return to IDLE\n\r");
 80006f0:	4b79      	ldr	r3, [pc, #484]	@ (80008d8 <main+0x2b4>)
 80006f2:	0018      	movs	r0, r3
 80006f4:	f002 ffca 	bl	800368c <iprintf>
					      state = 0;
 80006f8:	4b6f      	ldr	r3, [pc, #444]	@ (80008b8 <main+0x294>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
					      coin_pulse = 0;
 80006fe:	4b77      	ldr	r3, [pc, #476]	@ (80008dc <main+0x2b8>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
					      initial_display_done = 0;
 8000704:	4b6f      	ldr	r3, [pc, #444]	@ (80008c4 <main+0x2a0>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
			  break;
 800070a:	e0c9      	b.n	80008a0 <main+0x27c>

		  case 2:
			  if (!initial_display_done)
 800070c:	4b6d      	ldr	r3, [pc, #436]	@ (80008c4 <main+0x2a0>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d10c      	bne.n	800072e <main+0x10a>
			  {
				  Display_1dhiram();
 8000714:	f000 fb96 	bl	8000e44 <Display_1dhiram>
				  task_start_time = HAL_GetTick();
 8000718:	f000 fe7e 	bl	8001418 <HAL_GetTick>
 800071c:	0002      	movs	r2, r0
 800071e:	4b67      	ldr	r3, [pc, #412]	@ (80008bc <main+0x298>)
 8000720:	601a      	str	r2, [r3, #0]
				  initial_display_done = 1;
 8000722:	4b68      	ldr	r3, [pc, #416]	@ (80008c4 <main+0x2a0>)
 8000724:	2201      	movs	r2, #1
 8000726:	701a      	strb	r2, [r3, #0]
				  countdown_seconds = 20;
 8000728:	4b67      	ldr	r3, [pc, #412]	@ (80008c8 <main+0x2a4>)
 800072a:	2214      	movs	r2, #20
 800072c:	601a      	str	r2, [r3, #0]
			  }
			  if (HAL_GetTick() - task_start_time >= 2000)
 800072e:	f000 fe73 	bl	8001418 <HAL_GetTick>
 8000732:	0002      	movs	r2, r0
 8000734:	4b61      	ldr	r3, [pc, #388]	@ (80008bc <main+0x298>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	1ad2      	subs	r2, r2, r3
 800073a:	23fa      	movs	r3, #250	@ 0xfa
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	429a      	cmp	r2, r3
 8000740:	d200      	bcs.n	8000744 <main+0x120>
 8000742:	e0af      	b.n	80008a4 <main+0x280>
			  {
				  state = 3;
 8000744:	4b5c      	ldr	r3, [pc, #368]	@ (80008b8 <main+0x294>)
 8000746:	2203      	movs	r2, #3
 8000748:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 800074a:	e0ab      	b.n	80008a4 <main+0x280>

		  case 3:
			  if (HAL_GetTick() - task_start_time < 23000)
 800074c:	f000 fe64 	bl	8001418 <HAL_GetTick>
 8000750:	0002      	movs	r2, r0
 8000752:	4b5a      	ldr	r3, [pc, #360]	@ (80008bc <main+0x298>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	4a5d      	ldr	r2, [pc, #372]	@ (80008d0 <main+0x2ac>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d802      	bhi.n	8000764 <main+0x140>
			  {
				  TM1637_Countdown_20Sec();
 800075e:	f000 facb 	bl	8000cf8 <TM1637_Countdown_20Sec>
					  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_SET);
					  task_start_time = HAL_GetTick();
					  state = 4;
				  }
			  }
			  break;
 8000762:	e0a1      	b.n	80008a8 <main+0x284>
				  if(countdown_seconds == 0)
 8000764:	4b58      	ldr	r3, [pc, #352]	@ (80008c8 <main+0x2a4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d000      	beq.n	800076e <main+0x14a>
 800076c:	e09c      	b.n	80008a8 <main+0x284>
					  printf("GPIO 3 5 6 enabled\n\r");
 800076e:	4b5c      	ldr	r3, [pc, #368]	@ (80008e0 <main+0x2bc>)
 8000770:	0018      	movs	r0, r3
 8000772:	f002 ff8b 	bl	800368c <iprintf>
					  HAL_GPIO_WritePin(SIGNAL_3_GPIO_Port, SIGNAL_3_Pin, GPIO_PIN_SET);
 8000776:	2390      	movs	r3, #144	@ 0x90
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	2201      	movs	r2, #1
 800077c:	2104      	movs	r1, #4
 800077e:	0018      	movs	r0, r3
 8000780:	f001 fafc 	bl	8001d7c <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_SET);
 8000784:	2390      	movs	r3, #144	@ 0x90
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	2201      	movs	r2, #1
 800078a:	2110      	movs	r1, #16
 800078c:	0018      	movs	r0, r3
 800078e:	f001 faf5 	bl	8001d7c <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_SET);
 8000792:	2390      	movs	r3, #144	@ 0x90
 8000794:	05db      	lsls	r3, r3, #23
 8000796:	2201      	movs	r2, #1
 8000798:	2140      	movs	r1, #64	@ 0x40
 800079a:	0018      	movs	r0, r3
 800079c:	f001 faee 	bl	8001d7c <HAL_GPIO_WritePin>
					  task_start_time = HAL_GetTick();
 80007a0:	f000 fe3a 	bl	8001418 <HAL_GetTick>
 80007a4:	0002      	movs	r2, r0
 80007a6:	4b45      	ldr	r3, [pc, #276]	@ (80008bc <main+0x298>)
 80007a8:	601a      	str	r2, [r3, #0]
					  state = 4;
 80007aa:	4b43      	ldr	r3, [pc, #268]	@ (80008b8 <main+0x294>)
 80007ac:	2204      	movs	r2, #4
 80007ae:	701a      	strb	r2, [r3, #0]
			  break;
 80007b0:	e07a      	b.n	80008a8 <main+0x284>

		  case 4:
			  if (HAL_GetTick() - task_start_time >= 30000)
 80007b2:	f000 fe31 	bl	8001418 <HAL_GetTick>
 80007b6:	0002      	movs	r2, r0
 80007b8:	4b40      	ldr	r3, [pc, #256]	@ (80008bc <main+0x298>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	4a49      	ldr	r2, [pc, #292]	@ (80008e4 <main+0x2c0>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d973      	bls.n	80008ac <main+0x288>
			  {
				  printf("GPIO 3 5 6 disabled\n\r");
 80007c4:	4b48      	ldr	r3, [pc, #288]	@ (80008e8 <main+0x2c4>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f002 ff60 	bl	800368c <iprintf>
				  HAL_GPIO_WritePin(SIGNAL_3_GPIO_Port, SIGNAL_3_Pin, GPIO_PIN_RESET);
 80007cc:	2390      	movs	r3, #144	@ 0x90
 80007ce:	05db      	lsls	r3, r3, #23
 80007d0:	2200      	movs	r2, #0
 80007d2:	2104      	movs	r1, #4
 80007d4:	0018      	movs	r0, r3
 80007d6:	f001 fad1 	bl	8001d7c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_RESET);
 80007da:	2390      	movs	r3, #144	@ 0x90
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2200      	movs	r2, #0
 80007e0:	2110      	movs	r1, #16
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 faca 	bl	8001d7c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(SIGNAL_7_GPIO_Port, SIGNAL_7_Pin, GPIO_PIN_RESET);
 80007e8:	2390      	movs	r3, #144	@ 0x90
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	2200      	movs	r2, #0
 80007ee:	2140      	movs	r1, #64	@ 0x40
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 fac3 	bl	8001d7c <HAL_GPIO_WritePin>
				  task_start_time = HAL_GetTick(); // Record the start time for the next state
 80007f6:	f000 fe0f 	bl	8001418 <HAL_GetTick>
 80007fa:	0002      	movs	r2, r0
 80007fc:	4b2f      	ldr	r3, [pc, #188]	@ (80008bc <main+0x298>)
 80007fe:	601a      	str	r2, [r3, #0]
				  state = 5;
 8000800:	4b2d      	ldr	r3, [pc, #180]	@ (80008b8 <main+0x294>)
 8000802:	2205      	movs	r2, #5
 8000804:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000806:	e051      	b.n	80008ac <main+0x288>

		  case 5:
			  printf("GPIO A & B enabled\n\r");
 8000808:	4b38      	ldr	r3, [pc, #224]	@ (80008ec <main+0x2c8>)
 800080a:	0018      	movs	r0, r3
 800080c:	f002 ff3e 	bl	800368c <iprintf>
			  HAL_GPIO_WritePin(SIGNAL_A_GPIO_Port, SIGNAL_A_Pin, GPIO_PIN_SET);
 8000810:	4b2e      	ldr	r3, [pc, #184]	@ (80008cc <main+0x2a8>)
 8000812:	2201      	movs	r2, #1
 8000814:	2102      	movs	r1, #2
 8000816:	0018      	movs	r0, r3
 8000818:	f001 fab0 	bl	8001d7c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SIGNAL_B_GPIO_Port, SIGNAL_B_Pin, GPIO_PIN_SET);
 800081c:	2380      	movs	r3, #128	@ 0x80
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	482a      	ldr	r0, [pc, #168]	@ (80008cc <main+0x2a8>)
 8000822:	2201      	movs	r2, #1
 8000824:	0019      	movs	r1, r3
 8000826:	f001 faa9 	bl	8001d7c <HAL_GPIO_WritePin>
			  HAL_Delay(5000);
 800082a:	4b31      	ldr	r3, [pc, #196]	@ (80008f0 <main+0x2cc>)
 800082c:	0018      	movs	r0, r3
 800082e:	f000 fdfd 	bl	800142c <HAL_Delay>
			  printf("GPIO A & B disabled\n\r");
 8000832:	4b30      	ldr	r3, [pc, #192]	@ (80008f4 <main+0x2d0>)
 8000834:	0018      	movs	r0, r3
 8000836:	f002 ff29 	bl	800368c <iprintf>
			  HAL_GPIO_WritePin(SIGNAL_A_GPIO_Port, SIGNAL_A_Pin, GPIO_PIN_RESET);
 800083a:	4b24      	ldr	r3, [pc, #144]	@ (80008cc <main+0x2a8>)
 800083c:	2200      	movs	r2, #0
 800083e:	2102      	movs	r1, #2
 8000840:	0018      	movs	r0, r3
 8000842:	f001 fa9b 	bl	8001d7c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SIGNAL_B_GPIO_Port, SIGNAL_B_Pin, GPIO_PIN_RESET);
 8000846:	2380      	movs	r3, #128	@ 0x80
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	4820      	ldr	r0, [pc, #128]	@ (80008cc <main+0x2a8>)
 800084c:	2200      	movs	r2, #0
 800084e:	0019      	movs	r1, r3
 8000850:	f001 fa94 	bl	8001d7c <HAL_GPIO_WritePin>
			  task_start_time = HAL_GetTick();
 8000854:	f000 fde0 	bl	8001418 <HAL_GetTick>
 8000858:	0002      	movs	r2, r0
 800085a:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <main+0x298>)
 800085c:	601a      	str	r2, [r3, #0]
			  state = 6;
 800085e:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <main+0x294>)
 8000860:	2206      	movs	r2, #6
 8000862:	701a      	strb	r2, [r3, #0]
			  break;
 8000864:	e025      	b.n	80008b2 <main+0x28e>

		  case 6:
			  TM1637_DisplayClear();
 8000866:	f000 fb45 	bl	8000ef4 <TM1637_DisplayClear>
			  if (HAL_GetTick() - task_start_time >= 90000)
 800086a:	f000 fdd5 	bl	8001418 <HAL_GetTick>
 800086e:	0002      	movs	r2, r0
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <main+0x298>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	4a20      	ldr	r2, [pc, #128]	@ (80008f8 <main+0x2d4>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d919      	bls.n	80008b0 <main+0x28c>
			  {
				  printf("return to IDLE\n\r");
 800087c:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <main+0x2b4>)
 800087e:	0018      	movs	r0, r3
 8000880:	f002 ff04 	bl	800368c <iprintf>
				  state = 0;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <main+0x294>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
				  coin_pulse = 0;
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <main+0x2b8>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
				  initial_display_done = 0;
 8000890:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <main+0x2a0>)
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]

			  }
			  break;
 8000896:	e00b      	b.n	80008b0 <main+0x28c>

		  default:
			  state = 0;
 8000898:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <main+0x294>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
			  break;
 800089e:	e008      	b.n	80008b2 <main+0x28e>
			  break;
 80008a0:	46c0      	nop			@ (mov r8, r8)
 80008a2:	e6d7      	b.n	8000654 <main+0x30>
			  break;
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	e6d5      	b.n	8000654 <main+0x30>
			  break;
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	e6d3      	b.n	8000654 <main+0x30>
			  break;
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	e6d1      	b.n	8000654 <main+0x30>
			  break;
 80008b0:	46c0      	nop			@ (mov r8, r8)
	  switch (state)
 80008b2:	e6cf      	b.n	8000654 <main+0x30>
 80008b4:	080044a0 	.word	0x080044a0
 80008b8:	200001b5 	.word	0x200001b5
 80008bc:	200001b8 	.word	0x200001b8
 80008c0:	080045ec 	.word	0x080045ec
 80008c4:	200001a8 	.word	0x200001a8
 80008c8:	200001bc 	.word	0x200001bc
 80008cc:	48000400 	.word	0x48000400
 80008d0:	000059d7 	.word	0x000059d7
 80008d4:	080044b0 	.word	0x080044b0
 80008d8:	080044cc 	.word	0x080044cc
 80008dc:	200001b4 	.word	0x200001b4
 80008e0:	080044e0 	.word	0x080044e0
 80008e4:	0000752f 	.word	0x0000752f
 80008e8:	080044f8 	.word	0x080044f8
 80008ec:	08004510 	.word	0x08004510
 80008f0:	00001388 	.word	0x00001388
 80008f4:	08004528 	.word	0x08004528
 80008f8:	00015f8f 	.word	0x00015f8f

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b095      	sub	sp, #84	@ 0x54
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	2420      	movs	r4, #32
 8000904:	193b      	adds	r3, r7, r4
 8000906:	0018      	movs	r0, r3
 8000908:	2330      	movs	r3, #48	@ 0x30
 800090a:	001a      	movs	r2, r3
 800090c:	2100      	movs	r1, #0
 800090e:	f003 f819 	bl	8003944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000912:	2310      	movs	r3, #16
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	0018      	movs	r0, r3
 8000918:	2310      	movs	r3, #16
 800091a:	001a      	movs	r2, r3
 800091c:	2100      	movs	r1, #0
 800091e:	f003 f811 	bl	8003944 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000922:	003b      	movs	r3, r7
 8000924:	0018      	movs	r0, r3
 8000926:	2310      	movs	r3, #16
 8000928:	001a      	movs	r2, r3
 800092a:	2100      	movs	r1, #0
 800092c:	f003 f80a 	bl	8003944 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000930:	0021      	movs	r1, r4
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2212      	movs	r2, #18
 8000936:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2201      	movs	r2, #1
 800093c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2201      	movs	r2, #1
 8000942:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2210      	movs	r2, #16
 8000948:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2210      	movs	r2, #16
 800094e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2202      	movs	r2, #2
 8000954:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	22a0      	movs	r2, #160	@ 0xa0
 8000960:	0392      	lsls	r2, r2, #14
 8000962:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2200      	movs	r2, #0
 8000968:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096a:	187b      	adds	r3, r7, r1
 800096c:	0018      	movs	r0, r3
 800096e:	f001 fa3f 	bl	8001df0 <HAL_RCC_OscConfig>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000976:	f000 fb11 	bl	8000f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097a:	2110      	movs	r1, #16
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2207      	movs	r2, #7
 8000980:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2202      	movs	r2, #2
 8000986:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2101      	movs	r1, #1
 8000998:	0018      	movs	r0, r3
 800099a:	f001 fd43 	bl	8002424 <HAL_RCC_ClockConfig>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009a2:	f000 fafb 	bl	8000f9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009a6:	003b      	movs	r3, r7
 80009a8:	2201      	movs	r2, #1
 80009aa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009ac:	003b      	movs	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b2:	003b      	movs	r3, r7
 80009b4:	0018      	movs	r0, r3
 80009b6:	f001 fe79 	bl	80026ac <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	1e03      	subs	r3, r0, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009be:	f000 faed 	bl	8000f9c <Error_Handler>
  }
}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b015      	add	sp, #84	@ 0x54
 80009c8:	bd90      	pop	{r4, r7, pc}
	...

080009cc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	0018      	movs	r0, r3
 80009d6:	230c      	movs	r3, #12
 80009d8:	001a      	movs	r2, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	f002 ffb2 	bl	8003944 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80009e0:	4b26      	ldr	r3, [pc, #152]	@ (8000a7c <MX_ADC_Init+0xb0>)
 80009e2:	4a27      	ldr	r2, [pc, #156]	@ (8000a80 <MX_ADC_Init+0xb4>)
 80009e4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009e6:	4b25      	ldr	r3, [pc, #148]	@ (8000a7c <MX_ADC_Init+0xb0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80009ec:	4b23      	ldr	r3, [pc, #140]	@ (8000a7c <MX_ADC_Init+0xb0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f2:	4b22      	ldr	r3, [pc, #136]	@ (8000a7c <MX_ADC_Init+0xb0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80009f8:	4b20      	ldr	r3, [pc, #128]	@ (8000a7c <MX_ADC_Init+0xb0>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <MX_ADC_Init+0xb0>)
 8000a00:	2204      	movs	r2, #4
 8000a02:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <MX_ADC_Init+0xb0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <MX_ADC_Init+0xb0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <MX_ADC_Init+0xb0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <MX_ADC_Init+0xb0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <MX_ADC_Init+0xb0>)
 8000a1e:	22c2      	movs	r2, #194	@ 0xc2
 8000a20:	32ff      	adds	r2, #255	@ 0xff
 8000a22:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a24:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <MX_ADC_Init+0xb0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <MX_ADC_Init+0xb0>)
 8000a2c:	2224      	movs	r2, #36	@ 0x24
 8000a2e:	2100      	movs	r1, #0
 8000a30:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a32:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_ADC_Init+0xb0>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a38:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <MX_ADC_Init+0xb0>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 fd1a 	bl	8001474 <HAL_ADC_Init>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000a44:	f000 faaa 	bl	8000f9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2280      	movs	r2, #128	@ 0x80
 8000a52:	0152      	lsls	r2, r2, #5
 8000a54:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2280      	movs	r2, #128	@ 0x80
 8000a5a:	0552      	lsls	r2, r2, #21
 8000a5c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a5e:	1d3a      	adds	r2, r7, #4
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_ADC_Init+0xb0>)
 8000a62:	0011      	movs	r1, r2
 8000a64:	0018      	movs	r0, r3
 8000a66:	f000 fe45 	bl	80016f4 <HAL_ADC_ConfigChannel>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000a6e:	f000 fa95 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b004      	add	sp, #16
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	20000098 	.word	0x20000098
 8000a80:	40012400 	.word	0x40012400

08000a84 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <MX_TIM6_Init+0x38>)
 8000a8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac0 <MX_TIM6_Init+0x3c>)
 8000a8c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47999 - 1;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <MX_TIM6_Init+0x38>)
 8000a90:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac4 <MX_TIM6_Init+0x40>)
 8000a92:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a94:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <MX_TIM6_Init+0x38>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <MX_TIM6_Init+0x38>)
 8000a9c:	220a      	movs	r2, #10
 8000a9e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <MX_TIM6_Init+0x38>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000aa6:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <MX_TIM6_Init+0x38>)
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f001 fecd 	bl	8002848 <HAL_TIM_Base_Init>
 8000aae:	1e03      	subs	r3, r0, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8000ab2:	f000 fa73 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200000d8 	.word	0x200000d8
 8000ac0:	40001000 	.word	0x40001000
 8000ac4:	0000bb7e 	.word	0x0000bb7e

08000ac8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <MX_USART1_UART_Init+0x58>)
 8000ace:	4a15      	ldr	r2, [pc, #84]	@ (8000b24 <MX_USART1_UART_Init+0x5c>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <MX_USART1_UART_Init+0x58>)
 8000ad4:	22e1      	movs	r2, #225	@ 0xe1
 8000ad6:	0252      	lsls	r2, r2, #9
 8000ad8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <MX_USART1_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_USART1_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <MX_USART1_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <MX_USART1_UART_Init+0x58>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <MX_USART1_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <MX_USART1_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <MX_USART1_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <MX_USART1_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b0a:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <MX_USART1_UART_Init+0x58>)
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f002 f895 	bl	8002c3c <HAL_UART_Init>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b16:	f000 fa41 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000120 	.word	0x20000120
 8000b24:	40013800 	.word	0x40013800

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b089      	sub	sp, #36	@ 0x24
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	240c      	movs	r4, #12
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	0018      	movs	r0, r3
 8000b34:	2314      	movs	r3, #20
 8000b36:	001a      	movs	r2, r3
 8000b38:	2100      	movs	r1, #0
 8000b3a:	f002 ff03 	bl	8003944 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b40      	ldr	r3, [pc, #256]	@ (8000c40 <MX_GPIO_Init+0x118>)
 8000b40:	695a      	ldr	r2, [r3, #20]
 8000b42:	4b3f      	ldr	r3, [pc, #252]	@ (8000c40 <MX_GPIO_Init+0x118>)
 8000b44:	2180      	movs	r1, #128	@ 0x80
 8000b46:	0289      	lsls	r1, r1, #10
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	615a      	str	r2, [r3, #20]
 8000b4c:	4b3c      	ldr	r3, [pc, #240]	@ (8000c40 <MX_GPIO_Init+0x118>)
 8000b4e:	695a      	ldr	r2, [r3, #20]
 8000b50:	2380      	movs	r3, #128	@ 0x80
 8000b52:	029b      	lsls	r3, r3, #10
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b39      	ldr	r3, [pc, #228]	@ (8000c40 <MX_GPIO_Init+0x118>)
 8000b5c:	695a      	ldr	r2, [r3, #20]
 8000b5e:	4b38      	ldr	r3, [pc, #224]	@ (8000c40 <MX_GPIO_Init+0x118>)
 8000b60:	2180      	movs	r1, #128	@ 0x80
 8000b62:	02c9      	lsls	r1, r1, #11
 8000b64:	430a      	orrs	r2, r1
 8000b66:	615a      	str	r2, [r3, #20]
 8000b68:	4b35      	ldr	r3, [pc, #212]	@ (8000c40 <MX_GPIO_Init+0x118>)
 8000b6a:	695a      	ldr	r2, [r3, #20]
 8000b6c:	2380      	movs	r3, #128	@ 0x80
 8000b6e:	02db      	lsls	r3, r3, #11
 8000b70:	4013      	ands	r3, r2
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIGNAL_1_Pin|SIGNAL_2_Pin|SIGNAL_3_Pin|SIGNAL_4_Pin
 8000b76:	2390      	movs	r3, #144	@ 0x90
 8000b78:	05db      	lsls	r3, r3, #23
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	21ff      	movs	r1, #255	@ 0xff
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 f8fc 	bl	8001d7c <HAL_GPIO_WritePin>
                          |SIGNAL_5_Pin|SIGNAL_6_Pin|SIGNAL_7_Pin|SIGNAL_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIGNAL_A_Pin|SIGNAL_B_Pin|REL_SIG_1_Pin|CLK_Pin
 8000b84:	492f      	ldr	r1, [pc, #188]	@ (8000c44 <MX_GPIO_Init+0x11c>)
 8000b86:	4b30      	ldr	r3, [pc, #192]	@ (8000c48 <MX_GPIO_Init+0x120>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f001 f8f6 	bl	8001d7c <HAL_GPIO_WritePin>
                          |DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SIGNAL_1_Pin SIGNAL_2_Pin SIGNAL_3_Pin SIGNAL_4_Pin
                           SIGNAL_5_Pin SIGNAL_6_Pin SIGNAL_7_Pin SIGNAL_8_Pin */
  GPIO_InitStruct.Pin = SIGNAL_1_Pin|SIGNAL_2_Pin|SIGNAL_3_Pin|SIGNAL_4_Pin
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	22ff      	movs	r2, #255	@ 0xff
 8000b94:	601a      	str	r2, [r3, #0]
                          |SIGNAL_5_Pin|SIGNAL_6_Pin|SIGNAL_7_Pin|SIGNAL_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	2201      	movs	r2, #1
 8000b9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	193a      	adds	r2, r7, r4
 8000baa:	2390      	movs	r3, #144	@ 0x90
 8000bac:	05db      	lsls	r3, r3, #23
 8000bae:	0011      	movs	r1, r2
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 ff73 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGNAL_A_Pin SIGNAL_B_Pin REL_SIG_1_Pin */
  GPIO_InitStruct.Pin = SIGNAL_A_Pin|SIGNAL_B_Pin|REL_SIG_1_Pin;
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	4a24      	ldr	r2, [pc, #144]	@ (8000c4c <MX_GPIO_Init+0x124>)
 8000bba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c48 <MX_GPIO_Init+0x120>)
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	0010      	movs	r0, r2
 8000bd6:	f000 ff61 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : COIN_Pin */
  GPIO_InitStruct.Pin = COIN_Pin;
 8000bda:	0021      	movs	r1, r4
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2280      	movs	r2, #128	@ 0x80
 8000be0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2288      	movs	r2, #136	@ 0x88
 8000be6:	0352      	lsls	r2, r2, #13
 8000be8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2201      	movs	r2, #1
 8000bee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(COIN_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	000c      	movs	r4, r1
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	4a14      	ldr	r2, [pc, #80]	@ (8000c48 <MX_GPIO_Init+0x120>)
 8000bf6:	0019      	movs	r1, r3
 8000bf8:	0010      	movs	r0, r2
 8000bfa:	f000 ff4f 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DATA_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DATA_Pin;
 8000bfe:	0021      	movs	r1, r4
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	22c0      	movs	r2, #192	@ 0xc0
 8000c04:	0092      	lsls	r2, r2, #2
 8000c06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2201      	movs	r2, #1
 8000c12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2203      	movs	r2, #3
 8000c18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <MX_GPIO_Init+0x120>)
 8000c1e:	0019      	movs	r1, r3
 8000c20:	0010      	movs	r0, r2
 8000c22:	f000 ff3b 	bl	8001a9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2007      	movs	r0, #7
 8000c2c:	f000 ff04 	bl	8001a38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c30:	2007      	movs	r0, #7
 8000c32:	f000 ff16 	bl	8001a62 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b009      	add	sp, #36	@ 0x24
 8000c3c:	bd90      	pop	{r4, r7, pc}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	40021000 	.word	0x40021000
 8000c44:	00000f02 	.word	0x00000f02
 8000c48:	48000400 	.word	0x48000400
 8000c4c:	00000c02 	.word	0x00000c02

08000c50 <processPulse>:

/* USER CODE BEGIN 4 */
void processPulse() {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	 static uint32_t pulse_start_time = 0;

	 if (pulse_interrupt_Flag)
 8000c54:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <processPulse+0x8c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d03b      	beq.n	8000cd6 <processPulse+0x86>
	 {
		 HAL_Delay(50);
 8000c5e:	2032      	movs	r0, #50	@ 0x32
 8000c60:	f000 fbe4 	bl	800142c <HAL_Delay>
		if (pulse_start_time == 0)
 8000c64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <processPulse+0x90>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d104      	bne.n	8000c76 <processPulse+0x26>
		{
			pulse_start_time = HAL_GetTick();
 8000c6c:	f000 fbd4 	bl	8001418 <HAL_GetTick>
 8000c70:	0002      	movs	r2, r0
 8000c72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <processPulse+0x90>)
 8000c74:	601a      	str	r2, [r3, #0]
		}

		if ((HAL_GetTick() - pulse_start_time) >= pulse_timeout)
 8000c76:	f000 fbcf 	bl	8001418 <HAL_GetTick>
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <processPulse+0x90>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	1ad2      	subs	r2, r2, r3
 8000c82:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <processPulse+0x94>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d325      	bcc.n	8000cd6 <processPulse+0x86>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8a:	b672      	cpsid	i
}
 8000c8c:	46c0      	nop			@ (mov r8, r8)
		{
			__disable_irq();
			if (coin_pulse == 1)
 8000c8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <processPulse+0x98>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d107      	bne.n	8000ca8 <processPulse+0x58>
			{
				printf("1 pulse is receicved\n\r");
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <processPulse+0x9c>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f002 fcf6 	bl	800368c <iprintf>
				state = 1;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <processPulse+0xa0>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e00b      	b.n	8000cc0 <processPulse+0x70>
			}
			else if (coin_pulse == 2)
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <processPulse+0x98>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d106      	bne.n	8000cc0 <processPulse+0x70>
			{
				printf("2 pulse is receicved\n\r");
 8000cb2:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <processPulse+0xa4>)
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f002 fce9 	bl	800368c <iprintf>
				state = 2;
 8000cba:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf0 <processPulse+0xa0>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	701a      	strb	r2, [r3, #0]
			}
			coin_pulse = 0;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <processPulse+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000cc6:	b662      	cpsie	i
}
 8000cc8:	46c0      	nop			@ (mov r8, r8)
			__enable_irq();
			pulse_interrupt_Flag = 0;
 8000cca:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <processPulse+0x8c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
			pulse_start_time = 0;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	@ (8000ce0 <processPulse+0x90>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
		}
	 }
}
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200001a9 	.word	0x200001a9
 8000ce0:	200001c0 	.word	0x200001c0
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	200001b4 	.word	0x200001b4
 8000cec:	08004540 	.word	0x08004540
 8000cf0:	200001b5 	.word	0x200001b5
 8000cf4:	08004558 	.word	0x08004558

08000cf8 <TM1637_Countdown_20Sec>:

void TM1637_Countdown_20Sec(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
	static bool colon_state = false;
	static uint32_t last_update_time = 0;
	uint8_t display_data[4] = {0x00, 0x00, 0x00, 0x00};
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
    if (HAL_GetTick() - last_update_time >= 1000)
 8000d04:	f000 fb88 	bl	8001418 <HAL_GetTick>
 8000d08:	0002      	movs	r2, r0
 8000d0a:	4b36      	ldr	r3, [pc, #216]	@ (8000de4 <TM1637_Countdown_20Sec+0xec>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	1ad2      	subs	r2, r2, r3
 8000d10:	23fa      	movs	r3, #250	@ 0xfa
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d360      	bcc.n	8000dda <TM1637_Countdown_20Sec+0xe2>
    {
        last_update_time = HAL_GetTick();
 8000d18:	f000 fb7e 	bl	8001418 <HAL_GetTick>
 8000d1c:	0002      	movs	r2, r0
 8000d1e:	4b31      	ldr	r3, [pc, #196]	@ (8000de4 <TM1637_Countdown_20Sec+0xec>)
 8000d20:	601a      	str	r2, [r3, #0]
        colon_state = !colon_state;
 8000d22:	4b31      	ldr	r3, [pc, #196]	@ (8000de8 <TM1637_Countdown_20Sec+0xf0>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	1e5a      	subs	r2, r3, #1
 8000d28:	4193      	sbcs	r3, r2
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4053      	eors	r3, r2
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	1c1a      	adds	r2, r3, #0
 8000d34:	2301      	movs	r3, #1
 8000d36:	4013      	ands	r3, r2
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000de8 <TM1637_Countdown_20Sec+0xf0>)
 8000d3c:	701a      	strb	r2, [r3, #0]

        display_data[0] = digit_map[0];
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dec <TM1637_Countdown_20Sec+0xf4>)
 8000d40:	781a      	ldrb	r2, [r3, #0]
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	701a      	strb	r2, [r3, #0]
		display_data[1] = digit_map[0];
 8000d46:	4b29      	ldr	r3, [pc, #164]	@ (8000dec <TM1637_Countdown_20Sec+0xf4>)
 8000d48:	781a      	ldrb	r2, [r3, #0]
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	705a      	strb	r2, [r3, #1]
        display_data[2] = digit_map[(countdown_seconds / 10)];
 8000d4e:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <TM1637_Countdown_20Sec+0xf8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	210a      	movs	r1, #10
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff fa6b 	bl	8000230 <__divsi3>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	4b23      	ldr	r3, [pc, #140]	@ (8000dec <TM1637_Countdown_20Sec+0xf4>)
 8000d60:	5c9a      	ldrb	r2, [r3, r2]
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	709a      	strb	r2, [r3, #2]
        display_data[3] = digit_map[(countdown_seconds % 10)];
 8000d66:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <TM1637_Countdown_20Sec+0xf8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	210a      	movs	r1, #10
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff fb45 	bl	80003fc <__aeabi_idivmod>
 8000d72:	000b      	movs	r3, r1
 8000d74:	001a      	movs	r2, r3
 8000d76:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <TM1637_Countdown_20Sec+0xf4>)
 8000d78:	5c9a      	ldrb	r2, [r3, r2]
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	70da      	strb	r2, [r3, #3]

        if (colon_state)
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000de8 <TM1637_Countdown_20Sec+0xf0>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d008      	beq.n	8000d98 <TM1637_Countdown_20Sec+0xa0>
        {
			display_data[1] |= 0x80;
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	785b      	ldrb	r3, [r3, #1]
 8000d8a:	2280      	movs	r2, #128	@ 0x80
 8000d8c:	4252      	negs	r2, r2
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	705a      	strb	r2, [r3, #1]
 8000d96:	e003      	b.n	8000da0 <TM1637_Countdown_20Sec+0xa8>
		} else
		{
			display_data[1] |= 0x00;
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	785a      	ldrb	r2, [r3, #1]
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	705a      	strb	r2, [r3, #1]
		}
        TM1637_WriteData(0xC0, display_data, 4);
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2204      	movs	r2, #4
 8000da4:	0019      	movs	r1, r3
 8000da6:	20c0      	movs	r0, #192	@ 0xc0
 8000da8:	f7ff fbfe 	bl	80005a8 <TM1637_WriteData>
        printf("Countdown: %02d seconds\n", countdown_seconds);
 8000dac:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <TM1637_Countdown_20Sec+0xf8>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <TM1637_Countdown_20Sec+0xfc>)
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f002 fc69 	bl	800368c <iprintf>
        countdown_seconds--;
 8000dba:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <TM1637_Countdown_20Sec+0xf8>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	1e5a      	subs	r2, r3, #1
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <TM1637_Countdown_20Sec+0xf8>)
 8000dc2:	601a      	str	r2, [r3, #0]
        if (countdown_seconds < 0) {
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <TM1637_Countdown_20Sec+0xf8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	da06      	bge.n	8000dda <TM1637_Countdown_20Sec+0xe2>
        	countdown_seconds = 0;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <TM1637_Countdown_20Sec+0xf8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
			printf("20 sec countdown completed\n");
 8000dd2:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <TM1637_Countdown_20Sec+0x100>)
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f002 fcbf 	bl	8003758 <puts>
        }
    }
}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	200001c4 	.word	0x200001c4
 8000de8:	200001c8 	.word	0x200001c8
 8000dec:	20000004 	.word	0x20000004
 8000df0:	200001bc 	.word	0x200001bc
 8000df4:	08004570 	.word	0x08004570
 8000df8:	080044b0 	.word	0x080044b0

08000dfc <Display_fifty>:

void Display_fifty(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
	uint8_t data[4] = {0x00, digit_map[5], digit_map[0], digit_map[10]};
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <Display_fifty+0x40>)
 8000e0a:	795a      	ldrb	r2, [r3, #5]
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	705a      	strb	r2, [r3, #1]
 8000e10:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <Display_fifty+0x40>)
 8000e12:	781a      	ldrb	r2, [r3, #0]
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	709a      	strb	r2, [r3, #2]
 8000e18:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <Display_fifty+0x40>)
 8000e1a:	7a9a      	ldrb	r2, [r3, #10]
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	70da      	strb	r2, [r3, #3]
	TM1637_WriteData(0xC0, data, 4);
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2204      	movs	r2, #4
 8000e24:	0019      	movs	r1, r3
 8000e26:	20c0      	movs	r0, #192	@ 0xc0
 8000e28:	f7ff fbbe 	bl	80005a8 <TM1637_WriteData>
	printf("Displayed 50 fils\n\r");
 8000e2c:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <Display_fifty+0x44>)
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f002 fc2c 	bl	800368c <iprintf>
}
 8000e34:	46c0      	nop			@ (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000004 	.word	0x20000004
 8000e40:	0800458c 	.word	0x0800458c

08000e44 <Display_1dhiram>:

void Display_1dhiram(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
	uint8_t data[4] = {0x00, 0x00, digit_map[1], digit_map[11]};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	705a      	strb	r2, [r3, #1]
 8000e56:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <Display_1dhiram+0x40>)
 8000e58:	785a      	ldrb	r2, [r3, #1]
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	709a      	strb	r2, [r3, #2]
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <Display_1dhiram+0x40>)
 8000e60:	7ada      	ldrb	r2, [r3, #11]
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	70da      	strb	r2, [r3, #3]
	TM1637_WriteData(0xC0, data, 4);
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2204      	movs	r2, #4
 8000e6a:	0019      	movs	r1, r3
 8000e6c:	20c0      	movs	r0, #192	@ 0xc0
 8000e6e:	f7ff fb9b 	bl	80005a8 <TM1637_WriteData>
	printf("displayed 1 Dhiram\n\r");
 8000e72:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <Display_1dhiram+0x44>)
 8000e74:	0018      	movs	r0, r3
 8000e76:	f002 fc09 	bl	800368c <iprintf>
}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	20000004 	.word	0x20000004
 8000e88:	080045a0 	.word	0x080045a0

08000e8c <DisplayDashes>:
	uint8_t data[4] = {0x00, 0x00, digit_map[2], digit_map[11]};
	TM1637_WriteData(0xC0, data, 4);
}

void DisplayDashes(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
    uint8_t data[4] = {digit_map[12],digit_map[12], digit_map[12], digit_map[12]};
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <DisplayDashes+0x64>)
 8000e94:	7b1a      	ldrb	r2, [r3, #12]
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <DisplayDashes+0x64>)
 8000e9c:	7b1a      	ldrb	r2, [r3, #12]
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	705a      	strb	r2, [r3, #1]
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <DisplayDashes+0x64>)
 8000ea4:	7b1a      	ldrb	r2, [r3, #12]
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	709a      	strb	r2, [r3, #2]
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <DisplayDashes+0x64>)
 8000eac:	7b1a      	ldrb	r2, [r3, #12]
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	70da      	strb	r2, [r3, #3]
    TM1637_WriteData(0xC0, data, 4);
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	0019      	movs	r1, r3
 8000eb8:	20c0      	movs	r0, #192	@ 0xc0
 8000eba:	f7ff fb75 	bl	80005a8 <TM1637_WriteData>
    //printf("Display Dashes\n\r");
    HAL_GPIO_WritePin(SIGNAL_4_GPIO_Port, SIGNAL_4_Pin, GPIO_PIN_SET);
 8000ebe:	2390      	movs	r3, #144	@ 0x90
 8000ec0:	05db      	lsls	r3, r3, #23
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 ff58 	bl	8001d7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SIGNAL_5_GPIO_Port, SIGNAL_5_Pin, GPIO_PIN_SET);
 8000ecc:	2390      	movs	r3, #144	@ 0x90
 8000ece:	05db      	lsls	r3, r3, #23
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2110      	movs	r1, #16
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f000 ff51 	bl	8001d7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SIGNAL_6_GPIO_Port, SIGNAL_6_Pin, GPIO_PIN_SET);
 8000eda:	2390      	movs	r3, #144	@ 0x90
 8000edc:	05db      	lsls	r3, r3, #23
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2120      	movs	r1, #32
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f000 ff4a 	bl	8001d7c <HAL_GPIO_WritePin>
}
 8000ee8:	46c0      	nop			@ (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b002      	add	sp, #8
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <TM1637_DisplayClear>:

void TM1637_DisplayClear(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	uint8_t data[4] = {0x00, 0x00, 0x00, 0x00};
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
	TM1637_WriteData(0xC0, data, 4);
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2204      	movs	r2, #4
 8000f04:	0019      	movs	r1, r3
 8000f06:	20c0      	movs	r0, #192	@ 0xc0
 8000f08:	f7ff fb4e 	bl	80005a8 <TM1637_WriteData>
	printf("System going to IDLE state.....it takes 2 minutes\n\r");
 8000f0c:	4b03      	ldr	r3, [pc, #12]	@ (8000f1c <TM1637_DisplayClear+0x28>)
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f002 fbbc 	bl	800368c <iprintf>
}
 8000f14:	46c0      	nop			@ (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b002      	add	sp, #8
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	080045b8 	.word	0x080045b8

08000f20 <__io_putchar>:

#ifdef __GNUC__
#define UART_printf   int __io_putchar(int ch)
UART_printf
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f28:	2301      	movs	r3, #1
 8000f2a:	425b      	negs	r3, r3
 8000f2c:	1d39      	adds	r1, r7, #4
 8000f2e:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <__io_putchar+0x20>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	f001 fed7 	bl	8002ce4 <HAL_UART_Transmit>
	return ch;
 8000f36:	687b      	ldr	r3, [r7, #4]
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000120 	.word	0x20000120

08000f44 <HAL_GPIO_EXTI_Callback>:
#endif

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	0002      	movs	r2, r0
 8000f4c:	1dbb      	adds	r3, r7, #6
 8000f4e:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == COIN_Pin)
 8000f50:	1dbb      	adds	r3, r7, #6
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	2b80      	cmp	r3, #128	@ 0x80
 8000f56:	d116      	bne.n	8000f86 <HAL_GPIO_EXTI_Callback+0x42>
    {
    	uint32_t current_time = HAL_GetTick();
 8000f58:	f000 fa5e 	bl	8001418 <HAL_GetTick>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	60fb      	str	r3, [r7, #12]

		if ((current_time - last_pulse_time) > 50) {  // Debounce filter (50 ms)
 8000f60:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b32      	cmp	r3, #50	@ 0x32
 8000f6a:	d90c      	bls.n	8000f86 <HAL_GPIO_EXTI_Callback+0x42>
			last_pulse_time = current_time;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	601a      	str	r2, [r3, #0]
			coin_pulse++;
 8000f72:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x50>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x50>)
 8000f7e:	701a      	strb	r2, [r3, #0]
			pulse_interrupt_Flag = 1;
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x54>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
		}

    }
}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b004      	add	sp, #16
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	200001b0 	.word	0x200001b0
 8000f94:	200001b4 	.word	0x200001b4
 8000f98:	200001a9 	.word	0x200001a9

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	46c0      	nop			@ (mov r8, r8)
 8000fa6:	e7fd      	b.n	8000fa4 <Error_Handler+0x8>

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <HAL_MspInit+0x44>)
 8000fb0:	699a      	ldr	r2, [r3, #24]
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_MspInit+0x44>)
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	619a      	str	r2, [r3, #24]
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <HAL_MspInit+0x44>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <HAL_MspInit+0x44>)
 8000fc8:	69da      	ldr	r2, [r3, #28]
 8000fca:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <HAL_MspInit+0x44>)
 8000fcc:	2180      	movs	r1, #128	@ 0x80
 8000fce:	0549      	lsls	r1, r1, #21
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	61da      	str	r2, [r3, #28]
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <HAL_MspInit+0x44>)
 8000fd6:	69da      	ldr	r2, [r3, #28]
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	055b      	lsls	r3, r3, #21
 8000fdc:	4013      	ands	r3, r2
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			@ (mov r8, r8)
 8000fec:	40021000 	.word	0x40021000

08000ff0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b08b      	sub	sp, #44	@ 0x2c
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	2414      	movs	r4, #20
 8000ffa:	193b      	adds	r3, r7, r4
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	2314      	movs	r3, #20
 8001000:	001a      	movs	r2, r3
 8001002:	2100      	movs	r1, #0
 8001004:	f002 fc9e 	bl	8003944 <memset>
  if(hadc->Instance==ADC1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a18      	ldr	r2, [pc, #96]	@ (8001070 <HAL_ADC_MspInit+0x80>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d12a      	bne.n	8001068 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001012:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <HAL_ADC_MspInit+0x84>)
 8001014:	699a      	ldr	r2, [r3, #24]
 8001016:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <HAL_ADC_MspInit+0x84>)
 8001018:	2180      	movs	r1, #128	@ 0x80
 800101a:	0089      	lsls	r1, r1, #2
 800101c:	430a      	orrs	r2, r1
 800101e:	619a      	str	r2, [r3, #24]
 8001020:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <HAL_ADC_MspInit+0x84>)
 8001022:	699a      	ldr	r2, [r3, #24]
 8001024:	2380      	movs	r3, #128	@ 0x80
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_ADC_MspInit+0x84>)
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <HAL_ADC_MspInit+0x84>)
 8001034:	2180      	movs	r1, #128	@ 0x80
 8001036:	02c9      	lsls	r1, r1, #11
 8001038:	430a      	orrs	r2, r1
 800103a:	615a      	str	r2, [r3, #20]
 800103c:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <HAL_ADC_MspInit+0x84>)
 800103e:	695a      	ldr	r2, [r3, #20]
 8001040:	2380      	movs	r3, #128	@ 0x80
 8001042:	02db      	lsls	r3, r3, #11
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = ADC_ADJ_Pin;
 800104a:	193b      	adds	r3, r7, r4
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001050:	193b      	adds	r3, r7, r4
 8001052:	2203      	movs	r2, #3
 8001054:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	193b      	adds	r3, r7, r4
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_ADJ_GPIO_Port, &GPIO_InitStruct);
 800105c:	193b      	adds	r3, r7, r4
 800105e:	4a06      	ldr	r2, [pc, #24]	@ (8001078 <HAL_ADC_MspInit+0x88>)
 8001060:	0019      	movs	r1, r3
 8001062:	0010      	movs	r0, r2
 8001064:	f000 fd1a 	bl	8001a9c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001068:	46c0      	nop			@ (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b00b      	add	sp, #44	@ 0x2c
 800106e:	bd90      	pop	{r4, r7, pc}
 8001070:	40012400 	.word	0x40012400
 8001074:	40021000 	.word	0x40021000
 8001078:	48000400 	.word	0x48000400

0800107c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <HAL_TIM_Base_MspInit+0x44>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d113      	bne.n	80010b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <HAL_TIM_Base_MspInit+0x48>)
 8001090:	69da      	ldr	r2, [r3, #28]
 8001092:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <HAL_TIM_Base_MspInit+0x48>)
 8001094:	2110      	movs	r1, #16
 8001096:	430a      	orrs	r2, r1
 8001098:	61da      	str	r2, [r3, #28]
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_TIM_Base_MspInit+0x48>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	2210      	movs	r2, #16
 80010a0:	4013      	ands	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2011      	movs	r0, #17
 80010ac:	f000 fcc4 	bl	8001a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80010b0:	2011      	movs	r0, #17
 80010b2:	f000 fcd6 	bl	8001a62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b004      	add	sp, #16
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	40001000 	.word	0x40001000
 80010c4:	40021000 	.word	0x40021000

080010c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b08b      	sub	sp, #44	@ 0x2c
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	2414      	movs	r4, #20
 80010d2:	193b      	adds	r3, r7, r4
 80010d4:	0018      	movs	r0, r3
 80010d6:	2314      	movs	r3, #20
 80010d8:	001a      	movs	r2, r3
 80010da:	2100      	movs	r1, #0
 80010dc:	f002 fc32 	bl	8003944 <memset>
  if(huart->Instance==USART1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a1d      	ldr	r2, [pc, #116]	@ (800115c <HAL_UART_MspInit+0x94>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d133      	bne.n	8001152 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <HAL_UART_MspInit+0x98>)
 80010ec:	699a      	ldr	r2, [r3, #24]
 80010ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <HAL_UART_MspInit+0x98>)
 80010f0:	2180      	movs	r1, #128	@ 0x80
 80010f2:	01c9      	lsls	r1, r1, #7
 80010f4:	430a      	orrs	r2, r1
 80010f6:	619a      	str	r2, [r3, #24]
 80010f8:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <HAL_UART_MspInit+0x98>)
 80010fa:	699a      	ldr	r2, [r3, #24]
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	01db      	lsls	r3, r3, #7
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <HAL_UART_MspInit+0x98>)
 8001108:	695a      	ldr	r2, [r3, #20]
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <HAL_UART_MspInit+0x98>)
 800110c:	2180      	movs	r1, #128	@ 0x80
 800110e:	0289      	lsls	r1, r1, #10
 8001110:	430a      	orrs	r2, r1
 8001112:	615a      	str	r2, [r3, #20]
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_UART_MspInit+0x98>)
 8001116:	695a      	ldr	r2, [r3, #20]
 8001118:	2380      	movs	r3, #128	@ 0x80
 800111a:	029b      	lsls	r3, r3, #10
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001122:	193b      	adds	r3, r7, r4
 8001124:	22c0      	movs	r2, #192	@ 0xc0
 8001126:	00d2      	lsls	r2, r2, #3
 8001128:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	0021      	movs	r1, r4
 800112c:	187b      	adds	r3, r7, r1
 800112e:	2202      	movs	r2, #2
 8001130:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	187b      	adds	r3, r7, r1
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001138:	187b      	adds	r3, r7, r1
 800113a:	2203      	movs	r2, #3
 800113c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800113e:	187b      	adds	r3, r7, r1
 8001140:	2201      	movs	r2, #1
 8001142:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	187a      	adds	r2, r7, r1
 8001146:	2390      	movs	r3, #144	@ 0x90
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	0011      	movs	r1, r2
 800114c:	0018      	movs	r0, r3
 800114e:	f000 fca5 	bl	8001a9c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b00b      	add	sp, #44	@ 0x2c
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	40013800 	.word	0x40013800
 8001160:	40021000 	.word	0x40021000

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001168:	46c0      	nop			@ (mov r8, r8)
 800116a:	e7fd      	b.n	8001168 <NMI_Handler+0x4>

0800116c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001170:	46c0      	nop			@ (mov r8, r8)
 8001172:	e7fd      	b.n	8001170 <HardFault_Handler+0x4>

08001174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001178:	46c0      	nop			@ (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118c:	f000 f932 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  current_time_ms++;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <SysTick_Handler+0x18>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	4b02      	ldr	r3, [pc, #8]	@ (80011a0 <SysTick_Handler+0x18>)
 8001198:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200001ac 	.word	0x200001ac

080011a4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COIN_Pin);
 80011a8:	2080      	movs	r0, #128	@ 0x80
 80011aa:	f000 fe05 	bl	8001db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011b8:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <TIM6_IRQHandler+0x14>)
 80011ba:	0018      	movs	r0, r3
 80011bc:	f001 fb94 	bl	80028e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80011c0:	46c0      	nop			@ (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	200000d8 	.word	0x200000d8

080011cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	e00a      	b.n	80011f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011de:	e000      	b.n	80011e2 <_read+0x16>
 80011e0:	bf00      	nop
 80011e2:	0001      	movs	r1, r0
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	60ba      	str	r2, [r7, #8]
 80011ea:	b2ca      	uxtb	r2, r1
 80011ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbf0      	blt.n	80011de <_read+0x12>
  }

  return len;
 80011fc:	687b      	ldr	r3, [r7, #4]
}
 80011fe:	0018      	movs	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	b006      	add	sp, #24
 8001204:	bd80      	pop	{r7, pc}

08001206 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	e009      	b.n	800122c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	60ba      	str	r2, [r7, #8]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	0018      	movs	r0, r3
 8001222:	f7ff fe7d 	bl	8000f20 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	dbf1      	blt.n	8001218 <_write+0x12>
  }
  return len;
 8001234:	687b      	ldr	r3, [r7, #4]
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b006      	add	sp, #24
 800123c:	bd80      	pop	{r7, pc}

0800123e <_close>:

int _close(int file)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001246:	2301      	movs	r3, #1
 8001248:	425b      	negs	r3, r3
}
 800124a:	0018      	movs	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	b002      	add	sp, #8
 8001250:	bd80      	pop	{r7, pc}

08001252 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2280      	movs	r2, #128	@ 0x80
 8001260:	0192      	lsls	r2, r2, #6
 8001262:	605a      	str	r2, [r3, #4]
  return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}

0800126e <_isatty>:

int _isatty(int file)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001276:	2301      	movs	r3, #1
}
 8001278:	0018      	movs	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	b002      	add	sp, #8
 800127e:	bd80      	pop	{r7, pc}

08001280 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800128c:	2300      	movs	r3, #0
}
 800128e:	0018      	movs	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	b004      	add	sp, #16
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a0:	4a14      	ldr	r2, [pc, #80]	@ (80012f4 <_sbrk+0x5c>)
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <_sbrk+0x60>)
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ac:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <_sbrk+0x64>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	@ (8001300 <_sbrk+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	18d3      	adds	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d207      	bcs.n	80012d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c8:	f002 fb92 	bl	80039f0 <__errno>
 80012cc:	0003      	movs	r3, r0
 80012ce:	220c      	movs	r2, #12
 80012d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	425b      	negs	r3, r3
 80012d6:	e009      	b.n	80012ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012de:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	18d2      	adds	r2, r2, r3
 80012e6:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <_sbrk+0x64>)
 80012e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	0018      	movs	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b006      	add	sp, #24
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20002000 	.word	0x20002000
 80012f8:	00000400 	.word	0x00000400
 80012fc:	200001cc 	.word	0x200001cc
 8001300:	20000320 	.word	0x20000320

08001304 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001310:	480d      	ldr	r0, [pc, #52]	@ (8001348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001312:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001314:	f7ff fff6 	bl	8001304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001318:	480c      	ldr	r0, [pc, #48]	@ (800134c <LoopForever+0x6>)
  ldr r1, =_edata
 800131a:	490d      	ldr	r1, [pc, #52]	@ (8001350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800131c:	4a0d      	ldr	r2, [pc, #52]	@ (8001354 <LoopForever+0xe>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001320:	e002      	b.n	8001328 <LoopCopyDataInit>

08001322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001326:	3304      	adds	r3, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800132c:	d3f9      	bcc.n	8001322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132e:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001330:	4c0a      	ldr	r4, [pc, #40]	@ (800135c <LoopForever+0x16>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001334:	e001      	b.n	800133a <LoopFillZerobss>

08001336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001338:	3204      	adds	r2, #4

0800133a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800133c:	d3fb      	bcc.n	8001336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800133e:	f002 fb5d 	bl	80039fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001342:	f7ff f96f 	bl	8000624 <main>

08001346 <LoopForever>:

LoopForever:
    b LoopForever
 8001346:	e7fe      	b.n	8001346 <LoopForever>
  ldr   r0, =_estack
 8001348:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800134c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001350:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001354:	0800467c 	.word	0x0800467c
  ldr r2, =_sbss
 8001358:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800135c:	20000320 	.word	0x20000320

08001360 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001360:	e7fe      	b.n	8001360 <ADC1_IRQHandler>
	...

08001364 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001368:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <HAL_Init+0x24>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_Init+0x24>)
 800136e:	2110      	movs	r1, #16
 8001370:	430a      	orrs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001374:	2003      	movs	r0, #3
 8001376:	f000 f809 	bl	800138c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800137a:	f7ff fe15 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	40022000 	.word	0x40022000

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001394:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <HAL_InitTick+0x5c>)
 8001396:	681c      	ldr	r4, [r3, #0]
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <HAL_InitTick+0x60>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	0019      	movs	r1, r3
 800139e:	23fa      	movs	r3, #250	@ 0xfa
 80013a0:	0098      	lsls	r0, r3, #2
 80013a2:	f7fe febb 	bl	800011c <__udivsi3>
 80013a6:	0003      	movs	r3, r0
 80013a8:	0019      	movs	r1, r3
 80013aa:	0020      	movs	r0, r4
 80013ac:	f7fe feb6 	bl	800011c <__udivsi3>
 80013b0:	0003      	movs	r3, r0
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 fb65 	bl	8001a82 <HAL_SYSTICK_Config>
 80013b8:	1e03      	subs	r3, r0, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e00f      	b.n	80013e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d80b      	bhi.n	80013de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	2301      	movs	r3, #1
 80013ca:	425b      	negs	r3, r3
 80013cc:	2200      	movs	r2, #0
 80013ce:	0018      	movs	r0, r3
 80013d0:	f000 fb32 	bl	8001a38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_InitTick+0x64>)
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	0018      	movs	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b003      	add	sp, #12
 80013e6:	bd90      	pop	{r4, r7, pc}
 80013e8:	20000014 	.word	0x20000014
 80013ec:	2000001c 	.word	0x2000001c
 80013f0:	20000018 	.word	0x20000018

080013f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <HAL_IncTick+0x1c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	001a      	movs	r2, r3
 80013fe:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <HAL_IncTick+0x20>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	18d2      	adds	r2, r2, r3
 8001404:	4b03      	ldr	r3, [pc, #12]	@ (8001414 <HAL_IncTick+0x20>)
 8001406:	601a      	str	r2, [r3, #0]
}
 8001408:	46c0      	nop			@ (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	2000001c 	.word	0x2000001c
 8001414:	200001d0 	.word	0x200001d0

08001418 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b02      	ldr	r3, [pc, #8]	@ (8001428 <HAL_GetTick+0x10>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	200001d0 	.word	0x200001d0

0800142c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff fff0 	bl	8001418 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3301      	adds	r3, #1
 8001444:	d005      	beq.n	8001452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <HAL_Delay+0x44>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	001a      	movs	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	189b      	adds	r3, r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	f7ff ffe0 	bl	8001418 <HAL_GetTick>
 8001458:	0002      	movs	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d8f7      	bhi.n	8001454 <HAL_Delay+0x28>
  {
  }
}
 8001464:	46c0      	nop			@ (mov r8, r8)
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	46bd      	mov	sp, r7
 800146a:	b004      	add	sp, #16
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	2000001c 	.word	0x2000001c

08001474 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147c:	230f      	movs	r3, #15
 800147e:	18fb      	adds	r3, r7, r3
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e125      	b.n	80016de <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10a      	bne.n	80014b0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2234      	movs	r2, #52	@ 0x34
 80014a4:	2100      	movs	r1, #0
 80014a6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	0018      	movs	r0, r3
 80014ac:	f7ff fda0 	bl	8000ff0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014b4:	2210      	movs	r2, #16
 80014b6:	4013      	ands	r3, r2
 80014b8:	d000      	beq.n	80014bc <HAL_ADC_Init+0x48>
 80014ba:	e103      	b.n	80016c4 <HAL_ADC_Init+0x250>
 80014bc:	230f      	movs	r3, #15
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d000      	beq.n	80014c8 <HAL_ADC_Init+0x54>
 80014c6:	e0fd      	b.n	80016c4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2204      	movs	r2, #4
 80014d0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80014d2:	d000      	beq.n	80014d6 <HAL_ADC_Init+0x62>
 80014d4:	e0f6      	b.n	80016c4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014da:	4a83      	ldr	r2, [pc, #524]	@ (80016e8 <HAL_ADC_Init+0x274>)
 80014dc:	4013      	ands	r3, r2
 80014de:	2202      	movs	r2, #2
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2203      	movs	r2, #3
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d112      	bne.n	800151a <HAL_ADC_Init+0xa6>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2201      	movs	r2, #1
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d009      	beq.n	8001516 <HAL_ADC_Init+0xa2>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	2380      	movs	r3, #128	@ 0x80
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	401a      	ands	r2, r3
 800150e:	2380      	movs	r3, #128	@ 0x80
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	429a      	cmp	r2, r3
 8001514:	d101      	bne.n	800151a <HAL_ADC_Init+0xa6>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <HAL_ADC_Init+0xa8>
 800151a:	2300      	movs	r3, #0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d116      	bne.n	800154e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2218      	movs	r2, #24
 8001528:	4393      	bics	r3, r2
 800152a:	0019      	movs	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	0899      	lsrs	r1, r3, #2
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4964      	ldr	r1, [pc, #400]	@ (80016ec <HAL_ADC_Init+0x278>)
 800155a:	400a      	ands	r2, r1
 800155c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7e1b      	ldrb	r3, [r3, #24]
 8001562:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7e5b      	ldrb	r3, [r3, #25]
 8001568:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800156a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7e9b      	ldrb	r3, [r3, #26]
 8001570:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001572:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001578:	2b01      	cmp	r3, #1
 800157a:	d002      	beq.n	8001582 <HAL_ADC_Init+0x10e>
 800157c:	2380      	movs	r3, #128	@ 0x80
 800157e:	015b      	lsls	r3, r3, #5
 8001580:	e000      	b.n	8001584 <HAL_ADC_Init+0x110>
 8001582:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001584:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800158a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d101      	bne.n	8001598 <HAL_ADC_Init+0x124>
 8001594:	2304      	movs	r3, #4
 8001596:	e000      	b.n	800159a <HAL_ADC_Init+0x126>
 8001598:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800159a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2124      	movs	r1, #36	@ 0x24
 80015a0:	5c5b      	ldrb	r3, [r3, r1]
 80015a2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80015a4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7edb      	ldrb	r3, [r3, #27]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d115      	bne.n	80015e0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7e9b      	ldrb	r3, [r3, #26]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d105      	bne.n	80015c8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2280      	movs	r2, #128	@ 0x80
 80015c0:	0252      	lsls	r2, r2, #9
 80015c2:	4313      	orrs	r3, r2
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	e00b      	b.n	80015e0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015cc:	2220      	movs	r2, #32
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015d8:	2201      	movs	r2, #1
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69da      	ldr	r2, [r3, #28]
 80015e4:	23c2      	movs	r3, #194	@ 0xc2
 80015e6:	33ff      	adds	r3, #255	@ 0xff
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d007      	beq.n	80015fc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80015f4:	4313      	orrs	r3, r2
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68d9      	ldr	r1, [r3, #12]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	430a      	orrs	r2, r1
 800160a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	055b      	lsls	r3, r3, #21
 8001614:	429a      	cmp	r2, r3
 8001616:	d01b      	beq.n	8001650 <HAL_ADC_Init+0x1dc>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161c:	2b01      	cmp	r3, #1
 800161e:	d017      	beq.n	8001650 <HAL_ADC_Init+0x1dc>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001624:	2b02      	cmp	r3, #2
 8001626:	d013      	beq.n	8001650 <HAL_ADC_Init+0x1dc>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162c:	2b03      	cmp	r3, #3
 800162e:	d00f      	beq.n	8001650 <HAL_ADC_Init+0x1dc>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001634:	2b04      	cmp	r3, #4
 8001636:	d00b      	beq.n	8001650 <HAL_ADC_Init+0x1dc>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163c:	2b05      	cmp	r3, #5
 800163e:	d007      	beq.n	8001650 <HAL_ADC_Init+0x1dc>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001644:	2b06      	cmp	r3, #6
 8001646:	d003      	beq.n	8001650 <HAL_ADC_Init+0x1dc>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164c:	2b07      	cmp	r3, #7
 800164e:	d112      	bne.n	8001676 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2107      	movs	r1, #7
 800165c:	438a      	bics	r2, r1
 800165e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6959      	ldr	r1, [r3, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166a:	2207      	movs	r2, #7
 800166c:	401a      	ands	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4a1c      	ldr	r2, [pc, #112]	@ (80016f0 <HAL_ADC_Init+0x27c>)
 800167e:	4013      	ands	r3, r2
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	429a      	cmp	r2, r3
 8001684:	d10b      	bne.n	800169e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001690:	2203      	movs	r2, #3
 8001692:	4393      	bics	r3, r2
 8001694:	2201      	movs	r2, #1
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800169c:	e01c      	b.n	80016d8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a2:	2212      	movs	r2, #18
 80016a4:	4393      	bics	r3, r2
 80016a6:	2210      	movs	r2, #16
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b2:	2201      	movs	r2, #1
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80016ba:	230f      	movs	r3, #15
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016c2:	e009      	b.n	80016d8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c8:	2210      	movs	r2, #16
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80016d0:	230f      	movs	r3, #15
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	2201      	movs	r2, #1
 80016d6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016d8:	230f      	movs	r3, #15
 80016da:	18fb      	adds	r3, r7, r3
 80016dc:	781b      	ldrb	r3, [r3, #0]
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b004      	add	sp, #16
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	fffffefd 	.word	0xfffffefd
 80016ec:	fffe0219 	.word	0xfffe0219
 80016f0:	833fffe7 	.word	0x833fffe7

080016f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016fe:	230f      	movs	r3, #15
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800170e:	2380      	movs	r3, #128	@ 0x80
 8001710:	055b      	lsls	r3, r3, #21
 8001712:	429a      	cmp	r2, r3
 8001714:	d011      	beq.n	800173a <HAL_ADC_ConfigChannel+0x46>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171a:	2b01      	cmp	r3, #1
 800171c:	d00d      	beq.n	800173a <HAL_ADC_ConfigChannel+0x46>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001722:	2b02      	cmp	r3, #2
 8001724:	d009      	beq.n	800173a <HAL_ADC_ConfigChannel+0x46>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172a:	2b03      	cmp	r3, #3
 800172c:	d005      	beq.n	800173a <HAL_ADC_ConfigChannel+0x46>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001732:	2b04      	cmp	r3, #4
 8001734:	d001      	beq.n	800173a <HAL_ADC_ConfigChannel+0x46>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2234      	movs	r2, #52	@ 0x34
 800173e:	5c9b      	ldrb	r3, [r3, r2]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x54>
 8001744:	2302      	movs	r3, #2
 8001746:	e0bb      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x1cc>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2234      	movs	r2, #52	@ 0x34
 800174c:	2101      	movs	r1, #1
 800174e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2204      	movs	r2, #4
 8001758:	4013      	ands	r3, r2
 800175a:	d000      	beq.n	800175e <HAL_ADC_ConfigChannel+0x6a>
 800175c:	e09f      	b.n	800189e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4a59      	ldr	r2, [pc, #356]	@ (80018c8 <HAL_ADC_ConfigChannel+0x1d4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d100      	bne.n	800176a <HAL_ADC_ConfigChannel+0x76>
 8001768:	e077      	b.n	800185a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	409a      	lsls	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001784:	2380      	movs	r3, #128	@ 0x80
 8001786:	055b      	lsls	r3, r3, #21
 8001788:	429a      	cmp	r2, r3
 800178a:	d037      	beq.n	80017fc <HAL_ADC_ConfigChannel+0x108>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001790:	2b01      	cmp	r3, #1
 8001792:	d033      	beq.n	80017fc <HAL_ADC_ConfigChannel+0x108>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001798:	2b02      	cmp	r3, #2
 800179a:	d02f      	beq.n	80017fc <HAL_ADC_ConfigChannel+0x108>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d02b      	beq.n	80017fc <HAL_ADC_ConfigChannel+0x108>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d027      	beq.n	80017fc <HAL_ADC_ConfigChannel+0x108>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d023      	beq.n	80017fc <HAL_ADC_ConfigChannel+0x108>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b8:	2b06      	cmp	r3, #6
 80017ba:	d01f      	beq.n	80017fc <HAL_ADC_ConfigChannel+0x108>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c0:	2b07      	cmp	r3, #7
 80017c2:	d01b      	beq.n	80017fc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	2107      	movs	r1, #7
 80017d0:	400b      	ands	r3, r1
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d012      	beq.n	80017fc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2107      	movs	r1, #7
 80017e2:	438a      	bics	r2, r1
 80017e4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6959      	ldr	r1, [r3, #20]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2207      	movs	r2, #7
 80017f2:	401a      	ands	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b10      	cmp	r3, #16
 8001802:	d003      	beq.n	800180c <HAL_ADC_ConfigChannel+0x118>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b11      	cmp	r3, #17
 800180a:	d152      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800180c:	4b2f      	ldr	r3, [pc, #188]	@ (80018cc <HAL_ADC_ConfigChannel+0x1d8>)
 800180e:	6819      	ldr	r1, [r3, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b10      	cmp	r3, #16
 8001816:	d102      	bne.n	800181e <HAL_ADC_ConfigChannel+0x12a>
 8001818:	2380      	movs	r3, #128	@ 0x80
 800181a:	041b      	lsls	r3, r3, #16
 800181c:	e001      	b.n	8001822 <HAL_ADC_ConfigChannel+0x12e>
 800181e:	2380      	movs	r3, #128	@ 0x80
 8001820:	03db      	lsls	r3, r3, #15
 8001822:	4a2a      	ldr	r2, [pc, #168]	@ (80018cc <HAL_ADC_ConfigChannel+0x1d8>)
 8001824:	430b      	orrs	r3, r1
 8001826:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b10      	cmp	r3, #16
 800182e:	d140      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001830:	4b27      	ldr	r3, [pc, #156]	@ (80018d0 <HAL_ADC_ConfigChannel+0x1dc>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4927      	ldr	r1, [pc, #156]	@ (80018d4 <HAL_ADC_ConfigChannel+0x1e0>)
 8001836:	0018      	movs	r0, r3
 8001838:	f7fe fc70 	bl	800011c <__udivsi3>
 800183c:	0003      	movs	r3, r0
 800183e:	001a      	movs	r2, r3
 8001840:	0013      	movs	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	189b      	adds	r3, r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800184a:	e002      	b.n	8001852 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	3b01      	subs	r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f9      	bne.n	800184c <HAL_ADC_ConfigChannel+0x158>
 8001858:	e02b      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2101      	movs	r1, #1
 8001866:	4099      	lsls	r1, r3
 8001868:	000b      	movs	r3, r1
 800186a:	43d9      	mvns	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	400a      	ands	r2, r1
 8001872:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b10      	cmp	r3, #16
 800187a:	d003      	beq.n	8001884 <HAL_ADC_ConfigChannel+0x190>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b11      	cmp	r3, #17
 8001882:	d116      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <HAL_ADC_ConfigChannel+0x1d8>)
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b10      	cmp	r3, #16
 800188e:	d101      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1a0>
 8001890:	4a11      	ldr	r2, [pc, #68]	@ (80018d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001892:	e000      	b.n	8001896 <HAL_ADC_ConfigChannel+0x1a2>
 8001894:	4a11      	ldr	r2, [pc, #68]	@ (80018dc <HAL_ADC_ConfigChannel+0x1e8>)
 8001896:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <HAL_ADC_ConfigChannel+0x1d8>)
 8001898:	400a      	ands	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	e009      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018a2:	2220      	movs	r2, #32
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80018aa:	230f      	movs	r3, #15
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2234      	movs	r2, #52	@ 0x34
 80018b6:	2100      	movs	r1, #0
 80018b8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80018ba:	230f      	movs	r3, #15
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	781b      	ldrb	r3, [r3, #0]
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b004      	add	sp, #16
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	00001001 	.word	0x00001001
 80018cc:	40012708 	.word	0x40012708
 80018d0:	20000014 	.word	0x20000014
 80018d4:	000f4240 	.word	0x000f4240
 80018d8:	ff7fffff 	.word	0xff7fffff
 80018dc:	ffbfffff 	.word	0xffbfffff

080018e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	0002      	movs	r2, r0
 80018e8:	1dfb      	adds	r3, r7, #7
 80018ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018ec:	1dfb      	adds	r3, r7, #7
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80018f2:	d809      	bhi.n	8001908 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f4:	1dfb      	adds	r3, r7, #7
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	001a      	movs	r2, r3
 80018fa:	231f      	movs	r3, #31
 80018fc:	401a      	ands	r2, r3
 80018fe:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <__NVIC_EnableIRQ+0x30>)
 8001900:	2101      	movs	r1, #1
 8001902:	4091      	lsls	r1, r2
 8001904:	000a      	movs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
  }
}
 8001908:	46c0      	nop			@ (mov r8, r8)
 800190a:	46bd      	mov	sp, r7
 800190c:	b002      	add	sp, #8
 800190e:	bd80      	pop	{r7, pc}
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	0002      	movs	r2, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001922:	1dfb      	adds	r3, r7, #7
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b7f      	cmp	r3, #127	@ 0x7f
 8001928:	d828      	bhi.n	800197c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800192a:	4a2f      	ldr	r2, [pc, #188]	@ (80019e8 <__NVIC_SetPriority+0xd4>)
 800192c:	1dfb      	adds	r3, r7, #7
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b25b      	sxtb	r3, r3
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	33c0      	adds	r3, #192	@ 0xc0
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	589b      	ldr	r3, [r3, r2]
 800193a:	1dfa      	adds	r2, r7, #7
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	0011      	movs	r1, r2
 8001940:	2203      	movs	r2, #3
 8001942:	400a      	ands	r2, r1
 8001944:	00d2      	lsls	r2, r2, #3
 8001946:	21ff      	movs	r1, #255	@ 0xff
 8001948:	4091      	lsls	r1, r2
 800194a:	000a      	movs	r2, r1
 800194c:	43d2      	mvns	r2, r2
 800194e:	401a      	ands	r2, r3
 8001950:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	019b      	lsls	r3, r3, #6
 8001956:	22ff      	movs	r2, #255	@ 0xff
 8001958:	401a      	ands	r2, r3
 800195a:	1dfb      	adds	r3, r7, #7
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	0018      	movs	r0, r3
 8001960:	2303      	movs	r3, #3
 8001962:	4003      	ands	r3, r0
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001968:	481f      	ldr	r0, [pc, #124]	@ (80019e8 <__NVIC_SetPriority+0xd4>)
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b25b      	sxtb	r3, r3
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	430a      	orrs	r2, r1
 8001974:	33c0      	adds	r3, #192	@ 0xc0
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800197a:	e031      	b.n	80019e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800197c:	4a1b      	ldr	r2, [pc, #108]	@ (80019ec <__NVIC_SetPriority+0xd8>)
 800197e:	1dfb      	adds	r3, r7, #7
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	0019      	movs	r1, r3
 8001984:	230f      	movs	r3, #15
 8001986:	400b      	ands	r3, r1
 8001988:	3b08      	subs	r3, #8
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3306      	adds	r3, #6
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	18d3      	adds	r3, r2, r3
 8001992:	3304      	adds	r3, #4
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	1dfa      	adds	r2, r7, #7
 8001998:	7812      	ldrb	r2, [r2, #0]
 800199a:	0011      	movs	r1, r2
 800199c:	2203      	movs	r2, #3
 800199e:	400a      	ands	r2, r1
 80019a0:	00d2      	lsls	r2, r2, #3
 80019a2:	21ff      	movs	r1, #255	@ 0xff
 80019a4:	4091      	lsls	r1, r2
 80019a6:	000a      	movs	r2, r1
 80019a8:	43d2      	mvns	r2, r2
 80019aa:	401a      	ands	r2, r3
 80019ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	019b      	lsls	r3, r3, #6
 80019b2:	22ff      	movs	r2, #255	@ 0xff
 80019b4:	401a      	ands	r2, r3
 80019b6:	1dfb      	adds	r3, r7, #7
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	0018      	movs	r0, r3
 80019bc:	2303      	movs	r3, #3
 80019be:	4003      	ands	r3, r0
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019c4:	4809      	ldr	r0, [pc, #36]	@ (80019ec <__NVIC_SetPriority+0xd8>)
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	001c      	movs	r4, r3
 80019cc:	230f      	movs	r3, #15
 80019ce:	4023      	ands	r3, r4
 80019d0:	3b08      	subs	r3, #8
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	430a      	orrs	r2, r1
 80019d6:	3306      	adds	r3, #6
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	18c3      	adds	r3, r0, r3
 80019dc:	3304      	adds	r3, #4
 80019de:	601a      	str	r2, [r3, #0]
}
 80019e0:	46c0      	nop			@ (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b003      	add	sp, #12
 80019e6:	bd90      	pop	{r4, r7, pc}
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	1e5a      	subs	r2, r3, #1
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	045b      	lsls	r3, r3, #17
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d301      	bcc.n	8001a08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a04:	2301      	movs	r3, #1
 8001a06:	e010      	b.n	8001a2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a08:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <SysTick_Config+0x44>)
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	3a01      	subs	r2, #1
 8001a0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a10:	2301      	movs	r3, #1
 8001a12:	425b      	negs	r3, r3
 8001a14:	2103      	movs	r1, #3
 8001a16:	0018      	movs	r0, r3
 8001a18:	f7ff ff7c 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <SysTick_Config+0x44>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a22:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <SysTick_Config+0x44>)
 8001a24:	2207      	movs	r2, #7
 8001a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b002      	add	sp, #8
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	e000e010 	.word	0xe000e010

08001a38 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	210f      	movs	r1, #15
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	1c02      	adds	r2, r0, #0
 8001a48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b25b      	sxtb	r3, r3
 8001a52:	0011      	movs	r1, r2
 8001a54:	0018      	movs	r0, r3
 8001a56:	f7ff ff5d 	bl	8001914 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b004      	add	sp, #16
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	0002      	movs	r2, r0
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6e:	1dfb      	adds	r3, r7, #7
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff ff33 	bl	80018e0 <__NVIC_EnableIRQ>
}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b002      	add	sp, #8
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f7ff ffaf 	bl	80019f0 <SysTick_Config>
 8001a92:	0003      	movs	r3, r0
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b002      	add	sp, #8
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aaa:	e14f      	b.n	8001d4c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4091      	lsls	r1, r2
 8001ab6:	000a      	movs	r2, r1
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d100      	bne.n	8001ac4 <HAL_GPIO_Init+0x28>
 8001ac2:	e140      	b.n	8001d46 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2203      	movs	r2, #3
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d005      	beq.n	8001adc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d130      	bne.n	8001b3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	0013      	movs	r3, r2
 8001aec:	43da      	mvns	r2, r3
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	409a      	lsls	r2, r3
 8001afe:	0013      	movs	r3, r2
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b12:	2201      	movs	r2, #1
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
 8001b18:	0013      	movs	r3, r2
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	091b      	lsrs	r3, r3, #4
 8001b28:	2201      	movs	r2, #1
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	0013      	movs	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2203      	movs	r2, #3
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d017      	beq.n	8001b7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	2203      	movs	r2, #3
 8001b56:	409a      	lsls	r2, r3
 8001b58:	0013      	movs	r3, r2
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	0013      	movs	r3, r2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d123      	bne.n	8001bce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	08da      	lsrs	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3208      	adds	r2, #8
 8001b8e:	0092      	lsls	r2, r2, #2
 8001b90:	58d3      	ldr	r3, [r2, r3]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2207      	movs	r2, #7
 8001b98:	4013      	ands	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	0013      	movs	r3, r2
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	691a      	ldr	r2, [r3, #16]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2107      	movs	r1, #7
 8001bb2:	400b      	ands	r3, r1
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	0013      	movs	r3, r2
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	08da      	lsrs	r2, r3, #3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3208      	adds	r2, #8
 8001bc8:	0092      	lsls	r2, r2, #2
 8001bca:	6939      	ldr	r1, [r7, #16]
 8001bcc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	2203      	movs	r2, #3
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	0013      	movs	r3, r2
 8001bde:	43da      	mvns	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2203      	movs	r2, #3
 8001bec:	401a      	ands	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	0013      	movs	r3, r2
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	23c0      	movs	r3, #192	@ 0xc0
 8001c08:	029b      	lsls	r3, r3, #10
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d100      	bne.n	8001c10 <HAL_GPIO_Init+0x174>
 8001c0e:	e09a      	b.n	8001d46 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c10:	4b54      	ldr	r3, [pc, #336]	@ (8001d64 <HAL_GPIO_Init+0x2c8>)
 8001c12:	699a      	ldr	r2, [r3, #24]
 8001c14:	4b53      	ldr	r3, [pc, #332]	@ (8001d64 <HAL_GPIO_Init+0x2c8>)
 8001c16:	2101      	movs	r1, #1
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	619a      	str	r2, [r3, #24]
 8001c1c:	4b51      	ldr	r3, [pc, #324]	@ (8001d64 <HAL_GPIO_Init+0x2c8>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2201      	movs	r2, #1
 8001c22:	4013      	ands	r3, r2
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c28:	4a4f      	ldr	r2, [pc, #316]	@ (8001d68 <HAL_GPIO_Init+0x2cc>)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	089b      	lsrs	r3, r3, #2
 8001c2e:	3302      	adds	r3, #2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	589b      	ldr	r3, [r3, r2]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2203      	movs	r2, #3
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	220f      	movs	r2, #15
 8001c40:	409a      	lsls	r2, r3
 8001c42:	0013      	movs	r3, r2
 8001c44:	43da      	mvns	r2, r3
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	2390      	movs	r3, #144	@ 0x90
 8001c50:	05db      	lsls	r3, r3, #23
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d013      	beq.n	8001c7e <HAL_GPIO_Init+0x1e2>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a44      	ldr	r2, [pc, #272]	@ (8001d6c <HAL_GPIO_Init+0x2d0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00d      	beq.n	8001c7a <HAL_GPIO_Init+0x1de>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a43      	ldr	r2, [pc, #268]	@ (8001d70 <HAL_GPIO_Init+0x2d4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d007      	beq.n	8001c76 <HAL_GPIO_Init+0x1da>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a42      	ldr	r2, [pc, #264]	@ (8001d74 <HAL_GPIO_Init+0x2d8>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d101      	bne.n	8001c72 <HAL_GPIO_Init+0x1d6>
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x1e4>
 8001c72:	2305      	movs	r3, #5
 8001c74:	e004      	b.n	8001c80 <HAL_GPIO_Init+0x1e4>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_Init+0x1e4>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_Init+0x1e4>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	2103      	movs	r1, #3
 8001c84:	400a      	ands	r2, r1
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	4093      	lsls	r3, r2
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c90:	4935      	ldr	r1, [pc, #212]	@ (8001d68 <HAL_GPIO_Init+0x2cc>)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	3302      	adds	r3, #2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9e:	4b36      	ldr	r3, [pc, #216]	@ (8001d78 <HAL_GPIO_Init+0x2dc>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	2380      	movs	r3, #128	@ 0x80
 8001cb4:	035b      	lsls	r3, r3, #13
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d78 <HAL_GPIO_Init+0x2dc>)
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d78 <HAL_GPIO_Init+0x2dc>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	43da      	mvns	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	2380      	movs	r3, #128	@ 0x80
 8001cde:	039b      	lsls	r3, r3, #14
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cec:	4b22      	ldr	r3, [pc, #136]	@ (8001d78 <HAL_GPIO_Init+0x2dc>)
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001cf2:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <HAL_GPIO_Init+0x2dc>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	2380      	movs	r3, #128	@ 0x80
 8001d08:	029b      	lsls	r3, r3, #10
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d16:	4b18      	ldr	r3, [pc, #96]	@ (8001d78 <HAL_GPIO_Init+0x2dc>)
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001d1c:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <HAL_GPIO_Init+0x2dc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	43da      	mvns	r2, r3
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	2380      	movs	r3, #128	@ 0x80
 8001d32:	025b      	lsls	r3, r3, #9
 8001d34:	4013      	ands	r3, r2
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d40:	4b0d      	ldr	r3, [pc, #52]	@ (8001d78 <HAL_GPIO_Init+0x2dc>)
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	40da      	lsrs	r2, r3
 8001d54:	1e13      	subs	r3, r2, #0
 8001d56:	d000      	beq.n	8001d5a <HAL_GPIO_Init+0x2be>
 8001d58:	e6a8      	b.n	8001aac <HAL_GPIO_Init+0x10>
  } 
}
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	46c0      	nop			@ (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b006      	add	sp, #24
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	48000400 	.word	0x48000400
 8001d70:	48000800 	.word	0x48000800
 8001d74:	48000c00 	.word	0x48000c00
 8001d78:	40010400 	.word	0x40010400

08001d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	0008      	movs	r0, r1
 8001d86:	0011      	movs	r1, r2
 8001d88:	1cbb      	adds	r3, r7, #2
 8001d8a:	1c02      	adds	r2, r0, #0
 8001d8c:	801a      	strh	r2, [r3, #0]
 8001d8e:	1c7b      	adds	r3, r7, #1
 8001d90:	1c0a      	adds	r2, r1, #0
 8001d92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d94:	1c7b      	adds	r3, r7, #1
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d004      	beq.n	8001da6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d9c:	1cbb      	adds	r3, r7, #2
 8001d9e:	881a      	ldrh	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001da4:	e003      	b.n	8001dae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001da6:	1cbb      	adds	r3, r7, #2
 8001da8:	881a      	ldrh	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001dae:	46c0      	nop			@ (mov r8, r8)
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b002      	add	sp, #8
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	1dbb      	adds	r3, r7, #6
 8001dc2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dc4:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	1dba      	adds	r2, r7, #6
 8001dca:	8812      	ldrh	r2, [r2, #0]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d008      	beq.n	8001de2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001dd2:	1dba      	adds	r2, r7, #6
 8001dd4:	8812      	ldrh	r2, [r2, #0]
 8001dd6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dd8:	1dbb      	adds	r3, r7, #6
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7ff f8b1 	bl	8000f44 <HAL_GPIO_EXTI_Callback>
  }
}
 8001de2:	46c0      	nop			@ (mov r8, r8)
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b002      	add	sp, #8
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e301      	b.n	8002406 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2201      	movs	r2, #1
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d100      	bne.n	8001e0e <HAL_RCC_OscConfig+0x1e>
 8001e0c:	e08d      	b.n	8001f2a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e0e:	4bc3      	ldr	r3, [pc, #780]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	220c      	movs	r2, #12
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d00e      	beq.n	8001e38 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e1a:	4bc0      	ldr	r3, [pc, #768]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	220c      	movs	r2, #12
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d116      	bne.n	8001e54 <HAL_RCC_OscConfig+0x64>
 8001e26:	4bbd      	ldr	r3, [pc, #756]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	2380      	movs	r3, #128	@ 0x80
 8001e2c:	025b      	lsls	r3, r3, #9
 8001e2e:	401a      	ands	r2, r3
 8001e30:	2380      	movs	r3, #128	@ 0x80
 8001e32:	025b      	lsls	r3, r3, #9
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d10d      	bne.n	8001e54 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	4bb8      	ldr	r3, [pc, #736]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	@ 0x80
 8001e3e:	029b      	lsls	r3, r3, #10
 8001e40:	4013      	ands	r3, r2
 8001e42:	d100      	bne.n	8001e46 <HAL_RCC_OscConfig+0x56>
 8001e44:	e070      	b.n	8001f28 <HAL_RCC_OscConfig+0x138>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d000      	beq.n	8001e50 <HAL_RCC_OscConfig+0x60>
 8001e4e:	e06b      	b.n	8001f28 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e2d8      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d107      	bne.n	8001e6c <HAL_RCC_OscConfig+0x7c>
 8001e5c:	4baf      	ldr	r3, [pc, #700]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4bae      	ldr	r3, [pc, #696]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e62:	2180      	movs	r1, #128	@ 0x80
 8001e64:	0249      	lsls	r1, r1, #9
 8001e66:	430a      	orrs	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e02f      	b.n	8001ecc <HAL_RCC_OscConfig+0xdc>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10c      	bne.n	8001e8e <HAL_RCC_OscConfig+0x9e>
 8001e74:	4ba9      	ldr	r3, [pc, #676]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4ba8      	ldr	r3, [pc, #672]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e7a:	49a9      	ldr	r1, [pc, #676]	@ (8002120 <HAL_RCC_OscConfig+0x330>)
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	4ba6      	ldr	r3, [pc, #664]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4ba5      	ldr	r3, [pc, #660]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e86:	49a7      	ldr	r1, [pc, #668]	@ (8002124 <HAL_RCC_OscConfig+0x334>)
 8001e88:	400a      	ands	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e01e      	b.n	8001ecc <HAL_RCC_OscConfig+0xdc>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d10e      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xc4>
 8001e96:	4ba1      	ldr	r3, [pc, #644]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4ba0      	ldr	r3, [pc, #640]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e9c:	2180      	movs	r1, #128	@ 0x80
 8001e9e:	02c9      	lsls	r1, r1, #11
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	4b9d      	ldr	r3, [pc, #628]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b9c      	ldr	r3, [pc, #624]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001eaa:	2180      	movs	r1, #128	@ 0x80
 8001eac:	0249      	lsls	r1, r1, #9
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0xdc>
 8001eb4:	4b99      	ldr	r3, [pc, #612]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b98      	ldr	r3, [pc, #608]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001eba:	4999      	ldr	r1, [pc, #612]	@ (8002120 <HAL_RCC_OscConfig+0x330>)
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	4b96      	ldr	r3, [pc, #600]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b95      	ldr	r3, [pc, #596]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001ec6:	4997      	ldr	r1, [pc, #604]	@ (8002124 <HAL_RCC_OscConfig+0x334>)
 8001ec8:	400a      	ands	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d014      	beq.n	8001efe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff faa0 	bl	8001418 <HAL_GetTick>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ede:	f7ff fa9b 	bl	8001418 <HAL_GetTick>
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b64      	cmp	r3, #100	@ 0x64
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e28a      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef0:	4b8a      	ldr	r3, [pc, #552]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2380      	movs	r3, #128	@ 0x80
 8001ef6:	029b      	lsls	r3, r3, #10
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0xee>
 8001efc:	e015      	b.n	8001f2a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7ff fa8b 	bl	8001418 <HAL_GetTick>
 8001f02:	0003      	movs	r3, r0
 8001f04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff fa86 	bl	8001418 <HAL_GetTick>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	@ 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e275      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	4b80      	ldr	r3, [pc, #512]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	2380      	movs	r3, #128	@ 0x80
 8001f20:	029b      	lsls	r3, r3, #10
 8001f22:	4013      	ands	r3, r2
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x118>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	4013      	ands	r3, r2
 8001f32:	d100      	bne.n	8001f36 <HAL_RCC_OscConfig+0x146>
 8001f34:	e069      	b.n	800200a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f36:	4b79      	ldr	r3, [pc, #484]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d00b      	beq.n	8001f58 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f40:	4b76      	ldr	r3, [pc, #472]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	220c      	movs	r2, #12
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d11c      	bne.n	8001f86 <HAL_RCC_OscConfig+0x196>
 8001f4c:	4b73      	ldr	r3, [pc, #460]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	2380      	movs	r3, #128	@ 0x80
 8001f52:	025b      	lsls	r3, r3, #9
 8001f54:	4013      	ands	r3, r2
 8001f56:	d116      	bne.n	8001f86 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f58:	4b70      	ldr	r3, [pc, #448]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x17e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e24b      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b6b      	ldr	r3, [pc, #428]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	22f8      	movs	r2, #248	@ 0xf8
 8001f74:	4393      	bics	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	00da      	lsls	r2, r3, #3
 8001f7e:	4b67      	ldr	r3, [pc, #412]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f80:	430a      	orrs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f84:	e041      	b.n	800200a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d024      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8e:	4b63      	ldr	r3, [pc, #396]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4b62      	ldr	r3, [pc, #392]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f94:	2101      	movs	r1, #1
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fa3d 	bl	8001418 <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa4:	f7ff fa38 	bl	8001418 <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e227      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb6:	4b59      	ldr	r3, [pc, #356]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d0f1      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc0:	4b56      	ldr	r3, [pc, #344]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	22f8      	movs	r2, #248	@ 0xf8
 8001fc6:	4393      	bics	r3, r2
 8001fc8:	0019      	movs	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	00da      	lsls	r2, r3, #3
 8001fd0:	4b52      	ldr	r3, [pc, #328]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	e018      	b.n	800200a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd8:	4b50      	ldr	r3, [pc, #320]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b4f      	ldr	r3, [pc, #316]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8001fde:	2101      	movs	r1, #1
 8001fe0:	438a      	bics	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fa18 	bl	8001418 <HAL_GetTick>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fee:	f7ff fa13 	bl	8001418 <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e202      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002000:	4b46      	ldr	r3, [pc, #280]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2202      	movs	r2, #2
 8002006:	4013      	ands	r3, r2
 8002008:	d1f1      	bne.n	8001fee <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2208      	movs	r2, #8
 8002010:	4013      	ands	r3, r2
 8002012:	d036      	beq.n	8002082 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d019      	beq.n	8002050 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201c:	4b3f      	ldr	r3, [pc, #252]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 800201e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002020:	4b3e      	ldr	r3, [pc, #248]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8002022:	2101      	movs	r1, #1
 8002024:	430a      	orrs	r2, r1
 8002026:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002028:	f7ff f9f6 	bl	8001418 <HAL_GetTick>
 800202c:	0003      	movs	r3, r0
 800202e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002032:	f7ff f9f1 	bl	8001418 <HAL_GetTick>
 8002036:	0002      	movs	r2, r0
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e1e0      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002044:	4b35      	ldr	r3, [pc, #212]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8002046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002048:	2202      	movs	r2, #2
 800204a:	4013      	ands	r3, r2
 800204c:	d0f1      	beq.n	8002032 <HAL_RCC_OscConfig+0x242>
 800204e:	e018      	b.n	8002082 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002050:	4b32      	ldr	r3, [pc, #200]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8002052:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002054:	4b31      	ldr	r3, [pc, #196]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8002056:	2101      	movs	r1, #1
 8002058:	438a      	bics	r2, r1
 800205a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205c:	f7ff f9dc 	bl	8001418 <HAL_GetTick>
 8002060:	0003      	movs	r3, r0
 8002062:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002066:	f7ff f9d7 	bl	8001418 <HAL_GetTick>
 800206a:	0002      	movs	r2, r0
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e1c6      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	4b28      	ldr	r3, [pc, #160]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207c:	2202      	movs	r2, #2
 800207e:	4013      	ands	r3, r2
 8002080:	d1f1      	bne.n	8002066 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2204      	movs	r2, #4
 8002088:	4013      	ands	r3, r2
 800208a:	d100      	bne.n	800208e <HAL_RCC_OscConfig+0x29e>
 800208c:	e0b4      	b.n	80021f8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208e:	201f      	movs	r0, #31
 8002090:	183b      	adds	r3, r7, r0
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002096:	4b21      	ldr	r3, [pc, #132]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8002098:	69da      	ldr	r2, [r3, #28]
 800209a:	2380      	movs	r3, #128	@ 0x80
 800209c:	055b      	lsls	r3, r3, #21
 800209e:	4013      	ands	r3, r2
 80020a0:	d110      	bne.n	80020c4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	4b1e      	ldr	r3, [pc, #120]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 80020a4:	69da      	ldr	r2, [r3, #28]
 80020a6:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 80020a8:	2180      	movs	r1, #128	@ 0x80
 80020aa:	0549      	lsls	r1, r1, #21
 80020ac:	430a      	orrs	r2, r1
 80020ae:	61da      	str	r2, [r3, #28]
 80020b0:	4b1a      	ldr	r3, [pc, #104]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 80020b2:	69da      	ldr	r2, [r3, #28]
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	055b      	lsls	r3, r3, #21
 80020b8:	4013      	ands	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020be:	183b      	adds	r3, r7, r0
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <HAL_RCC_OscConfig+0x338>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	@ 0x80
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4013      	ands	r3, r2
 80020ce:	d11a      	bne.n	8002106 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020d0:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <HAL_RCC_OscConfig+0x338>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b14      	ldr	r3, [pc, #80]	@ (8002128 <HAL_RCC_OscConfig+0x338>)
 80020d6:	2180      	movs	r1, #128	@ 0x80
 80020d8:	0049      	lsls	r1, r1, #1
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020de:	f7ff f99b 	bl	8001418 <HAL_GetTick>
 80020e2:	0003      	movs	r3, r0
 80020e4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e8:	f7ff f996 	bl	8001418 <HAL_GetTick>
 80020ec:	0002      	movs	r2, r0
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	@ 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e185      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <HAL_RCC_OscConfig+0x338>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	2380      	movs	r3, #128	@ 0x80
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4013      	ands	r3, r2
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d10e      	bne.n	800212c <HAL_RCC_OscConfig+0x33c>
 800210e:	4b03      	ldr	r3, [pc, #12]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8002110:	6a1a      	ldr	r2, [r3, #32]
 8002112:	4b02      	ldr	r3, [pc, #8]	@ (800211c <HAL_RCC_OscConfig+0x32c>)
 8002114:	2101      	movs	r1, #1
 8002116:	430a      	orrs	r2, r1
 8002118:	621a      	str	r2, [r3, #32]
 800211a:	e035      	b.n	8002188 <HAL_RCC_OscConfig+0x398>
 800211c:	40021000 	.word	0x40021000
 8002120:	fffeffff 	.word	0xfffeffff
 8002124:	fffbffff 	.word	0xfffbffff
 8002128:	40007000 	.word	0x40007000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10c      	bne.n	800214e <HAL_RCC_OscConfig+0x35e>
 8002134:	4bb6      	ldr	r3, [pc, #728]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002136:	6a1a      	ldr	r2, [r3, #32]
 8002138:	4bb5      	ldr	r3, [pc, #724]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 800213a:	2101      	movs	r1, #1
 800213c:	438a      	bics	r2, r1
 800213e:	621a      	str	r2, [r3, #32]
 8002140:	4bb3      	ldr	r3, [pc, #716]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002142:	6a1a      	ldr	r2, [r3, #32]
 8002144:	4bb2      	ldr	r3, [pc, #712]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002146:	2104      	movs	r1, #4
 8002148:	438a      	bics	r2, r1
 800214a:	621a      	str	r2, [r3, #32]
 800214c:	e01c      	b.n	8002188 <HAL_RCC_OscConfig+0x398>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b05      	cmp	r3, #5
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x380>
 8002156:	4bae      	ldr	r3, [pc, #696]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002158:	6a1a      	ldr	r2, [r3, #32]
 800215a:	4bad      	ldr	r3, [pc, #692]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 800215c:	2104      	movs	r1, #4
 800215e:	430a      	orrs	r2, r1
 8002160:	621a      	str	r2, [r3, #32]
 8002162:	4bab      	ldr	r3, [pc, #684]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002164:	6a1a      	ldr	r2, [r3, #32]
 8002166:	4baa      	ldr	r3, [pc, #680]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002168:	2101      	movs	r1, #1
 800216a:	430a      	orrs	r2, r1
 800216c:	621a      	str	r2, [r3, #32]
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0x398>
 8002170:	4ba7      	ldr	r3, [pc, #668]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002172:	6a1a      	ldr	r2, [r3, #32]
 8002174:	4ba6      	ldr	r3, [pc, #664]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002176:	2101      	movs	r1, #1
 8002178:	438a      	bics	r2, r1
 800217a:	621a      	str	r2, [r3, #32]
 800217c:	4ba4      	ldr	r3, [pc, #656]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	4ba3      	ldr	r3, [pc, #652]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002182:	2104      	movs	r1, #4
 8002184:	438a      	bics	r2, r1
 8002186:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d014      	beq.n	80021ba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002190:	f7ff f942 	bl	8001418 <HAL_GetTick>
 8002194:	0003      	movs	r3, r0
 8002196:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002198:	e009      	b.n	80021ae <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7ff f93d 	bl	8001418 <HAL_GetTick>
 800219e:	0002      	movs	r2, r0
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	4a9b      	ldr	r2, [pc, #620]	@ (8002414 <HAL_RCC_OscConfig+0x624>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e12b      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ae:	4b98      	ldr	r3, [pc, #608]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	2202      	movs	r2, #2
 80021b4:	4013      	ands	r3, r2
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x3aa>
 80021b8:	e013      	b.n	80021e2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ba:	f7ff f92d 	bl	8001418 <HAL_GetTick>
 80021be:	0003      	movs	r3, r0
 80021c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c2:	e009      	b.n	80021d8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c4:	f7ff f928 	bl	8001418 <HAL_GetTick>
 80021c8:	0002      	movs	r2, r0
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	4a91      	ldr	r2, [pc, #580]	@ (8002414 <HAL_RCC_OscConfig+0x624>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e116      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d8:	4b8d      	ldr	r3, [pc, #564]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	2202      	movs	r2, #2
 80021de:	4013      	ands	r3, r2
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021e2:	231f      	movs	r3, #31
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b88      	ldr	r3, [pc, #544]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	4b87      	ldr	r3, [pc, #540]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 80021f2:	4989      	ldr	r1, [pc, #548]	@ (8002418 <HAL_RCC_OscConfig+0x628>)
 80021f4:	400a      	ands	r2, r1
 80021f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2210      	movs	r2, #16
 80021fe:	4013      	ands	r3, r2
 8002200:	d063      	beq.n	80022ca <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d12a      	bne.n	8002260 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800220a:	4b81      	ldr	r3, [pc, #516]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 800220c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800220e:	4b80      	ldr	r3, [pc, #512]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002210:	2104      	movs	r1, #4
 8002212:	430a      	orrs	r2, r1
 8002214:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002216:	4b7e      	ldr	r3, [pc, #504]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800221a:	4b7d      	ldr	r3, [pc, #500]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 800221c:	2101      	movs	r1, #1
 800221e:	430a      	orrs	r2, r1
 8002220:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002222:	f7ff f8f9 	bl	8001418 <HAL_GetTick>
 8002226:	0003      	movs	r3, r0
 8002228:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800222c:	f7ff f8f4 	bl	8001418 <HAL_GetTick>
 8002230:	0002      	movs	r2, r0
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e0e3      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800223e:	4b74      	ldr	r3, [pc, #464]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002242:	2202      	movs	r2, #2
 8002244:	4013      	ands	r3, r2
 8002246:	d0f1      	beq.n	800222c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002248:	4b71      	ldr	r3, [pc, #452]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 800224a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800224c:	22f8      	movs	r2, #248	@ 0xf8
 800224e:	4393      	bics	r3, r2
 8002250:	0019      	movs	r1, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	00da      	lsls	r2, r3, #3
 8002258:	4b6d      	ldr	r3, [pc, #436]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 800225a:	430a      	orrs	r2, r1
 800225c:	635a      	str	r2, [r3, #52]	@ 0x34
 800225e:	e034      	b.n	80022ca <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	3305      	adds	r3, #5
 8002266:	d111      	bne.n	800228c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002268:	4b69      	ldr	r3, [pc, #420]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 800226a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800226c:	4b68      	ldr	r3, [pc, #416]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 800226e:	2104      	movs	r1, #4
 8002270:	438a      	bics	r2, r1
 8002272:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002274:	4b66      	ldr	r3, [pc, #408]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002278:	22f8      	movs	r2, #248	@ 0xf8
 800227a:	4393      	bics	r3, r2
 800227c:	0019      	movs	r1, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	00da      	lsls	r2, r3, #3
 8002284:	4b62      	ldr	r3, [pc, #392]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002286:	430a      	orrs	r2, r1
 8002288:	635a      	str	r2, [r3, #52]	@ 0x34
 800228a:	e01e      	b.n	80022ca <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800228c:	4b60      	ldr	r3, [pc, #384]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 800228e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002290:	4b5f      	ldr	r3, [pc, #380]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002292:	2104      	movs	r1, #4
 8002294:	430a      	orrs	r2, r1
 8002296:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002298:	4b5d      	ldr	r3, [pc, #372]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 800229a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800229c:	4b5c      	ldr	r3, [pc, #368]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 800229e:	2101      	movs	r1, #1
 80022a0:	438a      	bics	r2, r1
 80022a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a4:	f7ff f8b8 	bl	8001418 <HAL_GetTick>
 80022a8:	0003      	movs	r3, r0
 80022aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022ae:	f7ff f8b3 	bl	8001418 <HAL_GetTick>
 80022b2:	0002      	movs	r2, r0
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e0a2      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022c0:	4b53      	ldr	r3, [pc, #332]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 80022c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c4:	2202      	movs	r2, #2
 80022c6:	4013      	ands	r3, r2
 80022c8:	d1f1      	bne.n	80022ae <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d100      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4e4>
 80022d2:	e097      	b.n	8002404 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022d4:	4b4e      	ldr	r3, [pc, #312]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	220c      	movs	r2, #12
 80022da:	4013      	ands	r3, r2
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d100      	bne.n	80022e2 <HAL_RCC_OscConfig+0x4f2>
 80022e0:	e06b      	b.n	80023ba <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d14c      	bne.n	8002384 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ea:	4b49      	ldr	r3, [pc, #292]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	4b48      	ldr	r3, [pc, #288]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 80022f0:	494a      	ldr	r1, [pc, #296]	@ (800241c <HAL_RCC_OscConfig+0x62c>)
 80022f2:	400a      	ands	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7ff f88f 	bl	8001418 <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002300:	f7ff f88a 	bl	8001418 <HAL_GetTick>
 8002304:	0002      	movs	r2, r0
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e079      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002312:	4b3f      	ldr	r3, [pc, #252]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	2380      	movs	r3, #128	@ 0x80
 8002318:	049b      	lsls	r3, r3, #18
 800231a:	4013      	ands	r3, r2
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800231e:	4b3c      	ldr	r3, [pc, #240]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002322:	220f      	movs	r2, #15
 8002324:	4393      	bics	r3, r2
 8002326:	0019      	movs	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800232c:	4b38      	ldr	r3, [pc, #224]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 800232e:	430a      	orrs	r2, r1
 8002330:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002332:	4b37      	ldr	r3, [pc, #220]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4a3a      	ldr	r2, [pc, #232]	@ (8002420 <HAL_RCC_OscConfig+0x630>)
 8002338:	4013      	ands	r3, r2
 800233a:	0019      	movs	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002344:	431a      	orrs	r2, r3
 8002346:	4b32      	ldr	r3, [pc, #200]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002348:	430a      	orrs	r2, r1
 800234a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800234c:	4b30      	ldr	r3, [pc, #192]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b2f      	ldr	r3, [pc, #188]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002352:	2180      	movs	r1, #128	@ 0x80
 8002354:	0449      	lsls	r1, r1, #17
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7ff f85d 	bl	8001418 <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002364:	f7ff f858 	bl	8001418 <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e047      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002376:	4b26      	ldr	r3, [pc, #152]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	2380      	movs	r3, #128	@ 0x80
 800237c:	049b      	lsls	r3, r3, #18
 800237e:	4013      	ands	r3, r2
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x574>
 8002382:	e03f      	b.n	8002404 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002384:	4b22      	ldr	r3, [pc, #136]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b21      	ldr	r3, [pc, #132]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 800238a:	4924      	ldr	r1, [pc, #144]	@ (800241c <HAL_RCC_OscConfig+0x62c>)
 800238c:	400a      	ands	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff f842 	bl	8001418 <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239a:	f7ff f83d 	bl	8001418 <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e02c      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ac:	4b18      	ldr	r3, [pc, #96]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2380      	movs	r3, #128	@ 0x80
 80023b2:	049b      	lsls	r3, r3, #18
 80023b4:	4013      	ands	r3, r2
 80023b6:	d1f0      	bne.n	800239a <HAL_RCC_OscConfig+0x5aa>
 80023b8:	e024      	b.n	8002404 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e01f      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80023c6:	4b12      	ldr	r3, [pc, #72]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80023cc:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <HAL_RCC_OscConfig+0x620>)
 80023ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	2380      	movs	r3, #128	@ 0x80
 80023d6:	025b      	lsls	r3, r3, #9
 80023d8:	401a      	ands	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	429a      	cmp	r2, r3
 80023e0:	d10e      	bne.n	8002400 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	220f      	movs	r2, #15
 80023e6:	401a      	ands	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	23f0      	movs	r3, #240	@ 0xf0
 80023f4:	039b      	lsls	r3, r3, #14
 80023f6:	401a      	ands	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	0018      	movs	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	b008      	add	sp, #32
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	40021000 	.word	0x40021000
 8002414:	00001388 	.word	0x00001388
 8002418:	efffffff 	.word	0xefffffff
 800241c:	feffffff 	.word	0xfeffffff
 8002420:	ffc2ffff 	.word	0xffc2ffff

08002424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0b3      	b.n	80025a0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4b5b      	ldr	r3, [pc, #364]	@ (80025a8 <HAL_RCC_ClockConfig+0x184>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2201      	movs	r2, #1
 800243e:	4013      	ands	r3, r2
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d911      	bls.n	800246a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b58      	ldr	r3, [pc, #352]	@ (80025a8 <HAL_RCC_ClockConfig+0x184>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2201      	movs	r2, #1
 800244c:	4393      	bics	r3, r2
 800244e:	0019      	movs	r1, r3
 8002450:	4b55      	ldr	r3, [pc, #340]	@ (80025a8 <HAL_RCC_ClockConfig+0x184>)
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002458:	4b53      	ldr	r3, [pc, #332]	@ (80025a8 <HAL_RCC_ClockConfig+0x184>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2201      	movs	r2, #1
 800245e:	4013      	ands	r3, r2
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d001      	beq.n	800246a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e09a      	b.n	80025a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2202      	movs	r2, #2
 8002470:	4013      	ands	r3, r2
 8002472:	d015      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2204      	movs	r2, #4
 800247a:	4013      	ands	r3, r2
 800247c:	d006      	beq.n	800248c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800247e:	4b4b      	ldr	r3, [pc, #300]	@ (80025ac <HAL_RCC_ClockConfig+0x188>)
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	4b4a      	ldr	r3, [pc, #296]	@ (80025ac <HAL_RCC_ClockConfig+0x188>)
 8002484:	21e0      	movs	r1, #224	@ 0xe0
 8002486:	00c9      	lsls	r1, r1, #3
 8002488:	430a      	orrs	r2, r1
 800248a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800248c:	4b47      	ldr	r3, [pc, #284]	@ (80025ac <HAL_RCC_ClockConfig+0x188>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	22f0      	movs	r2, #240	@ 0xf0
 8002492:	4393      	bics	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	4b44      	ldr	r3, [pc, #272]	@ (80025ac <HAL_RCC_ClockConfig+0x188>)
 800249c:	430a      	orrs	r2, r1
 800249e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2201      	movs	r2, #1
 80024a6:	4013      	ands	r3, r2
 80024a8:	d040      	beq.n	800252c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d107      	bne.n	80024c2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	4b3e      	ldr	r3, [pc, #248]	@ (80025ac <HAL_RCC_ClockConfig+0x188>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	2380      	movs	r3, #128	@ 0x80
 80024b8:	029b      	lsls	r3, r3, #10
 80024ba:	4013      	ands	r3, r2
 80024bc:	d114      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e06e      	b.n	80025a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ca:	4b38      	ldr	r3, [pc, #224]	@ (80025ac <HAL_RCC_ClockConfig+0x188>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	2380      	movs	r3, #128	@ 0x80
 80024d0:	049b      	lsls	r3, r3, #18
 80024d2:	4013      	ands	r3, r2
 80024d4:	d108      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e062      	b.n	80025a0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024da:	4b34      	ldr	r3, [pc, #208]	@ (80025ac <HAL_RCC_ClockConfig+0x188>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2202      	movs	r2, #2
 80024e0:	4013      	ands	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e05b      	b.n	80025a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e8:	4b30      	ldr	r3, [pc, #192]	@ (80025ac <HAL_RCC_ClockConfig+0x188>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	4393      	bics	r3, r2
 80024f0:	0019      	movs	r1, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4b2d      	ldr	r3, [pc, #180]	@ (80025ac <HAL_RCC_ClockConfig+0x188>)
 80024f8:	430a      	orrs	r2, r1
 80024fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024fc:	f7fe ff8c 	bl	8001418 <HAL_GetTick>
 8002500:	0003      	movs	r3, r0
 8002502:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002504:	e009      	b.n	800251a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002506:	f7fe ff87 	bl	8001418 <HAL_GetTick>
 800250a:	0002      	movs	r2, r0
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	4a27      	ldr	r2, [pc, #156]	@ (80025b0 <HAL_RCC_ClockConfig+0x18c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e042      	b.n	80025a0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	4b24      	ldr	r3, [pc, #144]	@ (80025ac <HAL_RCC_ClockConfig+0x188>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	220c      	movs	r2, #12
 8002520:	401a      	ands	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	429a      	cmp	r2, r3
 800252a:	d1ec      	bne.n	8002506 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800252c:	4b1e      	ldr	r3, [pc, #120]	@ (80025a8 <HAL_RCC_ClockConfig+0x184>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2201      	movs	r2, #1
 8002532:	4013      	ands	r3, r2
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d211      	bcs.n	800255e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b1b      	ldr	r3, [pc, #108]	@ (80025a8 <HAL_RCC_ClockConfig+0x184>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2201      	movs	r2, #1
 8002540:	4393      	bics	r3, r2
 8002542:	0019      	movs	r1, r3
 8002544:	4b18      	ldr	r3, [pc, #96]	@ (80025a8 <HAL_RCC_ClockConfig+0x184>)
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254c:	4b16      	ldr	r3, [pc, #88]	@ (80025a8 <HAL_RCC_ClockConfig+0x184>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2201      	movs	r2, #1
 8002552:	4013      	ands	r3, r2
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d001      	beq.n	800255e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e020      	b.n	80025a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2204      	movs	r2, #4
 8002564:	4013      	ands	r3, r2
 8002566:	d009      	beq.n	800257c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002568:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <HAL_RCC_ClockConfig+0x188>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a11      	ldr	r2, [pc, #68]	@ (80025b4 <HAL_RCC_ClockConfig+0x190>)
 800256e:	4013      	ands	r3, r2
 8002570:	0019      	movs	r1, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <HAL_RCC_ClockConfig+0x188>)
 8002578:	430a      	orrs	r2, r1
 800257a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800257c:	f000 f820 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8002580:	0001      	movs	r1, r0
 8002582:	4b0a      	ldr	r3, [pc, #40]	@ (80025ac <HAL_RCC_ClockConfig+0x188>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	220f      	movs	r2, #15
 800258a:	4013      	ands	r3, r2
 800258c:	4a0a      	ldr	r2, [pc, #40]	@ (80025b8 <HAL_RCC_ClockConfig+0x194>)
 800258e:	5cd3      	ldrb	r3, [r2, r3]
 8002590:	000a      	movs	r2, r1
 8002592:	40da      	lsrs	r2, r3
 8002594:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <HAL_RCC_ClockConfig+0x198>)
 8002596:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002598:	2003      	movs	r0, #3
 800259a:	f7fe fef7 	bl	800138c <HAL_InitTick>
  
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b004      	add	sp, #16
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40022000 	.word	0x40022000
 80025ac:	40021000 	.word	0x40021000
 80025b0:	00001388 	.word	0x00001388
 80025b4:	fffff8ff 	.word	0xfffff8ff
 80025b8:	08004608 	.word	0x08004608
 80025bc:	20000014 	.word	0x20000014

080025c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	2300      	movs	r3, #0
 80025d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80025da:	4b20      	ldr	r3, [pc, #128]	@ (800265c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	220c      	movs	r2, #12
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d002      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x30>
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x36>
 80025ee:	e02c      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002660 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025f2:	613b      	str	r3, [r7, #16]
      break;
 80025f4:	e02c      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	0c9b      	lsrs	r3, r3, #18
 80025fa:	220f      	movs	r2, #15
 80025fc:	4013      	ands	r3, r2
 80025fe:	4a19      	ldr	r2, [pc, #100]	@ (8002664 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002600:	5cd3      	ldrb	r3, [r2, r3]
 8002602:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002604:	4b15      	ldr	r3, [pc, #84]	@ (800265c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	220f      	movs	r2, #15
 800260a:	4013      	ands	r3, r2
 800260c:	4a16      	ldr	r2, [pc, #88]	@ (8002668 <HAL_RCC_GetSysClockFreq+0xa8>)
 800260e:	5cd3      	ldrb	r3, [r2, r3]
 8002610:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	025b      	lsls	r3, r3, #9
 8002618:	4013      	ands	r3, r2
 800261a:	d009      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	4810      	ldr	r0, [pc, #64]	@ (8002660 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002620:	f7fd fd7c 	bl	800011c <__udivsi3>
 8002624:	0003      	movs	r3, r0
 8002626:	001a      	movs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4353      	muls	r3, r2
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e009      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	000a      	movs	r2, r1
 8002634:	0152      	lsls	r2, r2, #5
 8002636:	1a52      	subs	r2, r2, r1
 8002638:	0193      	lsls	r3, r2, #6
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	185b      	adds	r3, r3, r1
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	613b      	str	r3, [r7, #16]
      break;
 8002648:	e002      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800264a:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <HAL_RCC_GetSysClockFreq+0xa0>)
 800264c:	613b      	str	r3, [r7, #16]
      break;
 800264e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002650:	693b      	ldr	r3, [r7, #16]
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b006      	add	sp, #24
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	40021000 	.word	0x40021000
 8002660:	007a1200 	.word	0x007a1200
 8002664:	08004620 	.word	0x08004620
 8002668:	08004630 	.word	0x08004630

0800266c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002670:	4b02      	ldr	r3, [pc, #8]	@ (800267c <HAL_RCC_GetHCLKFreq+0x10>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			@ (mov r8, r8)
 800267c:	20000014 	.word	0x20000014

08002680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002684:	f7ff fff2 	bl	800266c <HAL_RCC_GetHCLKFreq>
 8002688:	0001      	movs	r1, r0
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	2207      	movs	r2, #7
 8002692:	4013      	ands	r3, r2
 8002694:	4a04      	ldr	r2, [pc, #16]	@ (80026a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	40d9      	lsrs	r1, r3
 800269a:	000b      	movs	r3, r1
}    
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	40021000 	.word	0x40021000
 80026a8:	08004618 	.word	0x08004618

080026ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	2380      	movs	r3, #128	@ 0x80
 80026c2:	025b      	lsls	r3, r3, #9
 80026c4:	4013      	ands	r3, r2
 80026c6:	d100      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80026c8:	e08e      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80026ca:	2017      	movs	r0, #23
 80026cc:	183b      	adds	r3, r7, r0
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d2:	4b57      	ldr	r3, [pc, #348]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	055b      	lsls	r3, r3, #21
 80026da:	4013      	ands	r3, r2
 80026dc:	d110      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	4b54      	ldr	r3, [pc, #336]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026e0:	69da      	ldr	r2, [r3, #28]
 80026e2:	4b53      	ldr	r3, [pc, #332]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026e4:	2180      	movs	r1, #128	@ 0x80
 80026e6:	0549      	lsls	r1, r1, #21
 80026e8:	430a      	orrs	r2, r1
 80026ea:	61da      	str	r2, [r3, #28]
 80026ec:	4b50      	ldr	r3, [pc, #320]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	055b      	lsls	r3, r3, #21
 80026f4:	4013      	ands	r3, r2
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fa:	183b      	adds	r3, r7, r0
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	4b4c      	ldr	r3, [pc, #304]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2380      	movs	r3, #128	@ 0x80
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4013      	ands	r3, r2
 800270a:	d11a      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270c:	4b49      	ldr	r3, [pc, #292]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b48      	ldr	r3, [pc, #288]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002712:	2180      	movs	r1, #128	@ 0x80
 8002714:	0049      	lsls	r1, r1, #1
 8002716:	430a      	orrs	r2, r1
 8002718:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271a:	f7fe fe7d 	bl	8001418 <HAL_GetTick>
 800271e:	0003      	movs	r3, r0
 8002720:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002722:	e008      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002724:	f7fe fe78 	bl	8001418 <HAL_GetTick>
 8002728:	0002      	movs	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	@ 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e077      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002736:	4b3f      	ldr	r3, [pc, #252]	@ (8002834 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	2380      	movs	r3, #128	@ 0x80
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4013      	ands	r3, r2
 8002740:	d0f0      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002742:	4b3b      	ldr	r3, [pc, #236]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002744:	6a1a      	ldr	r2, [r3, #32]
 8002746:	23c0      	movs	r3, #192	@ 0xc0
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4013      	ands	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d034      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	23c0      	movs	r3, #192	@ 0xc0
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4013      	ands	r3, r2
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	429a      	cmp	r2, r3
 8002762:	d02c      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002764:	4b32      	ldr	r3, [pc, #200]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4a33      	ldr	r2, [pc, #204]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800276a:	4013      	ands	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800276e:	4b30      	ldr	r3, [pc, #192]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002770:	6a1a      	ldr	r2, [r3, #32]
 8002772:	4b2f      	ldr	r3, [pc, #188]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002774:	2180      	movs	r1, #128	@ 0x80
 8002776:	0249      	lsls	r1, r1, #9
 8002778:	430a      	orrs	r2, r1
 800277a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800277c:	4b2c      	ldr	r3, [pc, #176]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800277e:	6a1a      	ldr	r2, [r3, #32]
 8002780:	4b2b      	ldr	r3, [pc, #172]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002782:	492e      	ldr	r1, [pc, #184]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002784:	400a      	ands	r2, r1
 8002786:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002788:	4b29      	ldr	r3, [pc, #164]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	4013      	ands	r3, r2
 8002794:	d013      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7fe fe3f 	bl	8001418 <HAL_GetTick>
 800279a:	0003      	movs	r3, r0
 800279c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279e:	e009      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7fe fe3a 	bl	8001418 <HAL_GetTick>
 80027a4:	0002      	movs	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	4a25      	ldr	r2, [pc, #148]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e038      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	2202      	movs	r2, #2
 80027ba:	4013      	ands	r3, r2
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027be:	4b1c      	ldr	r3, [pc, #112]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002838 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	4b18      	ldr	r3, [pc, #96]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027ce:	430a      	orrs	r2, r1
 80027d0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027d2:	2317      	movs	r3, #23
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d105      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027dc:	4b14      	ldr	r3, [pc, #80]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027de:	69da      	ldr	r2, [r3, #28]
 80027e0:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027e2:	4918      	ldr	r1, [pc, #96]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80027e4:	400a      	ands	r2, r1
 80027e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2201      	movs	r2, #1
 80027ee:	4013      	ands	r3, r2
 80027f0:	d009      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	2203      	movs	r2, #3
 80027f8:	4393      	bics	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002802:	430a      	orrs	r2, r1
 8002804:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2220      	movs	r2, #32
 800280c:	4013      	ands	r3, r2
 800280e:	d009      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002810:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002814:	2210      	movs	r2, #16
 8002816:	4393      	bics	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	4b04      	ldr	r3, [pc, #16]	@ (8002830 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002820:	430a      	orrs	r2, r1
 8002822:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b006      	add	sp, #24
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	40021000 	.word	0x40021000
 8002834:	40007000 	.word	0x40007000
 8002838:	fffffcff 	.word	0xfffffcff
 800283c:	fffeffff 	.word	0xfffeffff
 8002840:	00001388 	.word	0x00001388
 8002844:	efffffff 	.word	0xefffffff

08002848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e042      	b.n	80028e0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	223d      	movs	r2, #61	@ 0x3d
 800285e:	5c9b      	ldrb	r3, [r3, r2]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d107      	bne.n	8002876 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	223c      	movs	r2, #60	@ 0x3c
 800286a:	2100      	movs	r1, #0
 800286c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0018      	movs	r0, r3
 8002872:	f7fe fc03 	bl	800107c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	223d      	movs	r2, #61	@ 0x3d
 800287a:	2102      	movs	r1, #2
 800287c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3304      	adds	r3, #4
 8002886:	0019      	movs	r1, r3
 8002888:	0010      	movs	r0, r2
 800288a:	f000 f943 	bl	8002b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2246      	movs	r2, #70	@ 0x46
 8002892:	2101      	movs	r1, #1
 8002894:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	223e      	movs	r2, #62	@ 0x3e
 800289a:	2101      	movs	r1, #1
 800289c:	5499      	strb	r1, [r3, r2]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	223f      	movs	r2, #63	@ 0x3f
 80028a2:	2101      	movs	r1, #1
 80028a4:	5499      	strb	r1, [r3, r2]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2240      	movs	r2, #64	@ 0x40
 80028aa:	2101      	movs	r1, #1
 80028ac:	5499      	strb	r1, [r3, r2]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2241      	movs	r2, #65	@ 0x41
 80028b2:	2101      	movs	r1, #1
 80028b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2242      	movs	r2, #66	@ 0x42
 80028ba:	2101      	movs	r1, #1
 80028bc:	5499      	strb	r1, [r3, r2]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2243      	movs	r2, #67	@ 0x43
 80028c2:	2101      	movs	r1, #1
 80028c4:	5499      	strb	r1, [r3, r2]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2244      	movs	r2, #68	@ 0x44
 80028ca:	2101      	movs	r1, #1
 80028cc:	5499      	strb	r1, [r3, r2]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2245      	movs	r2, #69	@ 0x45
 80028d2:	2101      	movs	r1, #1
 80028d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	223d      	movs	r2, #61	@ 0x3d
 80028da:	2101      	movs	r1, #1
 80028dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b002      	add	sp, #8
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2202      	movs	r2, #2
 8002904:	4013      	ands	r3, r2
 8002906:	d021      	beq.n	800294c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2202      	movs	r2, #2
 800290c:	4013      	ands	r3, r2
 800290e:	d01d      	beq.n	800294c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2203      	movs	r2, #3
 8002916:	4252      	negs	r2, r2
 8002918:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2203      	movs	r2, #3
 8002928:	4013      	ands	r3, r2
 800292a:	d004      	beq.n	8002936 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	0018      	movs	r0, r3
 8002930:	f000 f8d8 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
 8002934:	e007      	b.n	8002946 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0018      	movs	r0, r3
 800293a:	f000 f8cb 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	0018      	movs	r0, r3
 8002942:	f000 f8d7 	bl	8002af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2204      	movs	r2, #4
 8002950:	4013      	ands	r3, r2
 8002952:	d022      	beq.n	800299a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2204      	movs	r2, #4
 8002958:	4013      	ands	r3, r2
 800295a:	d01e      	beq.n	800299a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2205      	movs	r2, #5
 8002962:	4252      	negs	r2, r2
 8002964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2202      	movs	r2, #2
 800296a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	23c0      	movs	r3, #192	@ 0xc0
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4013      	ands	r3, r2
 8002978:	d004      	beq.n	8002984 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	0018      	movs	r0, r3
 800297e:	f000 f8b1 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
 8002982:	e007      	b.n	8002994 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	0018      	movs	r0, r3
 8002988:	f000 f8a4 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	0018      	movs	r0, r3
 8002990:	f000 f8b0 	bl	8002af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2208      	movs	r2, #8
 800299e:	4013      	ands	r3, r2
 80029a0:	d021      	beq.n	80029e6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2208      	movs	r2, #8
 80029a6:	4013      	ands	r3, r2
 80029a8:	d01d      	beq.n	80029e6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2209      	movs	r2, #9
 80029b0:	4252      	negs	r2, r2
 80029b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2204      	movs	r2, #4
 80029b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	2203      	movs	r2, #3
 80029c2:	4013      	ands	r3, r2
 80029c4:	d004      	beq.n	80029d0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f000 f88b 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
 80029ce:	e007      	b.n	80029e0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 f87e 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 f88a 	bl	8002af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2210      	movs	r2, #16
 80029ea:	4013      	ands	r3, r2
 80029ec:	d022      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2210      	movs	r2, #16
 80029f2:	4013      	ands	r3, r2
 80029f4:	d01e      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2211      	movs	r2, #17
 80029fc:	4252      	negs	r2, r2
 80029fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2208      	movs	r2, #8
 8002a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	23c0      	movs	r3, #192	@ 0xc0
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4013      	ands	r3, r2
 8002a12:	d004      	beq.n	8002a1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f000 f864 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
 8002a1c:	e007      	b.n	8002a2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 f857 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f000 f863 	bl	8002af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2201      	movs	r2, #1
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d00c      	beq.n	8002a56 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4013      	ands	r3, r2
 8002a42:	d008      	beq.n	8002a56 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	4252      	negs	r2, r2
 8002a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 f837 	bl	8002ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2280      	movs	r2, #128	@ 0x80
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d00c      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2280      	movs	r2, #128	@ 0x80
 8002a62:	4013      	ands	r3, r2
 8002a64:	d008      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2281      	movs	r2, #129	@ 0x81
 8002a6c:	4252      	negs	r2, r2
 8002a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	0018      	movs	r0, r3
 8002a74:	f000 f8da 	bl	8002c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2240      	movs	r2, #64	@ 0x40
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d00c      	beq.n	8002a9a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2240      	movs	r2, #64	@ 0x40
 8002a84:	4013      	ands	r3, r2
 8002a86:	d008      	beq.n	8002a9a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2241      	movs	r2, #65	@ 0x41
 8002a8e:	4252      	negs	r2, r2
 8002a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 f835 	bl	8002b04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d00c      	beq.n	8002abc <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d008      	beq.n	8002abc <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2221      	movs	r2, #33	@ 0x21
 8002ab0:	4252      	negs	r2, r2
 8002ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 f8b0 	bl	8002c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002abc:	46c0      	nop			@ (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b004      	add	sp, #16
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002acc:	46c0      	nop			@ (mov r8, r8)
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b002      	add	sp, #8
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002adc:	46c0      	nop			@ (mov r8, r8)
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b002      	add	sp, #8
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aec:	46c0      	nop			@ (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b002      	add	sp, #8
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002afc:	46c0      	nop			@ (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b0c:	46c0      	nop			@ (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b002      	add	sp, #8
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a36      	ldr	r2, [pc, #216]	@ (8002c00 <TIM_Base_SetConfig+0xec>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d003      	beq.n	8002b34 <TIM_Base_SetConfig+0x20>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a35      	ldr	r2, [pc, #212]	@ (8002c04 <TIM_Base_SetConfig+0xf0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d108      	bne.n	8002b46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2270      	movs	r2, #112	@ 0x70
 8002b38:	4393      	bics	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a2d      	ldr	r2, [pc, #180]	@ (8002c00 <TIM_Base_SetConfig+0xec>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d013      	beq.n	8002b76 <TIM_Base_SetConfig+0x62>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a2c      	ldr	r2, [pc, #176]	@ (8002c04 <TIM_Base_SetConfig+0xf0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00f      	beq.n	8002b76 <TIM_Base_SetConfig+0x62>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a2b      	ldr	r2, [pc, #172]	@ (8002c08 <TIM_Base_SetConfig+0xf4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00b      	beq.n	8002b76 <TIM_Base_SetConfig+0x62>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a2a      	ldr	r2, [pc, #168]	@ (8002c0c <TIM_Base_SetConfig+0xf8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d007      	beq.n	8002b76 <TIM_Base_SetConfig+0x62>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a29      	ldr	r2, [pc, #164]	@ (8002c10 <TIM_Base_SetConfig+0xfc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d003      	beq.n	8002b76 <TIM_Base_SetConfig+0x62>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a28      	ldr	r2, [pc, #160]	@ (8002c14 <TIM_Base_SetConfig+0x100>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d108      	bne.n	8002b88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4a27      	ldr	r2, [pc, #156]	@ (8002c18 <TIM_Base_SetConfig+0x104>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2280      	movs	r2, #128	@ 0x80
 8002b8c:	4393      	bics	r3, r2
 8002b8e:	001a      	movs	r2, r3
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a13      	ldr	r2, [pc, #76]	@ (8002c00 <TIM_Base_SetConfig+0xec>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00b      	beq.n	8002bce <TIM_Base_SetConfig+0xba>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a14      	ldr	r2, [pc, #80]	@ (8002c0c <TIM_Base_SetConfig+0xf8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d007      	beq.n	8002bce <TIM_Base_SetConfig+0xba>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a13      	ldr	r2, [pc, #76]	@ (8002c10 <TIM_Base_SetConfig+0xfc>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d003      	beq.n	8002bce <TIM_Base_SetConfig+0xba>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a12      	ldr	r2, [pc, #72]	@ (8002c14 <TIM_Base_SetConfig+0x100>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d103      	bne.n	8002bd6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2201      	movs	r2, #1
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d106      	bne.n	8002bf6 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2201      	movs	r2, #1
 8002bee:	4393      	bics	r3, r2
 8002bf0:	001a      	movs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	611a      	str	r2, [r3, #16]
  }
}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b004      	add	sp, #16
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			@ (mov r8, r8)
 8002c00:	40012c00 	.word	0x40012c00
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40002000 	.word	0x40002000
 8002c0c:	40014000 	.word	0x40014000
 8002c10:	40014400 	.word	0x40014400
 8002c14:	40014800 	.word	0x40014800
 8002c18:	fffffcff 	.word	0xfffffcff

08002c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c24:	46c0      	nop			@ (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c34:	46c0      	nop			@ (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e044      	b.n	8002cd8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d107      	bne.n	8002c66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2278      	movs	r2, #120	@ 0x78
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f7fe fa31 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2224      	movs	r2, #36	@ 0x24
 8002c6a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2101      	movs	r1, #1
 8002c78:	438a      	bics	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 fa0c 	bl	80030a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 f8c8 	bl	8002e24 <UART_SetConfig>
 8002c94:	0003      	movs	r3, r0
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e01c      	b.n	8002cd8 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	490d      	ldr	r1, [pc, #52]	@ (8002ce0 <HAL_UART_Init+0xa4>)
 8002caa:	400a      	ands	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2108      	movs	r1, #8
 8002cba:	438a      	bics	r2, r1
 8002cbc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2101      	movs	r1, #1
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f000 fa9b 	bl	800320c <UART_CheckIdleState>
 8002cd6:	0003      	movs	r3, r0
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b002      	add	sp, #8
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	fffff7ff 	.word	0xfffff7ff

08002ce4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	@ 0x28
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	1dbb      	adds	r3, r7, #6
 8002cf2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d000      	beq.n	8002cfe <HAL_UART_Transmit+0x1a>
 8002cfc:	e08c      	b.n	8002e18 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_UART_Transmit+0x28>
 8002d04:	1dbb      	adds	r3, r7, #6
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e084      	b.n	8002e1a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	2380      	movs	r3, #128	@ 0x80
 8002d16:	015b      	lsls	r3, r3, #5
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d109      	bne.n	8002d30 <HAL_UART_Transmit+0x4c>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2201      	movs	r2, #1
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d001      	beq.n	8002d30 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e074      	b.n	8002e1a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2284      	movs	r2, #132	@ 0x84
 8002d34:	2100      	movs	r1, #0
 8002d36:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2221      	movs	r2, #33	@ 0x21
 8002d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d3e:	f7fe fb6b 	bl	8001418 <HAL_GetTick>
 8002d42:	0003      	movs	r3, r0
 8002d44:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1dba      	adds	r2, r7, #6
 8002d4a:	2150      	movs	r1, #80	@ 0x50
 8002d4c:	8812      	ldrh	r2, [r2, #0]
 8002d4e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1dba      	adds	r2, r7, #6
 8002d54:	2152      	movs	r1, #82	@ 0x52
 8002d56:	8812      	ldrh	r2, [r2, #0]
 8002d58:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	2380      	movs	r3, #128	@ 0x80
 8002d60:	015b      	lsls	r3, r3, #5
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d108      	bne.n	8002d78 <HAL_UART_Transmit+0x94>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d104      	bne.n	8002d78 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	e003      	b.n	8002d80 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d80:	e02f      	b.n	8002de2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	0013      	movs	r3, r2
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2180      	movs	r1, #128	@ 0x80
 8002d90:	f000 fae4 	bl	800335c <UART_WaitOnFlagUntilTimeout>
 8002d94:	1e03      	subs	r3, r0, #0
 8002d96:	d004      	beq.n	8002da2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e03b      	b.n	8002e1a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10b      	bne.n	8002dc0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	881a      	ldrh	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	05d2      	lsls	r2, r2, #23
 8002db2:	0dd2      	lsrs	r2, r2, #23
 8002db4:	b292      	uxth	r2, r2
 8002db6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	3302      	adds	r3, #2
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	e007      	b.n	8002dd0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2252      	movs	r2, #82	@ 0x52
 8002dd4:	5a9b      	ldrh	r3, [r3, r2]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b299      	uxth	r1, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2252      	movs	r2, #82	@ 0x52
 8002de0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2252      	movs	r2, #82	@ 0x52
 8002de6:	5a9b      	ldrh	r3, [r3, r2]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1c9      	bne.n	8002d82 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	0013      	movs	r3, r2
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2140      	movs	r1, #64	@ 0x40
 8002dfc:	f000 faae 	bl	800335c <UART_WaitOnFlagUntilTimeout>
 8002e00:	1e03      	subs	r3, r0, #0
 8002e02:	d004      	beq.n	8002e0e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e005      	b.n	8002e1a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e000      	b.n	8002e1a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
  }
}
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b008      	add	sp, #32
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e2c:	231e      	movs	r3, #30
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a8d      	ldr	r2, [pc, #564]	@ (8003088 <UART_SetConfig+0x264>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	0019      	movs	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	4a88      	ldr	r2, [pc, #544]	@ (800308c <UART_SetConfig+0x268>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4a7f      	ldr	r2, [pc, #508]	@ (8003090 <UART_SetConfig+0x26c>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	0019      	movs	r1, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a7b      	ldr	r2, [pc, #492]	@ (8003094 <UART_SetConfig+0x270>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d127      	bne.n	8002efa <UART_SetConfig+0xd6>
 8002eaa:	4b7b      	ldr	r3, [pc, #492]	@ (8003098 <UART_SetConfig+0x274>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eae:	2203      	movs	r2, #3
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d00d      	beq.n	8002ed2 <UART_SetConfig+0xae>
 8002eb6:	d81b      	bhi.n	8002ef0 <UART_SetConfig+0xcc>
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d014      	beq.n	8002ee6 <UART_SetConfig+0xc2>
 8002ebc:	d818      	bhi.n	8002ef0 <UART_SetConfig+0xcc>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <UART_SetConfig+0xa4>
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d00a      	beq.n	8002edc <UART_SetConfig+0xb8>
 8002ec6:	e013      	b.n	8002ef0 <UART_SetConfig+0xcc>
 8002ec8:	231f      	movs	r3, #31
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
 8002ed0:	e021      	b.n	8002f16 <UART_SetConfig+0xf2>
 8002ed2:	231f      	movs	r3, #31
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	701a      	strb	r2, [r3, #0]
 8002eda:	e01c      	b.n	8002f16 <UART_SetConfig+0xf2>
 8002edc:	231f      	movs	r3, #31
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	701a      	strb	r2, [r3, #0]
 8002ee4:	e017      	b.n	8002f16 <UART_SetConfig+0xf2>
 8002ee6:	231f      	movs	r3, #31
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	2208      	movs	r2, #8
 8002eec:	701a      	strb	r2, [r3, #0]
 8002eee:	e012      	b.n	8002f16 <UART_SetConfig+0xf2>
 8002ef0:	231f      	movs	r3, #31
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	701a      	strb	r2, [r3, #0]
 8002ef8:	e00d      	b.n	8002f16 <UART_SetConfig+0xf2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a67      	ldr	r2, [pc, #412]	@ (800309c <UART_SetConfig+0x278>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d104      	bne.n	8002f0e <UART_SetConfig+0xea>
 8002f04:	231f      	movs	r3, #31
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	e003      	b.n	8002f16 <UART_SetConfig+0xf2>
 8002f0e:	231f      	movs	r3, #31
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	2210      	movs	r2, #16
 8002f14:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69da      	ldr	r2, [r3, #28]
 8002f1a:	2380      	movs	r3, #128	@ 0x80
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d15c      	bne.n	8002fdc <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002f22:	231f      	movs	r3, #31
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d015      	beq.n	8002f58 <UART_SetConfig+0x134>
 8002f2c:	dc18      	bgt.n	8002f60 <UART_SetConfig+0x13c>
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d00d      	beq.n	8002f4e <UART_SetConfig+0x12a>
 8002f32:	dc15      	bgt.n	8002f60 <UART_SetConfig+0x13c>
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <UART_SetConfig+0x11a>
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d005      	beq.n	8002f48 <UART_SetConfig+0x124>
 8002f3c:	e010      	b.n	8002f60 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f3e:	f7ff fb9f 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8002f42:	0003      	movs	r3, r0
 8002f44:	61bb      	str	r3, [r7, #24]
        break;
 8002f46:	e012      	b.n	8002f6e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f48:	4b55      	ldr	r3, [pc, #340]	@ (80030a0 <UART_SetConfig+0x27c>)
 8002f4a:	61bb      	str	r3, [r7, #24]
        break;
 8002f4c:	e00f      	b.n	8002f6e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f4e:	f7ff fb37 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8002f52:	0003      	movs	r3, r0
 8002f54:	61bb      	str	r3, [r7, #24]
        break;
 8002f56:	e00a      	b.n	8002f6e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f58:	2380      	movs	r3, #128	@ 0x80
 8002f5a:	021b      	lsls	r3, r3, #8
 8002f5c:	61bb      	str	r3, [r7, #24]
        break;
 8002f5e:	e006      	b.n	8002f6e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f64:	231e      	movs	r3, #30
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
        break;
 8002f6c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d100      	bne.n	8002f76 <UART_SetConfig+0x152>
 8002f74:	e07a      	b.n	800306c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	005a      	lsls	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	085b      	lsrs	r3, r3, #1
 8002f80:	18d2      	adds	r2, r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	0019      	movs	r1, r3
 8002f88:	0010      	movs	r0, r2
 8002f8a:	f7fd f8c7 	bl	800011c <__udivsi3>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b0f      	cmp	r3, #15
 8002f96:	d91c      	bls.n	8002fd2 <UART_SetConfig+0x1ae>
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	2380      	movs	r3, #128	@ 0x80
 8002f9c:	025b      	lsls	r3, r3, #9
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d217      	bcs.n	8002fd2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	200e      	movs	r0, #14
 8002fa8:	183b      	adds	r3, r7, r0
 8002faa:	210f      	movs	r1, #15
 8002fac:	438a      	bics	r2, r1
 8002fae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	085b      	lsrs	r3, r3, #1
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2207      	movs	r2, #7
 8002fb8:	4013      	ands	r3, r2
 8002fba:	b299      	uxth	r1, r3
 8002fbc:	183b      	adds	r3, r7, r0
 8002fbe:	183a      	adds	r2, r7, r0
 8002fc0:	8812      	ldrh	r2, [r2, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	183a      	adds	r2, r7, r0
 8002fcc:	8812      	ldrh	r2, [r2, #0]
 8002fce:	60da      	str	r2, [r3, #12]
 8002fd0:	e04c      	b.n	800306c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002fd2:	231e      	movs	r3, #30
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
 8002fda:	e047      	b.n	800306c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fdc:	231f      	movs	r3, #31
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d015      	beq.n	8003012 <UART_SetConfig+0x1ee>
 8002fe6:	dc18      	bgt.n	800301a <UART_SetConfig+0x1f6>
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d00d      	beq.n	8003008 <UART_SetConfig+0x1e4>
 8002fec:	dc15      	bgt.n	800301a <UART_SetConfig+0x1f6>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <UART_SetConfig+0x1d4>
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d005      	beq.n	8003002 <UART_SetConfig+0x1de>
 8002ff6:	e010      	b.n	800301a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff8:	f7ff fb42 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	61bb      	str	r3, [r7, #24]
        break;
 8003000:	e012      	b.n	8003028 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003002:	4b27      	ldr	r3, [pc, #156]	@ (80030a0 <UART_SetConfig+0x27c>)
 8003004:	61bb      	str	r3, [r7, #24]
        break;
 8003006:	e00f      	b.n	8003028 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003008:	f7ff fada 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 800300c:	0003      	movs	r3, r0
 800300e:	61bb      	str	r3, [r7, #24]
        break;
 8003010:	e00a      	b.n	8003028 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003012:	2380      	movs	r3, #128	@ 0x80
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	61bb      	str	r3, [r7, #24]
        break;
 8003018:	e006      	b.n	8003028 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800301e:	231e      	movs	r3, #30
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]
        break;
 8003026:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01e      	beq.n	800306c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	085a      	lsrs	r2, r3, #1
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	18d2      	adds	r2, r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	0019      	movs	r1, r3
 800303e:	0010      	movs	r0, r2
 8003040:	f7fd f86c 	bl	800011c <__udivsi3>
 8003044:	0003      	movs	r3, r0
 8003046:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	2b0f      	cmp	r3, #15
 800304c:	d90a      	bls.n	8003064 <UART_SetConfig+0x240>
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	2380      	movs	r3, #128	@ 0x80
 8003052:	025b      	lsls	r3, r3, #9
 8003054:	429a      	cmp	r2, r3
 8003056:	d205      	bcs.n	8003064 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	b29a      	uxth	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	e003      	b.n	800306c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003064:	231e      	movs	r3, #30
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003078:	231e      	movs	r3, #30
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	781b      	ldrb	r3, [r3, #0]
}
 800307e:	0018      	movs	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	b008      	add	sp, #32
 8003084:	bd80      	pop	{r7, pc}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	ffff69f3 	.word	0xffff69f3
 800308c:	ffffcfff 	.word	0xffffcfff
 8003090:	fffff4ff 	.word	0xfffff4ff
 8003094:	40013800 	.word	0x40013800
 8003098:	40021000 	.word	0x40021000
 800309c:	40004400 	.word	0x40004400
 80030a0:	007a1200 	.word	0x007a1200

080030a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	2208      	movs	r2, #8
 80030b2:	4013      	ands	r3, r2
 80030b4:	d00b      	beq.n	80030ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	4a4a      	ldr	r2, [pc, #296]	@ (80031e8 <UART_AdvFeatureConfig+0x144>)
 80030be:	4013      	ands	r3, r2
 80030c0:	0019      	movs	r1, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	2201      	movs	r2, #1
 80030d4:	4013      	ands	r3, r2
 80030d6:	d00b      	beq.n	80030f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4a43      	ldr	r2, [pc, #268]	@ (80031ec <UART_AdvFeatureConfig+0x148>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	0019      	movs	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f4:	2202      	movs	r2, #2
 80030f6:	4013      	ands	r3, r2
 80030f8:	d00b      	beq.n	8003112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4a3b      	ldr	r2, [pc, #236]	@ (80031f0 <UART_AdvFeatureConfig+0x14c>)
 8003102:	4013      	ands	r3, r2
 8003104:	0019      	movs	r1, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	2204      	movs	r2, #4
 8003118:	4013      	ands	r3, r2
 800311a:	d00b      	beq.n	8003134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4a34      	ldr	r2, [pc, #208]	@ (80031f4 <UART_AdvFeatureConfig+0x150>)
 8003124:	4013      	ands	r3, r2
 8003126:	0019      	movs	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	2210      	movs	r2, #16
 800313a:	4013      	ands	r3, r2
 800313c:	d00b      	beq.n	8003156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a2c      	ldr	r2, [pc, #176]	@ (80031f8 <UART_AdvFeatureConfig+0x154>)
 8003146:	4013      	ands	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	2220      	movs	r2, #32
 800315c:	4013      	ands	r3, r2
 800315e:	d00b      	beq.n	8003178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	4a25      	ldr	r2, [pc, #148]	@ (80031fc <UART_AdvFeatureConfig+0x158>)
 8003168:	4013      	ands	r3, r2
 800316a:	0019      	movs	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	2240      	movs	r2, #64	@ 0x40
 800317e:	4013      	ands	r3, r2
 8003180:	d01d      	beq.n	80031be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4a1d      	ldr	r2, [pc, #116]	@ (8003200 <UART_AdvFeatureConfig+0x15c>)
 800318a:	4013      	ands	r3, r2
 800318c:	0019      	movs	r1, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800319e:	2380      	movs	r3, #128	@ 0x80
 80031a0:	035b      	lsls	r3, r3, #13
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d10b      	bne.n	80031be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a15      	ldr	r2, [pc, #84]	@ (8003204 <UART_AdvFeatureConfig+0x160>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	0019      	movs	r1, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	2280      	movs	r2, #128	@ 0x80
 80031c4:	4013      	ands	r3, r2
 80031c6:	d00b      	beq.n	80031e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003208 <UART_AdvFeatureConfig+0x164>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	0019      	movs	r1, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	605a      	str	r2, [r3, #4]
  }
}
 80031e0:	46c0      	nop			@ (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b002      	add	sp, #8
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	ffff7fff 	.word	0xffff7fff
 80031ec:	fffdffff 	.word	0xfffdffff
 80031f0:	fffeffff 	.word	0xfffeffff
 80031f4:	fffbffff 	.word	0xfffbffff
 80031f8:	ffffefff 	.word	0xffffefff
 80031fc:	ffffdfff 	.word	0xffffdfff
 8003200:	ffefffff 	.word	0xffefffff
 8003204:	ff9fffff 	.word	0xff9fffff
 8003208:	fff7ffff 	.word	0xfff7ffff

0800320c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b092      	sub	sp, #72	@ 0x48
 8003210:	af02      	add	r7, sp, #8
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2284      	movs	r2, #132	@ 0x84
 8003218:	2100      	movs	r1, #0
 800321a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800321c:	f7fe f8fc 	bl	8001418 <HAL_GetTick>
 8003220:	0003      	movs	r3, r0
 8003222:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2208      	movs	r2, #8
 800322c:	4013      	ands	r3, r2
 800322e:	2b08      	cmp	r3, #8
 8003230:	d12c      	bne.n	800328c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003234:	2280      	movs	r2, #128	@ 0x80
 8003236:	0391      	lsls	r1, r2, #14
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	4a46      	ldr	r2, [pc, #280]	@ (8003354 <UART_CheckIdleState+0x148>)
 800323c:	9200      	str	r2, [sp, #0]
 800323e:	2200      	movs	r2, #0
 8003240:	f000 f88c 	bl	800335c <UART_WaitOnFlagUntilTimeout>
 8003244:	1e03      	subs	r3, r0, #0
 8003246:	d021      	beq.n	800328c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003248:	f3ef 8310 	mrs	r3, PRIMASK
 800324c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003250:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003252:	2301      	movs	r3, #1
 8003254:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003258:	f383 8810 	msr	PRIMASK, r3
}
 800325c:	46c0      	nop			@ (mov r8, r8)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2180      	movs	r1, #128	@ 0x80
 800326a:	438a      	bics	r2, r1
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003274:	f383 8810 	msr	PRIMASK, r3
}
 8003278:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2278      	movs	r2, #120	@ 0x78
 8003284:	2100      	movs	r1, #0
 8003286:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e05f      	b.n	800334c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2204      	movs	r2, #4
 8003294:	4013      	ands	r3, r2
 8003296:	2b04      	cmp	r3, #4
 8003298:	d146      	bne.n	8003328 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800329a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800329c:	2280      	movs	r2, #128	@ 0x80
 800329e:	03d1      	lsls	r1, r2, #15
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003354 <UART_CheckIdleState+0x148>)
 80032a4:	9200      	str	r2, [sp, #0]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f000 f858 	bl	800335c <UART_WaitOnFlagUntilTimeout>
 80032ac:	1e03      	subs	r3, r0, #0
 80032ae:	d03b      	beq.n	8003328 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b0:	f3ef 8310 	mrs	r3, PRIMASK
 80032b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80032b6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ba:	2301      	movs	r3, #1
 80032bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f383 8810 	msr	PRIMASK, r3
}
 80032c4:	46c0      	nop			@ (mov r8, r8)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4921      	ldr	r1, [pc, #132]	@ (8003358 <UART_CheckIdleState+0x14c>)
 80032d2:	400a      	ands	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f383 8810 	msr	PRIMASK, r3
}
 80032e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e2:	f3ef 8310 	mrs	r3, PRIMASK
 80032e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80032e8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ec:	2301      	movs	r3, #1
 80032ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f383 8810 	msr	PRIMASK, r3
}
 80032f6:	46c0      	nop			@ (mov r8, r8)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2101      	movs	r1, #1
 8003304:	438a      	bics	r2, r1
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	f383 8810 	msr	PRIMASK, r3
}
 8003312:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2280      	movs	r2, #128	@ 0x80
 8003318:	2120      	movs	r1, #32
 800331a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2278      	movs	r2, #120	@ 0x78
 8003320:	2100      	movs	r1, #0
 8003322:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e011      	b.n	800334c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2280      	movs	r2, #128	@ 0x80
 8003332:	2120      	movs	r1, #32
 8003334:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2278      	movs	r2, #120	@ 0x78
 8003346:	2100      	movs	r1, #0
 8003348:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	0018      	movs	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	b010      	add	sp, #64	@ 0x40
 8003352:	bd80      	pop	{r7, pc}
 8003354:	01ffffff 	.word	0x01ffffff
 8003358:	fffffedf 	.word	0xfffffedf

0800335c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	1dfb      	adds	r3, r7, #7
 800336a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800336c:	e051      	b.n	8003412 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	3301      	adds	r3, #1
 8003372:	d04e      	beq.n	8003412 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003374:	f7fe f850 	bl	8001418 <HAL_GetTick>
 8003378:	0002      	movs	r2, r0
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	429a      	cmp	r2, r3
 8003382:	d302      	bcc.n	800338a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e051      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2204      	movs	r2, #4
 8003396:	4013      	ands	r3, r2
 8003398:	d03b      	beq.n	8003412 <UART_WaitOnFlagUntilTimeout+0xb6>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b80      	cmp	r3, #128	@ 0x80
 800339e:	d038      	beq.n	8003412 <UART_WaitOnFlagUntilTimeout+0xb6>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b40      	cmp	r3, #64	@ 0x40
 80033a4:	d035      	beq.n	8003412 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	2208      	movs	r2, #8
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d111      	bne.n	80033d8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2208      	movs	r2, #8
 80033ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	0018      	movs	r0, r3
 80033c0:	f000 f83c 	bl	800343c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2284      	movs	r2, #132	@ 0x84
 80033c8:	2108      	movs	r1, #8
 80033ca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2278      	movs	r2, #120	@ 0x78
 80033d0:	2100      	movs	r1, #0
 80033d2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e02c      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69da      	ldr	r2, [r3, #28]
 80033de:	2380      	movs	r3, #128	@ 0x80
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	401a      	ands	r2, r3
 80033e4:	2380      	movs	r3, #128	@ 0x80
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d112      	bne.n	8003412 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2280      	movs	r2, #128	@ 0x80
 80033f2:	0112      	lsls	r2, r2, #4
 80033f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 f81f 	bl	800343c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2284      	movs	r2, #132	@ 0x84
 8003402:	2120      	movs	r1, #32
 8003404:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2278      	movs	r2, #120	@ 0x78
 800340a:	2100      	movs	r1, #0
 800340c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e00f      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	4013      	ands	r3, r2
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	425a      	negs	r2, r3
 8003422:	4153      	adcs	r3, r2
 8003424:	b2db      	uxtb	r3, r3
 8003426:	001a      	movs	r2, r3
 8003428:	1dfb      	adds	r3, r7, #7
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d09e      	beq.n	800336e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	0018      	movs	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	b004      	add	sp, #16
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08e      	sub	sp, #56	@ 0x38
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003444:	f3ef 8310 	mrs	r3, PRIMASK
 8003448:	617b      	str	r3, [r7, #20]
  return(result);
 800344a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800344c:	637b      	str	r3, [r7, #52]	@ 0x34
 800344e:	2301      	movs	r3, #1
 8003450:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f383 8810 	msr	PRIMASK, r3
}
 8003458:	46c0      	nop			@ (mov r8, r8)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4926      	ldr	r1, [pc, #152]	@ (8003500 <UART_EndRxTransfer+0xc4>)
 8003466:	400a      	ands	r2, r1
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800346c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f383 8810 	msr	PRIMASK, r3
}
 8003474:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003476:	f3ef 8310 	mrs	r3, PRIMASK
 800347a:	623b      	str	r3, [r7, #32]
  return(result);
 800347c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003480:	2301      	movs	r3, #1
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	f383 8810 	msr	PRIMASK, r3
}
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2101      	movs	r1, #1
 8003498:	438a      	bics	r2, r1
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a2:	f383 8810 	msr	PRIMASK, r3
}
 80034a6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d118      	bne.n	80034e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b0:	f3ef 8310 	mrs	r3, PRIMASK
 80034b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80034b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034ba:	2301      	movs	r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f383 8810 	msr	PRIMASK, r3
}
 80034c4:	46c0      	nop			@ (mov r8, r8)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2110      	movs	r1, #16
 80034d2:	438a      	bics	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f383 8810 	msr	PRIMASK, r3
}
 80034e0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2280      	movs	r2, #128	@ 0x80
 80034e6:	2120      	movs	r1, #32
 80034e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b00e      	add	sp, #56	@ 0x38
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			@ (mov r8, r8)
 8003500:	fffffedf 	.word	0xfffffedf

08003504 <std>:
 8003504:	2300      	movs	r3, #0
 8003506:	b510      	push	{r4, lr}
 8003508:	0004      	movs	r4, r0
 800350a:	6003      	str	r3, [r0, #0]
 800350c:	6043      	str	r3, [r0, #4]
 800350e:	6083      	str	r3, [r0, #8]
 8003510:	8181      	strh	r1, [r0, #12]
 8003512:	6643      	str	r3, [r0, #100]	@ 0x64
 8003514:	81c2      	strh	r2, [r0, #14]
 8003516:	6103      	str	r3, [r0, #16]
 8003518:	6143      	str	r3, [r0, #20]
 800351a:	6183      	str	r3, [r0, #24]
 800351c:	0019      	movs	r1, r3
 800351e:	2208      	movs	r2, #8
 8003520:	305c      	adds	r0, #92	@ 0x5c
 8003522:	f000 fa0f 	bl	8003944 <memset>
 8003526:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <std+0x50>)
 8003528:	6224      	str	r4, [r4, #32]
 800352a:	6263      	str	r3, [r4, #36]	@ 0x24
 800352c:	4b0a      	ldr	r3, [pc, #40]	@ (8003558 <std+0x54>)
 800352e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003530:	4b0a      	ldr	r3, [pc, #40]	@ (800355c <std+0x58>)
 8003532:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003534:	4b0a      	ldr	r3, [pc, #40]	@ (8003560 <std+0x5c>)
 8003536:	6323      	str	r3, [r4, #48]	@ 0x30
 8003538:	4b0a      	ldr	r3, [pc, #40]	@ (8003564 <std+0x60>)
 800353a:	429c      	cmp	r4, r3
 800353c:	d005      	beq.n	800354a <std+0x46>
 800353e:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <std+0x64>)
 8003540:	429c      	cmp	r4, r3
 8003542:	d002      	beq.n	800354a <std+0x46>
 8003544:	4b09      	ldr	r3, [pc, #36]	@ (800356c <std+0x68>)
 8003546:	429c      	cmp	r4, r3
 8003548:	d103      	bne.n	8003552 <std+0x4e>
 800354a:	0020      	movs	r0, r4
 800354c:	3058      	adds	r0, #88	@ 0x58
 800354e:	f000 fa79 	bl	8003a44 <__retarget_lock_init_recursive>
 8003552:	bd10      	pop	{r4, pc}
 8003554:	0800376d 	.word	0x0800376d
 8003558:	08003795 	.word	0x08003795
 800355c:	080037cd 	.word	0x080037cd
 8003560:	080037f9 	.word	0x080037f9
 8003564:	200001d4 	.word	0x200001d4
 8003568:	2000023c 	.word	0x2000023c
 800356c:	200002a4 	.word	0x200002a4

08003570 <stdio_exit_handler>:
 8003570:	b510      	push	{r4, lr}
 8003572:	4a03      	ldr	r2, [pc, #12]	@ (8003580 <stdio_exit_handler+0x10>)
 8003574:	4903      	ldr	r1, [pc, #12]	@ (8003584 <stdio_exit_handler+0x14>)
 8003576:	4804      	ldr	r0, [pc, #16]	@ (8003588 <stdio_exit_handler+0x18>)
 8003578:	f000 f86c 	bl	8003654 <_fwalk_sglue>
 800357c:	bd10      	pop	{r4, pc}
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	20000020 	.word	0x20000020
 8003584:	080042d5 	.word	0x080042d5
 8003588:	20000030 	.word	0x20000030

0800358c <cleanup_stdio>:
 800358c:	6841      	ldr	r1, [r0, #4]
 800358e:	4b0b      	ldr	r3, [pc, #44]	@ (80035bc <cleanup_stdio+0x30>)
 8003590:	b510      	push	{r4, lr}
 8003592:	0004      	movs	r4, r0
 8003594:	4299      	cmp	r1, r3
 8003596:	d001      	beq.n	800359c <cleanup_stdio+0x10>
 8003598:	f000 fe9c 	bl	80042d4 <_fflush_r>
 800359c:	68a1      	ldr	r1, [r4, #8]
 800359e:	4b08      	ldr	r3, [pc, #32]	@ (80035c0 <cleanup_stdio+0x34>)
 80035a0:	4299      	cmp	r1, r3
 80035a2:	d002      	beq.n	80035aa <cleanup_stdio+0x1e>
 80035a4:	0020      	movs	r0, r4
 80035a6:	f000 fe95 	bl	80042d4 <_fflush_r>
 80035aa:	68e1      	ldr	r1, [r4, #12]
 80035ac:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <cleanup_stdio+0x38>)
 80035ae:	4299      	cmp	r1, r3
 80035b0:	d002      	beq.n	80035b8 <cleanup_stdio+0x2c>
 80035b2:	0020      	movs	r0, r4
 80035b4:	f000 fe8e 	bl	80042d4 <_fflush_r>
 80035b8:	bd10      	pop	{r4, pc}
 80035ba:	46c0      	nop			@ (mov r8, r8)
 80035bc:	200001d4 	.word	0x200001d4
 80035c0:	2000023c 	.word	0x2000023c
 80035c4:	200002a4 	.word	0x200002a4

080035c8 <global_stdio_init.part.0>:
 80035c8:	b510      	push	{r4, lr}
 80035ca:	4b09      	ldr	r3, [pc, #36]	@ (80035f0 <global_stdio_init.part.0+0x28>)
 80035cc:	4a09      	ldr	r2, [pc, #36]	@ (80035f4 <global_stdio_init.part.0+0x2c>)
 80035ce:	2104      	movs	r1, #4
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	4809      	ldr	r0, [pc, #36]	@ (80035f8 <global_stdio_init.part.0+0x30>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	f7ff ff95 	bl	8003504 <std>
 80035da:	2201      	movs	r2, #1
 80035dc:	2109      	movs	r1, #9
 80035de:	4807      	ldr	r0, [pc, #28]	@ (80035fc <global_stdio_init.part.0+0x34>)
 80035e0:	f7ff ff90 	bl	8003504 <std>
 80035e4:	2202      	movs	r2, #2
 80035e6:	2112      	movs	r1, #18
 80035e8:	4805      	ldr	r0, [pc, #20]	@ (8003600 <global_stdio_init.part.0+0x38>)
 80035ea:	f7ff ff8b 	bl	8003504 <std>
 80035ee:	bd10      	pop	{r4, pc}
 80035f0:	2000030c 	.word	0x2000030c
 80035f4:	08003571 	.word	0x08003571
 80035f8:	200001d4 	.word	0x200001d4
 80035fc:	2000023c 	.word	0x2000023c
 8003600:	200002a4 	.word	0x200002a4

08003604 <__sfp_lock_acquire>:
 8003604:	b510      	push	{r4, lr}
 8003606:	4802      	ldr	r0, [pc, #8]	@ (8003610 <__sfp_lock_acquire+0xc>)
 8003608:	f000 fa1d 	bl	8003a46 <__retarget_lock_acquire_recursive>
 800360c:	bd10      	pop	{r4, pc}
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	20000315 	.word	0x20000315

08003614 <__sfp_lock_release>:
 8003614:	b510      	push	{r4, lr}
 8003616:	4802      	ldr	r0, [pc, #8]	@ (8003620 <__sfp_lock_release+0xc>)
 8003618:	f000 fa16 	bl	8003a48 <__retarget_lock_release_recursive>
 800361c:	bd10      	pop	{r4, pc}
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	20000315 	.word	0x20000315

08003624 <__sinit>:
 8003624:	b510      	push	{r4, lr}
 8003626:	0004      	movs	r4, r0
 8003628:	f7ff ffec 	bl	8003604 <__sfp_lock_acquire>
 800362c:	6a23      	ldr	r3, [r4, #32]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <__sinit+0x14>
 8003632:	f7ff ffef 	bl	8003614 <__sfp_lock_release>
 8003636:	bd10      	pop	{r4, pc}
 8003638:	4b04      	ldr	r3, [pc, #16]	@ (800364c <__sinit+0x28>)
 800363a:	6223      	str	r3, [r4, #32]
 800363c:	4b04      	ldr	r3, [pc, #16]	@ (8003650 <__sinit+0x2c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f6      	bne.n	8003632 <__sinit+0xe>
 8003644:	f7ff ffc0 	bl	80035c8 <global_stdio_init.part.0>
 8003648:	e7f3      	b.n	8003632 <__sinit+0xe>
 800364a:	46c0      	nop			@ (mov r8, r8)
 800364c:	0800358d 	.word	0x0800358d
 8003650:	2000030c 	.word	0x2000030c

08003654 <_fwalk_sglue>:
 8003654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003656:	0014      	movs	r4, r2
 8003658:	2600      	movs	r6, #0
 800365a:	9000      	str	r0, [sp, #0]
 800365c:	9101      	str	r1, [sp, #4]
 800365e:	68a5      	ldr	r5, [r4, #8]
 8003660:	6867      	ldr	r7, [r4, #4]
 8003662:	3f01      	subs	r7, #1
 8003664:	d504      	bpl.n	8003670 <_fwalk_sglue+0x1c>
 8003666:	6824      	ldr	r4, [r4, #0]
 8003668:	2c00      	cmp	r4, #0
 800366a:	d1f8      	bne.n	800365e <_fwalk_sglue+0xa>
 800366c:	0030      	movs	r0, r6
 800366e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003670:	89ab      	ldrh	r3, [r5, #12]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d908      	bls.n	8003688 <_fwalk_sglue+0x34>
 8003676:	220e      	movs	r2, #14
 8003678:	5eab      	ldrsh	r3, [r5, r2]
 800367a:	3301      	adds	r3, #1
 800367c:	d004      	beq.n	8003688 <_fwalk_sglue+0x34>
 800367e:	0029      	movs	r1, r5
 8003680:	9800      	ldr	r0, [sp, #0]
 8003682:	9b01      	ldr	r3, [sp, #4]
 8003684:	4798      	blx	r3
 8003686:	4306      	orrs	r6, r0
 8003688:	3568      	adds	r5, #104	@ 0x68
 800368a:	e7ea      	b.n	8003662 <_fwalk_sglue+0xe>

0800368c <iprintf>:
 800368c:	b40f      	push	{r0, r1, r2, r3}
 800368e:	b507      	push	{r0, r1, r2, lr}
 8003690:	4905      	ldr	r1, [pc, #20]	@ (80036a8 <iprintf+0x1c>)
 8003692:	ab04      	add	r3, sp, #16
 8003694:	6808      	ldr	r0, [r1, #0]
 8003696:	cb04      	ldmia	r3!, {r2}
 8003698:	6881      	ldr	r1, [r0, #8]
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	f000 fafa 	bl	8003c94 <_vfiprintf_r>
 80036a0:	b003      	add	sp, #12
 80036a2:	bc08      	pop	{r3}
 80036a4:	b004      	add	sp, #16
 80036a6:	4718      	bx	r3
 80036a8:	2000002c 	.word	0x2000002c

080036ac <_puts_r>:
 80036ac:	6a03      	ldr	r3, [r0, #32]
 80036ae:	b570      	push	{r4, r5, r6, lr}
 80036b0:	0005      	movs	r5, r0
 80036b2:	000e      	movs	r6, r1
 80036b4:	6884      	ldr	r4, [r0, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <_puts_r+0x12>
 80036ba:	f7ff ffb3 	bl	8003624 <__sinit>
 80036be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036c0:	07db      	lsls	r3, r3, #31
 80036c2:	d405      	bmi.n	80036d0 <_puts_r+0x24>
 80036c4:	89a3      	ldrh	r3, [r4, #12]
 80036c6:	059b      	lsls	r3, r3, #22
 80036c8:	d402      	bmi.n	80036d0 <_puts_r+0x24>
 80036ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036cc:	f000 f9bb 	bl	8003a46 <__retarget_lock_acquire_recursive>
 80036d0:	89a3      	ldrh	r3, [r4, #12]
 80036d2:	071b      	lsls	r3, r3, #28
 80036d4:	d502      	bpl.n	80036dc <_puts_r+0x30>
 80036d6:	6923      	ldr	r3, [r4, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d11f      	bne.n	800371c <_puts_r+0x70>
 80036dc:	0021      	movs	r1, r4
 80036de:	0028      	movs	r0, r5
 80036e0:	f000 f8d2 	bl	8003888 <__swsetup_r>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d019      	beq.n	800371c <_puts_r+0x70>
 80036e8:	2501      	movs	r5, #1
 80036ea:	426d      	negs	r5, r5
 80036ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036ee:	07db      	lsls	r3, r3, #31
 80036f0:	d405      	bmi.n	80036fe <_puts_r+0x52>
 80036f2:	89a3      	ldrh	r3, [r4, #12]
 80036f4:	059b      	lsls	r3, r3, #22
 80036f6:	d402      	bmi.n	80036fe <_puts_r+0x52>
 80036f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036fa:	f000 f9a5 	bl	8003a48 <__retarget_lock_release_recursive>
 80036fe:	0028      	movs	r0, r5
 8003700:	bd70      	pop	{r4, r5, r6, pc}
 8003702:	3601      	adds	r6, #1
 8003704:	60a3      	str	r3, [r4, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	da04      	bge.n	8003714 <_puts_r+0x68>
 800370a:	69a2      	ldr	r2, [r4, #24]
 800370c:	429a      	cmp	r2, r3
 800370e:	dc16      	bgt.n	800373e <_puts_r+0x92>
 8003710:	290a      	cmp	r1, #10
 8003712:	d014      	beq.n	800373e <_puts_r+0x92>
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	6022      	str	r2, [r4, #0]
 800371a:	7019      	strb	r1, [r3, #0]
 800371c:	68a3      	ldr	r3, [r4, #8]
 800371e:	7831      	ldrb	r1, [r6, #0]
 8003720:	3b01      	subs	r3, #1
 8003722:	2900      	cmp	r1, #0
 8003724:	d1ed      	bne.n	8003702 <_puts_r+0x56>
 8003726:	60a3      	str	r3, [r4, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	da0f      	bge.n	800374c <_puts_r+0xa0>
 800372c:	0022      	movs	r2, r4
 800372e:	0028      	movs	r0, r5
 8003730:	310a      	adds	r1, #10
 8003732:	f000 f867 	bl	8003804 <__swbuf_r>
 8003736:	3001      	adds	r0, #1
 8003738:	d0d6      	beq.n	80036e8 <_puts_r+0x3c>
 800373a:	250a      	movs	r5, #10
 800373c:	e7d6      	b.n	80036ec <_puts_r+0x40>
 800373e:	0022      	movs	r2, r4
 8003740:	0028      	movs	r0, r5
 8003742:	f000 f85f 	bl	8003804 <__swbuf_r>
 8003746:	3001      	adds	r0, #1
 8003748:	d1e8      	bne.n	800371c <_puts_r+0x70>
 800374a:	e7cd      	b.n	80036e8 <_puts_r+0x3c>
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	6022      	str	r2, [r4, #0]
 8003752:	220a      	movs	r2, #10
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	e7f0      	b.n	800373a <_puts_r+0x8e>

08003758 <puts>:
 8003758:	b510      	push	{r4, lr}
 800375a:	4b03      	ldr	r3, [pc, #12]	@ (8003768 <puts+0x10>)
 800375c:	0001      	movs	r1, r0
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	f7ff ffa4 	bl	80036ac <_puts_r>
 8003764:	bd10      	pop	{r4, pc}
 8003766:	46c0      	nop			@ (mov r8, r8)
 8003768:	2000002c 	.word	0x2000002c

0800376c <__sread>:
 800376c:	b570      	push	{r4, r5, r6, lr}
 800376e:	000c      	movs	r4, r1
 8003770:	250e      	movs	r5, #14
 8003772:	5f49      	ldrsh	r1, [r1, r5]
 8003774:	f000 f914 	bl	80039a0 <_read_r>
 8003778:	2800      	cmp	r0, #0
 800377a:	db03      	blt.n	8003784 <__sread+0x18>
 800377c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800377e:	181b      	adds	r3, r3, r0
 8003780:	6563      	str	r3, [r4, #84]	@ 0x54
 8003782:	bd70      	pop	{r4, r5, r6, pc}
 8003784:	89a3      	ldrh	r3, [r4, #12]
 8003786:	4a02      	ldr	r2, [pc, #8]	@ (8003790 <__sread+0x24>)
 8003788:	4013      	ands	r3, r2
 800378a:	81a3      	strh	r3, [r4, #12]
 800378c:	e7f9      	b.n	8003782 <__sread+0x16>
 800378e:	46c0      	nop			@ (mov r8, r8)
 8003790:	ffffefff 	.word	0xffffefff

08003794 <__swrite>:
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003796:	001f      	movs	r7, r3
 8003798:	898b      	ldrh	r3, [r1, #12]
 800379a:	0005      	movs	r5, r0
 800379c:	000c      	movs	r4, r1
 800379e:	0016      	movs	r6, r2
 80037a0:	05db      	lsls	r3, r3, #23
 80037a2:	d505      	bpl.n	80037b0 <__swrite+0x1c>
 80037a4:	230e      	movs	r3, #14
 80037a6:	5ec9      	ldrsh	r1, [r1, r3]
 80037a8:	2200      	movs	r2, #0
 80037aa:	2302      	movs	r3, #2
 80037ac:	f000 f8e4 	bl	8003978 <_lseek_r>
 80037b0:	89a3      	ldrh	r3, [r4, #12]
 80037b2:	4a05      	ldr	r2, [pc, #20]	@ (80037c8 <__swrite+0x34>)
 80037b4:	0028      	movs	r0, r5
 80037b6:	4013      	ands	r3, r2
 80037b8:	81a3      	strh	r3, [r4, #12]
 80037ba:	0032      	movs	r2, r6
 80037bc:	230e      	movs	r3, #14
 80037be:	5ee1      	ldrsh	r1, [r4, r3]
 80037c0:	003b      	movs	r3, r7
 80037c2:	f000 f901 	bl	80039c8 <_write_r>
 80037c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037c8:	ffffefff 	.word	0xffffefff

080037cc <__sseek>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	000c      	movs	r4, r1
 80037d0:	250e      	movs	r5, #14
 80037d2:	5f49      	ldrsh	r1, [r1, r5]
 80037d4:	f000 f8d0 	bl	8003978 <_lseek_r>
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	1c42      	adds	r2, r0, #1
 80037dc:	d103      	bne.n	80037e6 <__sseek+0x1a>
 80037de:	4a05      	ldr	r2, [pc, #20]	@ (80037f4 <__sseek+0x28>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	81a3      	strh	r3, [r4, #12]
 80037e4:	bd70      	pop	{r4, r5, r6, pc}
 80037e6:	2280      	movs	r2, #128	@ 0x80
 80037e8:	0152      	lsls	r2, r2, #5
 80037ea:	4313      	orrs	r3, r2
 80037ec:	81a3      	strh	r3, [r4, #12]
 80037ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80037f0:	e7f8      	b.n	80037e4 <__sseek+0x18>
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	ffffefff 	.word	0xffffefff

080037f8 <__sclose>:
 80037f8:	b510      	push	{r4, lr}
 80037fa:	230e      	movs	r3, #14
 80037fc:	5ec9      	ldrsh	r1, [r1, r3]
 80037fe:	f000 f8a9 	bl	8003954 <_close_r>
 8003802:	bd10      	pop	{r4, pc}

08003804 <__swbuf_r>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	0006      	movs	r6, r0
 8003808:	000d      	movs	r5, r1
 800380a:	0014      	movs	r4, r2
 800380c:	2800      	cmp	r0, #0
 800380e:	d004      	beq.n	800381a <__swbuf_r+0x16>
 8003810:	6a03      	ldr	r3, [r0, #32]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <__swbuf_r+0x16>
 8003816:	f7ff ff05 	bl	8003624 <__sinit>
 800381a:	69a3      	ldr	r3, [r4, #24]
 800381c:	60a3      	str	r3, [r4, #8]
 800381e:	89a3      	ldrh	r3, [r4, #12]
 8003820:	071b      	lsls	r3, r3, #28
 8003822:	d502      	bpl.n	800382a <__swbuf_r+0x26>
 8003824:	6923      	ldr	r3, [r4, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <__swbuf_r+0x3a>
 800382a:	0021      	movs	r1, r4
 800382c:	0030      	movs	r0, r6
 800382e:	f000 f82b 	bl	8003888 <__swsetup_r>
 8003832:	2800      	cmp	r0, #0
 8003834:	d003      	beq.n	800383e <__swbuf_r+0x3a>
 8003836:	2501      	movs	r5, #1
 8003838:	426d      	negs	r5, r5
 800383a:	0028      	movs	r0, r5
 800383c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800383e:	6923      	ldr	r3, [r4, #16]
 8003840:	6820      	ldr	r0, [r4, #0]
 8003842:	b2ef      	uxtb	r7, r5
 8003844:	1ac0      	subs	r0, r0, r3
 8003846:	6963      	ldr	r3, [r4, #20]
 8003848:	b2ed      	uxtb	r5, r5
 800384a:	4283      	cmp	r3, r0
 800384c:	dc05      	bgt.n	800385a <__swbuf_r+0x56>
 800384e:	0021      	movs	r1, r4
 8003850:	0030      	movs	r0, r6
 8003852:	f000 fd3f 	bl	80042d4 <_fflush_r>
 8003856:	2800      	cmp	r0, #0
 8003858:	d1ed      	bne.n	8003836 <__swbuf_r+0x32>
 800385a:	68a3      	ldr	r3, [r4, #8]
 800385c:	3001      	adds	r0, #1
 800385e:	3b01      	subs	r3, #1
 8003860:	60a3      	str	r3, [r4, #8]
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	6022      	str	r2, [r4, #0]
 8003868:	701f      	strb	r7, [r3, #0]
 800386a:	6963      	ldr	r3, [r4, #20]
 800386c:	4283      	cmp	r3, r0
 800386e:	d004      	beq.n	800387a <__swbuf_r+0x76>
 8003870:	89a3      	ldrh	r3, [r4, #12]
 8003872:	07db      	lsls	r3, r3, #31
 8003874:	d5e1      	bpl.n	800383a <__swbuf_r+0x36>
 8003876:	2d0a      	cmp	r5, #10
 8003878:	d1df      	bne.n	800383a <__swbuf_r+0x36>
 800387a:	0021      	movs	r1, r4
 800387c:	0030      	movs	r0, r6
 800387e:	f000 fd29 	bl	80042d4 <_fflush_r>
 8003882:	2800      	cmp	r0, #0
 8003884:	d0d9      	beq.n	800383a <__swbuf_r+0x36>
 8003886:	e7d6      	b.n	8003836 <__swbuf_r+0x32>

08003888 <__swsetup_r>:
 8003888:	4b2d      	ldr	r3, [pc, #180]	@ (8003940 <__swsetup_r+0xb8>)
 800388a:	b570      	push	{r4, r5, r6, lr}
 800388c:	0005      	movs	r5, r0
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	000c      	movs	r4, r1
 8003892:	2800      	cmp	r0, #0
 8003894:	d004      	beq.n	80038a0 <__swsetup_r+0x18>
 8003896:	6a03      	ldr	r3, [r0, #32]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <__swsetup_r+0x18>
 800389c:	f7ff fec2 	bl	8003624 <__sinit>
 80038a0:	230c      	movs	r3, #12
 80038a2:	5ee2      	ldrsh	r2, [r4, r3]
 80038a4:	0713      	lsls	r3, r2, #28
 80038a6:	d423      	bmi.n	80038f0 <__swsetup_r+0x68>
 80038a8:	06d3      	lsls	r3, r2, #27
 80038aa:	d407      	bmi.n	80038bc <__swsetup_r+0x34>
 80038ac:	2309      	movs	r3, #9
 80038ae:	602b      	str	r3, [r5, #0]
 80038b0:	2340      	movs	r3, #64	@ 0x40
 80038b2:	2001      	movs	r0, #1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	81a3      	strh	r3, [r4, #12]
 80038b8:	4240      	negs	r0, r0
 80038ba:	e03a      	b.n	8003932 <__swsetup_r+0xaa>
 80038bc:	0752      	lsls	r2, r2, #29
 80038be:	d513      	bpl.n	80038e8 <__swsetup_r+0x60>
 80038c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038c2:	2900      	cmp	r1, #0
 80038c4:	d008      	beq.n	80038d8 <__swsetup_r+0x50>
 80038c6:	0023      	movs	r3, r4
 80038c8:	3344      	adds	r3, #68	@ 0x44
 80038ca:	4299      	cmp	r1, r3
 80038cc:	d002      	beq.n	80038d4 <__swsetup_r+0x4c>
 80038ce:	0028      	movs	r0, r5
 80038d0:	f000 f8bc 	bl	8003a4c <_free_r>
 80038d4:	2300      	movs	r3, #0
 80038d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80038d8:	2224      	movs	r2, #36	@ 0x24
 80038da:	89a3      	ldrh	r3, [r4, #12]
 80038dc:	4393      	bics	r3, r2
 80038de:	81a3      	strh	r3, [r4, #12]
 80038e0:	2300      	movs	r3, #0
 80038e2:	6063      	str	r3, [r4, #4]
 80038e4:	6923      	ldr	r3, [r4, #16]
 80038e6:	6023      	str	r3, [r4, #0]
 80038e8:	2308      	movs	r3, #8
 80038ea:	89a2      	ldrh	r2, [r4, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	81a3      	strh	r3, [r4, #12]
 80038f0:	6923      	ldr	r3, [r4, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10b      	bne.n	800390e <__swsetup_r+0x86>
 80038f6:	21a0      	movs	r1, #160	@ 0xa0
 80038f8:	2280      	movs	r2, #128	@ 0x80
 80038fa:	89a3      	ldrh	r3, [r4, #12]
 80038fc:	0089      	lsls	r1, r1, #2
 80038fe:	0092      	lsls	r2, r2, #2
 8003900:	400b      	ands	r3, r1
 8003902:	4293      	cmp	r3, r2
 8003904:	d003      	beq.n	800390e <__swsetup_r+0x86>
 8003906:	0021      	movs	r1, r4
 8003908:	0028      	movs	r0, r5
 800390a:	f000 fd39 	bl	8004380 <__smakebuf_r>
 800390e:	230c      	movs	r3, #12
 8003910:	5ee2      	ldrsh	r2, [r4, r3]
 8003912:	2101      	movs	r1, #1
 8003914:	0013      	movs	r3, r2
 8003916:	400b      	ands	r3, r1
 8003918:	420a      	tst	r2, r1
 800391a:	d00b      	beq.n	8003934 <__swsetup_r+0xac>
 800391c:	2300      	movs	r3, #0
 800391e:	60a3      	str	r3, [r4, #8]
 8003920:	6963      	ldr	r3, [r4, #20]
 8003922:	425b      	negs	r3, r3
 8003924:	61a3      	str	r3, [r4, #24]
 8003926:	2000      	movs	r0, #0
 8003928:	6923      	ldr	r3, [r4, #16]
 800392a:	4283      	cmp	r3, r0
 800392c:	d101      	bne.n	8003932 <__swsetup_r+0xaa>
 800392e:	0613      	lsls	r3, r2, #24
 8003930:	d4be      	bmi.n	80038b0 <__swsetup_r+0x28>
 8003932:	bd70      	pop	{r4, r5, r6, pc}
 8003934:	0791      	lsls	r1, r2, #30
 8003936:	d400      	bmi.n	800393a <__swsetup_r+0xb2>
 8003938:	6963      	ldr	r3, [r4, #20]
 800393a:	60a3      	str	r3, [r4, #8]
 800393c:	e7f3      	b.n	8003926 <__swsetup_r+0x9e>
 800393e:	46c0      	nop			@ (mov r8, r8)
 8003940:	2000002c 	.word	0x2000002c

08003944 <memset>:
 8003944:	0003      	movs	r3, r0
 8003946:	1882      	adds	r2, r0, r2
 8003948:	4293      	cmp	r3, r2
 800394a:	d100      	bne.n	800394e <memset+0xa>
 800394c:	4770      	bx	lr
 800394e:	7019      	strb	r1, [r3, #0]
 8003950:	3301      	adds	r3, #1
 8003952:	e7f9      	b.n	8003948 <memset+0x4>

08003954 <_close_r>:
 8003954:	2300      	movs	r3, #0
 8003956:	b570      	push	{r4, r5, r6, lr}
 8003958:	4d06      	ldr	r5, [pc, #24]	@ (8003974 <_close_r+0x20>)
 800395a:	0004      	movs	r4, r0
 800395c:	0008      	movs	r0, r1
 800395e:	602b      	str	r3, [r5, #0]
 8003960:	f7fd fc6d 	bl	800123e <_close>
 8003964:	1c43      	adds	r3, r0, #1
 8003966:	d103      	bne.n	8003970 <_close_r+0x1c>
 8003968:	682b      	ldr	r3, [r5, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d000      	beq.n	8003970 <_close_r+0x1c>
 800396e:	6023      	str	r3, [r4, #0]
 8003970:	bd70      	pop	{r4, r5, r6, pc}
 8003972:	46c0      	nop			@ (mov r8, r8)
 8003974:	20000310 	.word	0x20000310

08003978 <_lseek_r>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	0004      	movs	r4, r0
 800397c:	0008      	movs	r0, r1
 800397e:	0011      	movs	r1, r2
 8003980:	001a      	movs	r2, r3
 8003982:	2300      	movs	r3, #0
 8003984:	4d05      	ldr	r5, [pc, #20]	@ (800399c <_lseek_r+0x24>)
 8003986:	602b      	str	r3, [r5, #0]
 8003988:	f7fd fc7a 	bl	8001280 <_lseek>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d103      	bne.n	8003998 <_lseek_r+0x20>
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d000      	beq.n	8003998 <_lseek_r+0x20>
 8003996:	6023      	str	r3, [r4, #0]
 8003998:	bd70      	pop	{r4, r5, r6, pc}
 800399a:	46c0      	nop			@ (mov r8, r8)
 800399c:	20000310 	.word	0x20000310

080039a0 <_read_r>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	0004      	movs	r4, r0
 80039a4:	0008      	movs	r0, r1
 80039a6:	0011      	movs	r1, r2
 80039a8:	001a      	movs	r2, r3
 80039aa:	2300      	movs	r3, #0
 80039ac:	4d05      	ldr	r5, [pc, #20]	@ (80039c4 <_read_r+0x24>)
 80039ae:	602b      	str	r3, [r5, #0]
 80039b0:	f7fd fc0c 	bl	80011cc <_read>
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	d103      	bne.n	80039c0 <_read_r+0x20>
 80039b8:	682b      	ldr	r3, [r5, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d000      	beq.n	80039c0 <_read_r+0x20>
 80039be:	6023      	str	r3, [r4, #0]
 80039c0:	bd70      	pop	{r4, r5, r6, pc}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	20000310 	.word	0x20000310

080039c8 <_write_r>:
 80039c8:	b570      	push	{r4, r5, r6, lr}
 80039ca:	0004      	movs	r4, r0
 80039cc:	0008      	movs	r0, r1
 80039ce:	0011      	movs	r1, r2
 80039d0:	001a      	movs	r2, r3
 80039d2:	2300      	movs	r3, #0
 80039d4:	4d05      	ldr	r5, [pc, #20]	@ (80039ec <_write_r+0x24>)
 80039d6:	602b      	str	r3, [r5, #0]
 80039d8:	f7fd fc15 	bl	8001206 <_write>
 80039dc:	1c43      	adds	r3, r0, #1
 80039de:	d103      	bne.n	80039e8 <_write_r+0x20>
 80039e0:	682b      	ldr	r3, [r5, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d000      	beq.n	80039e8 <_write_r+0x20>
 80039e6:	6023      	str	r3, [r4, #0]
 80039e8:	bd70      	pop	{r4, r5, r6, pc}
 80039ea:	46c0      	nop			@ (mov r8, r8)
 80039ec:	20000310 	.word	0x20000310

080039f0 <__errno>:
 80039f0:	4b01      	ldr	r3, [pc, #4]	@ (80039f8 <__errno+0x8>)
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	4770      	bx	lr
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	2000002c 	.word	0x2000002c

080039fc <__libc_init_array>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	2600      	movs	r6, #0
 8003a00:	4c0c      	ldr	r4, [pc, #48]	@ (8003a34 <__libc_init_array+0x38>)
 8003a02:	4d0d      	ldr	r5, [pc, #52]	@ (8003a38 <__libc_init_array+0x3c>)
 8003a04:	1b64      	subs	r4, r4, r5
 8003a06:	10a4      	asrs	r4, r4, #2
 8003a08:	42a6      	cmp	r6, r4
 8003a0a:	d109      	bne.n	8003a20 <__libc_init_array+0x24>
 8003a0c:	2600      	movs	r6, #0
 8003a0e:	f000 fd3b 	bl	8004488 <_init>
 8003a12:	4c0a      	ldr	r4, [pc, #40]	@ (8003a3c <__libc_init_array+0x40>)
 8003a14:	4d0a      	ldr	r5, [pc, #40]	@ (8003a40 <__libc_init_array+0x44>)
 8003a16:	1b64      	subs	r4, r4, r5
 8003a18:	10a4      	asrs	r4, r4, #2
 8003a1a:	42a6      	cmp	r6, r4
 8003a1c:	d105      	bne.n	8003a2a <__libc_init_array+0x2e>
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
 8003a20:	00b3      	lsls	r3, r6, #2
 8003a22:	58eb      	ldr	r3, [r5, r3]
 8003a24:	4798      	blx	r3
 8003a26:	3601      	adds	r6, #1
 8003a28:	e7ee      	b.n	8003a08 <__libc_init_array+0xc>
 8003a2a:	00b3      	lsls	r3, r6, #2
 8003a2c:	58eb      	ldr	r3, [r5, r3]
 8003a2e:	4798      	blx	r3
 8003a30:	3601      	adds	r6, #1
 8003a32:	e7f2      	b.n	8003a1a <__libc_init_array+0x1e>
 8003a34:	08004674 	.word	0x08004674
 8003a38:	08004674 	.word	0x08004674
 8003a3c:	08004678 	.word	0x08004678
 8003a40:	08004674 	.word	0x08004674

08003a44 <__retarget_lock_init_recursive>:
 8003a44:	4770      	bx	lr

08003a46 <__retarget_lock_acquire_recursive>:
 8003a46:	4770      	bx	lr

08003a48 <__retarget_lock_release_recursive>:
 8003a48:	4770      	bx	lr
	...

08003a4c <_free_r>:
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	0005      	movs	r5, r0
 8003a50:	1e0c      	subs	r4, r1, #0
 8003a52:	d010      	beq.n	8003a76 <_free_r+0x2a>
 8003a54:	3c04      	subs	r4, #4
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	da00      	bge.n	8003a5e <_free_r+0x12>
 8003a5c:	18e4      	adds	r4, r4, r3
 8003a5e:	0028      	movs	r0, r5
 8003a60:	f000 f8e0 	bl	8003c24 <__malloc_lock>
 8003a64:	4a1d      	ldr	r2, [pc, #116]	@ (8003adc <_free_r+0x90>)
 8003a66:	6813      	ldr	r3, [r2, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d105      	bne.n	8003a78 <_free_r+0x2c>
 8003a6c:	6063      	str	r3, [r4, #4]
 8003a6e:	6014      	str	r4, [r2, #0]
 8003a70:	0028      	movs	r0, r5
 8003a72:	f000 f8df 	bl	8003c34 <__malloc_unlock>
 8003a76:	bd70      	pop	{r4, r5, r6, pc}
 8003a78:	42a3      	cmp	r3, r4
 8003a7a:	d908      	bls.n	8003a8e <_free_r+0x42>
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	1821      	adds	r1, r4, r0
 8003a80:	428b      	cmp	r3, r1
 8003a82:	d1f3      	bne.n	8003a6c <_free_r+0x20>
 8003a84:	6819      	ldr	r1, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	1809      	adds	r1, r1, r0
 8003a8a:	6021      	str	r1, [r4, #0]
 8003a8c:	e7ee      	b.n	8003a6c <_free_r+0x20>
 8003a8e:	001a      	movs	r2, r3
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <_free_r+0x4e>
 8003a96:	42a3      	cmp	r3, r4
 8003a98:	d9f9      	bls.n	8003a8e <_free_r+0x42>
 8003a9a:	6811      	ldr	r1, [r2, #0]
 8003a9c:	1850      	adds	r0, r2, r1
 8003a9e:	42a0      	cmp	r0, r4
 8003aa0:	d10b      	bne.n	8003aba <_free_r+0x6e>
 8003aa2:	6820      	ldr	r0, [r4, #0]
 8003aa4:	1809      	adds	r1, r1, r0
 8003aa6:	1850      	adds	r0, r2, r1
 8003aa8:	6011      	str	r1, [r2, #0]
 8003aaa:	4283      	cmp	r3, r0
 8003aac:	d1e0      	bne.n	8003a70 <_free_r+0x24>
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	1841      	adds	r1, r0, r1
 8003ab4:	6011      	str	r1, [r2, #0]
 8003ab6:	6053      	str	r3, [r2, #4]
 8003ab8:	e7da      	b.n	8003a70 <_free_r+0x24>
 8003aba:	42a0      	cmp	r0, r4
 8003abc:	d902      	bls.n	8003ac4 <_free_r+0x78>
 8003abe:	230c      	movs	r3, #12
 8003ac0:	602b      	str	r3, [r5, #0]
 8003ac2:	e7d5      	b.n	8003a70 <_free_r+0x24>
 8003ac4:	6820      	ldr	r0, [r4, #0]
 8003ac6:	1821      	adds	r1, r4, r0
 8003ac8:	428b      	cmp	r3, r1
 8003aca:	d103      	bne.n	8003ad4 <_free_r+0x88>
 8003acc:	6819      	ldr	r1, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	1809      	adds	r1, r1, r0
 8003ad2:	6021      	str	r1, [r4, #0]
 8003ad4:	6063      	str	r3, [r4, #4]
 8003ad6:	6054      	str	r4, [r2, #4]
 8003ad8:	e7ca      	b.n	8003a70 <_free_r+0x24>
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	2000031c 	.word	0x2000031c

08003ae0 <sbrk_aligned>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	4e0f      	ldr	r6, [pc, #60]	@ (8003b20 <sbrk_aligned+0x40>)
 8003ae4:	000d      	movs	r5, r1
 8003ae6:	6831      	ldr	r1, [r6, #0]
 8003ae8:	0004      	movs	r4, r0
 8003aea:	2900      	cmp	r1, #0
 8003aec:	d102      	bne.n	8003af4 <sbrk_aligned+0x14>
 8003aee:	f000 fcad 	bl	800444c <_sbrk_r>
 8003af2:	6030      	str	r0, [r6, #0]
 8003af4:	0029      	movs	r1, r5
 8003af6:	0020      	movs	r0, r4
 8003af8:	f000 fca8 	bl	800444c <_sbrk_r>
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	d103      	bne.n	8003b08 <sbrk_aligned+0x28>
 8003b00:	2501      	movs	r5, #1
 8003b02:	426d      	negs	r5, r5
 8003b04:	0028      	movs	r0, r5
 8003b06:	bd70      	pop	{r4, r5, r6, pc}
 8003b08:	2303      	movs	r3, #3
 8003b0a:	1cc5      	adds	r5, r0, #3
 8003b0c:	439d      	bics	r5, r3
 8003b0e:	42a8      	cmp	r0, r5
 8003b10:	d0f8      	beq.n	8003b04 <sbrk_aligned+0x24>
 8003b12:	1a29      	subs	r1, r5, r0
 8003b14:	0020      	movs	r0, r4
 8003b16:	f000 fc99 	bl	800444c <_sbrk_r>
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d1f2      	bne.n	8003b04 <sbrk_aligned+0x24>
 8003b1e:	e7ef      	b.n	8003b00 <sbrk_aligned+0x20>
 8003b20:	20000318 	.word	0x20000318

08003b24 <_malloc_r>:
 8003b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b26:	2203      	movs	r2, #3
 8003b28:	1ccb      	adds	r3, r1, #3
 8003b2a:	4393      	bics	r3, r2
 8003b2c:	3308      	adds	r3, #8
 8003b2e:	0005      	movs	r5, r0
 8003b30:	001f      	movs	r7, r3
 8003b32:	2b0c      	cmp	r3, #12
 8003b34:	d234      	bcs.n	8003ba0 <_malloc_r+0x7c>
 8003b36:	270c      	movs	r7, #12
 8003b38:	42b9      	cmp	r1, r7
 8003b3a:	d833      	bhi.n	8003ba4 <_malloc_r+0x80>
 8003b3c:	0028      	movs	r0, r5
 8003b3e:	f000 f871 	bl	8003c24 <__malloc_lock>
 8003b42:	4e37      	ldr	r6, [pc, #220]	@ (8003c20 <_malloc_r+0xfc>)
 8003b44:	6833      	ldr	r3, [r6, #0]
 8003b46:	001c      	movs	r4, r3
 8003b48:	2c00      	cmp	r4, #0
 8003b4a:	d12f      	bne.n	8003bac <_malloc_r+0x88>
 8003b4c:	0039      	movs	r1, r7
 8003b4e:	0028      	movs	r0, r5
 8003b50:	f7ff ffc6 	bl	8003ae0 <sbrk_aligned>
 8003b54:	0004      	movs	r4, r0
 8003b56:	1c43      	adds	r3, r0, #1
 8003b58:	d15f      	bne.n	8003c1a <_malloc_r+0xf6>
 8003b5a:	6834      	ldr	r4, [r6, #0]
 8003b5c:	9400      	str	r4, [sp, #0]
 8003b5e:	9b00      	ldr	r3, [sp, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d14a      	bne.n	8003bfa <_malloc_r+0xd6>
 8003b64:	2c00      	cmp	r4, #0
 8003b66:	d052      	beq.n	8003c0e <_malloc_r+0xea>
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	0028      	movs	r0, r5
 8003b6c:	18e3      	adds	r3, r4, r3
 8003b6e:	9900      	ldr	r1, [sp, #0]
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	f000 fc6b 	bl	800444c <_sbrk_r>
 8003b76:	9b01      	ldr	r3, [sp, #4]
 8003b78:	4283      	cmp	r3, r0
 8003b7a:	d148      	bne.n	8003c0e <_malloc_r+0xea>
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	0028      	movs	r0, r5
 8003b80:	1aff      	subs	r7, r7, r3
 8003b82:	0039      	movs	r1, r7
 8003b84:	f7ff ffac 	bl	8003ae0 <sbrk_aligned>
 8003b88:	3001      	adds	r0, #1
 8003b8a:	d040      	beq.n	8003c0e <_malloc_r+0xea>
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	19db      	adds	r3, r3, r7
 8003b90:	6023      	str	r3, [r4, #0]
 8003b92:	6833      	ldr	r3, [r6, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	2a00      	cmp	r2, #0
 8003b98:	d133      	bne.n	8003c02 <_malloc_r+0xde>
 8003b9a:	9b00      	ldr	r3, [sp, #0]
 8003b9c:	6033      	str	r3, [r6, #0]
 8003b9e:	e019      	b.n	8003bd4 <_malloc_r+0xb0>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	dac9      	bge.n	8003b38 <_malloc_r+0x14>
 8003ba4:	230c      	movs	r3, #12
 8003ba6:	602b      	str	r3, [r5, #0]
 8003ba8:	2000      	movs	r0, #0
 8003baa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003bac:	6821      	ldr	r1, [r4, #0]
 8003bae:	1bc9      	subs	r1, r1, r7
 8003bb0:	d420      	bmi.n	8003bf4 <_malloc_r+0xd0>
 8003bb2:	290b      	cmp	r1, #11
 8003bb4:	d90a      	bls.n	8003bcc <_malloc_r+0xa8>
 8003bb6:	19e2      	adds	r2, r4, r7
 8003bb8:	6027      	str	r7, [r4, #0]
 8003bba:	42a3      	cmp	r3, r4
 8003bbc:	d104      	bne.n	8003bc8 <_malloc_r+0xa4>
 8003bbe:	6032      	str	r2, [r6, #0]
 8003bc0:	6863      	ldr	r3, [r4, #4]
 8003bc2:	6011      	str	r1, [r2, #0]
 8003bc4:	6053      	str	r3, [r2, #4]
 8003bc6:	e005      	b.n	8003bd4 <_malloc_r+0xb0>
 8003bc8:	605a      	str	r2, [r3, #4]
 8003bca:	e7f9      	b.n	8003bc0 <_malloc_r+0x9c>
 8003bcc:	6862      	ldr	r2, [r4, #4]
 8003bce:	42a3      	cmp	r3, r4
 8003bd0:	d10e      	bne.n	8003bf0 <_malloc_r+0xcc>
 8003bd2:	6032      	str	r2, [r6, #0]
 8003bd4:	0028      	movs	r0, r5
 8003bd6:	f000 f82d 	bl	8003c34 <__malloc_unlock>
 8003bda:	0020      	movs	r0, r4
 8003bdc:	2207      	movs	r2, #7
 8003bde:	300b      	adds	r0, #11
 8003be0:	1d23      	adds	r3, r4, #4
 8003be2:	4390      	bics	r0, r2
 8003be4:	1ac2      	subs	r2, r0, r3
 8003be6:	4298      	cmp	r0, r3
 8003be8:	d0df      	beq.n	8003baa <_malloc_r+0x86>
 8003bea:	1a1b      	subs	r3, r3, r0
 8003bec:	50a3      	str	r3, [r4, r2]
 8003bee:	e7dc      	b.n	8003baa <_malloc_r+0x86>
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	e7ef      	b.n	8003bd4 <_malloc_r+0xb0>
 8003bf4:	0023      	movs	r3, r4
 8003bf6:	6864      	ldr	r4, [r4, #4]
 8003bf8:	e7a6      	b.n	8003b48 <_malloc_r+0x24>
 8003bfa:	9c00      	ldr	r4, [sp, #0]
 8003bfc:	6863      	ldr	r3, [r4, #4]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	e7ad      	b.n	8003b5e <_malloc_r+0x3a>
 8003c02:	001a      	movs	r2, r3
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	42a3      	cmp	r3, r4
 8003c08:	d1fb      	bne.n	8003c02 <_malloc_r+0xde>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e7da      	b.n	8003bc4 <_malloc_r+0xa0>
 8003c0e:	230c      	movs	r3, #12
 8003c10:	0028      	movs	r0, r5
 8003c12:	602b      	str	r3, [r5, #0]
 8003c14:	f000 f80e 	bl	8003c34 <__malloc_unlock>
 8003c18:	e7c6      	b.n	8003ba8 <_malloc_r+0x84>
 8003c1a:	6007      	str	r7, [r0, #0]
 8003c1c:	e7da      	b.n	8003bd4 <_malloc_r+0xb0>
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	2000031c 	.word	0x2000031c

08003c24 <__malloc_lock>:
 8003c24:	b510      	push	{r4, lr}
 8003c26:	4802      	ldr	r0, [pc, #8]	@ (8003c30 <__malloc_lock+0xc>)
 8003c28:	f7ff ff0d 	bl	8003a46 <__retarget_lock_acquire_recursive>
 8003c2c:	bd10      	pop	{r4, pc}
 8003c2e:	46c0      	nop			@ (mov r8, r8)
 8003c30:	20000314 	.word	0x20000314

08003c34 <__malloc_unlock>:
 8003c34:	b510      	push	{r4, lr}
 8003c36:	4802      	ldr	r0, [pc, #8]	@ (8003c40 <__malloc_unlock+0xc>)
 8003c38:	f7ff ff06 	bl	8003a48 <__retarget_lock_release_recursive>
 8003c3c:	bd10      	pop	{r4, pc}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	20000314 	.word	0x20000314

08003c44 <__sfputc_r>:
 8003c44:	6893      	ldr	r3, [r2, #8]
 8003c46:	b510      	push	{r4, lr}
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	6093      	str	r3, [r2, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	da04      	bge.n	8003c5a <__sfputc_r+0x16>
 8003c50:	6994      	ldr	r4, [r2, #24]
 8003c52:	42a3      	cmp	r3, r4
 8003c54:	db07      	blt.n	8003c66 <__sfputc_r+0x22>
 8003c56:	290a      	cmp	r1, #10
 8003c58:	d005      	beq.n	8003c66 <__sfputc_r+0x22>
 8003c5a:	6813      	ldr	r3, [r2, #0]
 8003c5c:	1c58      	adds	r0, r3, #1
 8003c5e:	6010      	str	r0, [r2, #0]
 8003c60:	7019      	strb	r1, [r3, #0]
 8003c62:	0008      	movs	r0, r1
 8003c64:	bd10      	pop	{r4, pc}
 8003c66:	f7ff fdcd 	bl	8003804 <__swbuf_r>
 8003c6a:	0001      	movs	r1, r0
 8003c6c:	e7f9      	b.n	8003c62 <__sfputc_r+0x1e>

08003c6e <__sfputs_r>:
 8003c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c70:	0006      	movs	r6, r0
 8003c72:	000f      	movs	r7, r1
 8003c74:	0014      	movs	r4, r2
 8003c76:	18d5      	adds	r5, r2, r3
 8003c78:	42ac      	cmp	r4, r5
 8003c7a:	d101      	bne.n	8003c80 <__sfputs_r+0x12>
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	e007      	b.n	8003c90 <__sfputs_r+0x22>
 8003c80:	7821      	ldrb	r1, [r4, #0]
 8003c82:	003a      	movs	r2, r7
 8003c84:	0030      	movs	r0, r6
 8003c86:	f7ff ffdd 	bl	8003c44 <__sfputc_r>
 8003c8a:	3401      	adds	r4, #1
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d1f3      	bne.n	8003c78 <__sfputs_r+0xa>
 8003c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c94 <_vfiprintf_r>:
 8003c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c96:	b0a1      	sub	sp, #132	@ 0x84
 8003c98:	000f      	movs	r7, r1
 8003c9a:	0015      	movs	r5, r2
 8003c9c:	001e      	movs	r6, r3
 8003c9e:	9003      	str	r0, [sp, #12]
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d004      	beq.n	8003cae <_vfiprintf_r+0x1a>
 8003ca4:	6a03      	ldr	r3, [r0, #32]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <_vfiprintf_r+0x1a>
 8003caa:	f7ff fcbb 	bl	8003624 <__sinit>
 8003cae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cb0:	07db      	lsls	r3, r3, #31
 8003cb2:	d405      	bmi.n	8003cc0 <_vfiprintf_r+0x2c>
 8003cb4:	89bb      	ldrh	r3, [r7, #12]
 8003cb6:	059b      	lsls	r3, r3, #22
 8003cb8:	d402      	bmi.n	8003cc0 <_vfiprintf_r+0x2c>
 8003cba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003cbc:	f7ff fec3 	bl	8003a46 <__retarget_lock_acquire_recursive>
 8003cc0:	89bb      	ldrh	r3, [r7, #12]
 8003cc2:	071b      	lsls	r3, r3, #28
 8003cc4:	d502      	bpl.n	8003ccc <_vfiprintf_r+0x38>
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d113      	bne.n	8003cf4 <_vfiprintf_r+0x60>
 8003ccc:	0039      	movs	r1, r7
 8003cce:	9803      	ldr	r0, [sp, #12]
 8003cd0:	f7ff fdda 	bl	8003888 <__swsetup_r>
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	d00d      	beq.n	8003cf4 <_vfiprintf_r+0x60>
 8003cd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cda:	07db      	lsls	r3, r3, #31
 8003cdc:	d503      	bpl.n	8003ce6 <_vfiprintf_r+0x52>
 8003cde:	2001      	movs	r0, #1
 8003ce0:	4240      	negs	r0, r0
 8003ce2:	b021      	add	sp, #132	@ 0x84
 8003ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ce6:	89bb      	ldrh	r3, [r7, #12]
 8003ce8:	059b      	lsls	r3, r3, #22
 8003cea:	d4f8      	bmi.n	8003cde <_vfiprintf_r+0x4a>
 8003cec:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003cee:	f7ff feab 	bl	8003a48 <__retarget_lock_release_recursive>
 8003cf2:	e7f4      	b.n	8003cde <_vfiprintf_r+0x4a>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	ac08      	add	r4, sp, #32
 8003cf8:	6163      	str	r3, [r4, #20]
 8003cfa:	3320      	adds	r3, #32
 8003cfc:	7663      	strb	r3, [r4, #25]
 8003cfe:	3310      	adds	r3, #16
 8003d00:	76a3      	strb	r3, [r4, #26]
 8003d02:	9607      	str	r6, [sp, #28]
 8003d04:	002e      	movs	r6, r5
 8003d06:	7833      	ldrb	r3, [r6, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <_vfiprintf_r+0x7c>
 8003d0c:	2b25      	cmp	r3, #37	@ 0x25
 8003d0e:	d148      	bne.n	8003da2 <_vfiprintf_r+0x10e>
 8003d10:	1b73      	subs	r3, r6, r5
 8003d12:	9305      	str	r3, [sp, #20]
 8003d14:	42ae      	cmp	r6, r5
 8003d16:	d00b      	beq.n	8003d30 <_vfiprintf_r+0x9c>
 8003d18:	002a      	movs	r2, r5
 8003d1a:	0039      	movs	r1, r7
 8003d1c:	9803      	ldr	r0, [sp, #12]
 8003d1e:	f7ff ffa6 	bl	8003c6e <__sfputs_r>
 8003d22:	3001      	adds	r0, #1
 8003d24:	d100      	bne.n	8003d28 <_vfiprintf_r+0x94>
 8003d26:	e0ae      	b.n	8003e86 <_vfiprintf_r+0x1f2>
 8003d28:	6963      	ldr	r3, [r4, #20]
 8003d2a:	9a05      	ldr	r2, [sp, #20]
 8003d2c:	189b      	adds	r3, r3, r2
 8003d2e:	6163      	str	r3, [r4, #20]
 8003d30:	7833      	ldrb	r3, [r6, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d100      	bne.n	8003d38 <_vfiprintf_r+0xa4>
 8003d36:	e0a6      	b.n	8003e86 <_vfiprintf_r+0x1f2>
 8003d38:	2201      	movs	r2, #1
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	4252      	negs	r2, r2
 8003d3e:	6062      	str	r2, [r4, #4]
 8003d40:	a904      	add	r1, sp, #16
 8003d42:	3254      	adds	r2, #84	@ 0x54
 8003d44:	1852      	adds	r2, r2, r1
 8003d46:	1c75      	adds	r5, r6, #1
 8003d48:	6023      	str	r3, [r4, #0]
 8003d4a:	60e3      	str	r3, [r4, #12]
 8003d4c:	60a3      	str	r3, [r4, #8]
 8003d4e:	7013      	strb	r3, [r2, #0]
 8003d50:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003d52:	4b59      	ldr	r3, [pc, #356]	@ (8003eb8 <_vfiprintf_r+0x224>)
 8003d54:	2205      	movs	r2, #5
 8003d56:	0018      	movs	r0, r3
 8003d58:	7829      	ldrb	r1, [r5, #0]
 8003d5a:	9305      	str	r3, [sp, #20]
 8003d5c:	f000 fb88 	bl	8004470 <memchr>
 8003d60:	1c6e      	adds	r6, r5, #1
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d11f      	bne.n	8003da6 <_vfiprintf_r+0x112>
 8003d66:	6822      	ldr	r2, [r4, #0]
 8003d68:	06d3      	lsls	r3, r2, #27
 8003d6a:	d504      	bpl.n	8003d76 <_vfiprintf_r+0xe2>
 8003d6c:	2353      	movs	r3, #83	@ 0x53
 8003d6e:	a904      	add	r1, sp, #16
 8003d70:	185b      	adds	r3, r3, r1
 8003d72:	2120      	movs	r1, #32
 8003d74:	7019      	strb	r1, [r3, #0]
 8003d76:	0713      	lsls	r3, r2, #28
 8003d78:	d504      	bpl.n	8003d84 <_vfiprintf_r+0xf0>
 8003d7a:	2353      	movs	r3, #83	@ 0x53
 8003d7c:	a904      	add	r1, sp, #16
 8003d7e:	185b      	adds	r3, r3, r1
 8003d80:	212b      	movs	r1, #43	@ 0x2b
 8003d82:	7019      	strb	r1, [r3, #0]
 8003d84:	782b      	ldrb	r3, [r5, #0]
 8003d86:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d88:	d016      	beq.n	8003db8 <_vfiprintf_r+0x124>
 8003d8a:	002e      	movs	r6, r5
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	200a      	movs	r0, #10
 8003d90:	68e3      	ldr	r3, [r4, #12]
 8003d92:	7832      	ldrb	r2, [r6, #0]
 8003d94:	1c75      	adds	r5, r6, #1
 8003d96:	3a30      	subs	r2, #48	@ 0x30
 8003d98:	2a09      	cmp	r2, #9
 8003d9a:	d950      	bls.n	8003e3e <_vfiprintf_r+0x1aa>
 8003d9c:	2900      	cmp	r1, #0
 8003d9e:	d111      	bne.n	8003dc4 <_vfiprintf_r+0x130>
 8003da0:	e017      	b.n	8003dd2 <_vfiprintf_r+0x13e>
 8003da2:	3601      	adds	r6, #1
 8003da4:	e7af      	b.n	8003d06 <_vfiprintf_r+0x72>
 8003da6:	9b05      	ldr	r3, [sp, #20]
 8003da8:	6822      	ldr	r2, [r4, #0]
 8003daa:	1ac0      	subs	r0, r0, r3
 8003dac:	2301      	movs	r3, #1
 8003dae:	4083      	lsls	r3, r0
 8003db0:	4313      	orrs	r3, r2
 8003db2:	0035      	movs	r5, r6
 8003db4:	6023      	str	r3, [r4, #0]
 8003db6:	e7cc      	b.n	8003d52 <_vfiprintf_r+0xbe>
 8003db8:	9b07      	ldr	r3, [sp, #28]
 8003dba:	1d19      	adds	r1, r3, #4
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	9107      	str	r1, [sp, #28]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	db01      	blt.n	8003dc8 <_vfiprintf_r+0x134>
 8003dc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003dc6:	e004      	b.n	8003dd2 <_vfiprintf_r+0x13e>
 8003dc8:	425b      	negs	r3, r3
 8003dca:	60e3      	str	r3, [r4, #12]
 8003dcc:	2302      	movs	r3, #2
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	7833      	ldrb	r3, [r6, #0]
 8003dd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003dd6:	d10c      	bne.n	8003df2 <_vfiprintf_r+0x15e>
 8003dd8:	7873      	ldrb	r3, [r6, #1]
 8003dda:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ddc:	d134      	bne.n	8003e48 <_vfiprintf_r+0x1b4>
 8003dde:	9b07      	ldr	r3, [sp, #28]
 8003de0:	3602      	adds	r6, #2
 8003de2:	1d1a      	adds	r2, r3, #4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	9207      	str	r2, [sp, #28]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	da01      	bge.n	8003df0 <_vfiprintf_r+0x15c>
 8003dec:	2301      	movs	r3, #1
 8003dee:	425b      	negs	r3, r3
 8003df0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003df2:	4d32      	ldr	r5, [pc, #200]	@ (8003ebc <_vfiprintf_r+0x228>)
 8003df4:	2203      	movs	r2, #3
 8003df6:	0028      	movs	r0, r5
 8003df8:	7831      	ldrb	r1, [r6, #0]
 8003dfa:	f000 fb39 	bl	8004470 <memchr>
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	d006      	beq.n	8003e10 <_vfiprintf_r+0x17c>
 8003e02:	2340      	movs	r3, #64	@ 0x40
 8003e04:	1b40      	subs	r0, r0, r5
 8003e06:	4083      	lsls	r3, r0
 8003e08:	6822      	ldr	r2, [r4, #0]
 8003e0a:	3601      	adds	r6, #1
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	6023      	str	r3, [r4, #0]
 8003e10:	7831      	ldrb	r1, [r6, #0]
 8003e12:	2206      	movs	r2, #6
 8003e14:	482a      	ldr	r0, [pc, #168]	@ (8003ec0 <_vfiprintf_r+0x22c>)
 8003e16:	1c75      	adds	r5, r6, #1
 8003e18:	7621      	strb	r1, [r4, #24]
 8003e1a:	f000 fb29 	bl	8004470 <memchr>
 8003e1e:	2800      	cmp	r0, #0
 8003e20:	d040      	beq.n	8003ea4 <_vfiprintf_r+0x210>
 8003e22:	4b28      	ldr	r3, [pc, #160]	@ (8003ec4 <_vfiprintf_r+0x230>)
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d122      	bne.n	8003e6e <_vfiprintf_r+0x1da>
 8003e28:	2207      	movs	r2, #7
 8003e2a:	9b07      	ldr	r3, [sp, #28]
 8003e2c:	3307      	adds	r3, #7
 8003e2e:	4393      	bics	r3, r2
 8003e30:	3308      	adds	r3, #8
 8003e32:	9307      	str	r3, [sp, #28]
 8003e34:	6963      	ldr	r3, [r4, #20]
 8003e36:	9a04      	ldr	r2, [sp, #16]
 8003e38:	189b      	adds	r3, r3, r2
 8003e3a:	6163      	str	r3, [r4, #20]
 8003e3c:	e762      	b.n	8003d04 <_vfiprintf_r+0x70>
 8003e3e:	4343      	muls	r3, r0
 8003e40:	002e      	movs	r6, r5
 8003e42:	2101      	movs	r1, #1
 8003e44:	189b      	adds	r3, r3, r2
 8003e46:	e7a4      	b.n	8003d92 <_vfiprintf_r+0xfe>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	200a      	movs	r0, #10
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	3601      	adds	r6, #1
 8003e50:	6063      	str	r3, [r4, #4]
 8003e52:	7832      	ldrb	r2, [r6, #0]
 8003e54:	1c75      	adds	r5, r6, #1
 8003e56:	3a30      	subs	r2, #48	@ 0x30
 8003e58:	2a09      	cmp	r2, #9
 8003e5a:	d903      	bls.n	8003e64 <_vfiprintf_r+0x1d0>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0c8      	beq.n	8003df2 <_vfiprintf_r+0x15e>
 8003e60:	9109      	str	r1, [sp, #36]	@ 0x24
 8003e62:	e7c6      	b.n	8003df2 <_vfiprintf_r+0x15e>
 8003e64:	4341      	muls	r1, r0
 8003e66:	002e      	movs	r6, r5
 8003e68:	2301      	movs	r3, #1
 8003e6a:	1889      	adds	r1, r1, r2
 8003e6c:	e7f1      	b.n	8003e52 <_vfiprintf_r+0x1be>
 8003e6e:	aa07      	add	r2, sp, #28
 8003e70:	9200      	str	r2, [sp, #0]
 8003e72:	0021      	movs	r1, r4
 8003e74:	003a      	movs	r2, r7
 8003e76:	4b14      	ldr	r3, [pc, #80]	@ (8003ec8 <_vfiprintf_r+0x234>)
 8003e78:	9803      	ldr	r0, [sp, #12]
 8003e7a:	e000      	b.n	8003e7e <_vfiprintf_r+0x1ea>
 8003e7c:	bf00      	nop
 8003e7e:	9004      	str	r0, [sp, #16]
 8003e80:	9b04      	ldr	r3, [sp, #16]
 8003e82:	3301      	adds	r3, #1
 8003e84:	d1d6      	bne.n	8003e34 <_vfiprintf_r+0x1a0>
 8003e86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e88:	07db      	lsls	r3, r3, #31
 8003e8a:	d405      	bmi.n	8003e98 <_vfiprintf_r+0x204>
 8003e8c:	89bb      	ldrh	r3, [r7, #12]
 8003e8e:	059b      	lsls	r3, r3, #22
 8003e90:	d402      	bmi.n	8003e98 <_vfiprintf_r+0x204>
 8003e92:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003e94:	f7ff fdd8 	bl	8003a48 <__retarget_lock_release_recursive>
 8003e98:	89bb      	ldrh	r3, [r7, #12]
 8003e9a:	065b      	lsls	r3, r3, #25
 8003e9c:	d500      	bpl.n	8003ea0 <_vfiprintf_r+0x20c>
 8003e9e:	e71e      	b.n	8003cde <_vfiprintf_r+0x4a>
 8003ea0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003ea2:	e71e      	b.n	8003ce2 <_vfiprintf_r+0x4e>
 8003ea4:	aa07      	add	r2, sp, #28
 8003ea6:	9200      	str	r2, [sp, #0]
 8003ea8:	0021      	movs	r1, r4
 8003eaa:	003a      	movs	r2, r7
 8003eac:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <_vfiprintf_r+0x234>)
 8003eae:	9803      	ldr	r0, [sp, #12]
 8003eb0:	f000 f87c 	bl	8003fac <_printf_i>
 8003eb4:	e7e3      	b.n	8003e7e <_vfiprintf_r+0x1ea>
 8003eb6:	46c0      	nop			@ (mov r8, r8)
 8003eb8:	08004640 	.word	0x08004640
 8003ebc:	08004646 	.word	0x08004646
 8003ec0:	0800464a 	.word	0x0800464a
 8003ec4:	00000000 	.word	0x00000000
 8003ec8:	08003c6f 	.word	0x08003c6f

08003ecc <_printf_common>:
 8003ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ece:	0016      	movs	r6, r2
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	688a      	ldr	r2, [r1, #8]
 8003ed4:	690b      	ldr	r3, [r1, #16]
 8003ed6:	000c      	movs	r4, r1
 8003ed8:	9000      	str	r0, [sp, #0]
 8003eda:	4293      	cmp	r3, r2
 8003edc:	da00      	bge.n	8003ee0 <_printf_common+0x14>
 8003ede:	0013      	movs	r3, r2
 8003ee0:	0022      	movs	r2, r4
 8003ee2:	6033      	str	r3, [r6, #0]
 8003ee4:	3243      	adds	r2, #67	@ 0x43
 8003ee6:	7812      	ldrb	r2, [r2, #0]
 8003ee8:	2a00      	cmp	r2, #0
 8003eea:	d001      	beq.n	8003ef0 <_printf_common+0x24>
 8003eec:	3301      	adds	r3, #1
 8003eee:	6033      	str	r3, [r6, #0]
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	069b      	lsls	r3, r3, #26
 8003ef4:	d502      	bpl.n	8003efc <_printf_common+0x30>
 8003ef6:	6833      	ldr	r3, [r6, #0]
 8003ef8:	3302      	adds	r3, #2
 8003efa:	6033      	str	r3, [r6, #0]
 8003efc:	6822      	ldr	r2, [r4, #0]
 8003efe:	2306      	movs	r3, #6
 8003f00:	0015      	movs	r5, r2
 8003f02:	401d      	ands	r5, r3
 8003f04:	421a      	tst	r2, r3
 8003f06:	d027      	beq.n	8003f58 <_printf_common+0x8c>
 8003f08:	0023      	movs	r3, r4
 8003f0a:	3343      	adds	r3, #67	@ 0x43
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	1e5a      	subs	r2, r3, #1
 8003f10:	4193      	sbcs	r3, r2
 8003f12:	6822      	ldr	r2, [r4, #0]
 8003f14:	0692      	lsls	r2, r2, #26
 8003f16:	d430      	bmi.n	8003f7a <_printf_common+0xae>
 8003f18:	0022      	movs	r2, r4
 8003f1a:	9901      	ldr	r1, [sp, #4]
 8003f1c:	9800      	ldr	r0, [sp, #0]
 8003f1e:	9d08      	ldr	r5, [sp, #32]
 8003f20:	3243      	adds	r2, #67	@ 0x43
 8003f22:	47a8      	blx	r5
 8003f24:	3001      	adds	r0, #1
 8003f26:	d025      	beq.n	8003f74 <_printf_common+0xa8>
 8003f28:	2206      	movs	r2, #6
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	2500      	movs	r5, #0
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d105      	bne.n	8003f40 <_printf_common+0x74>
 8003f34:	6833      	ldr	r3, [r6, #0]
 8003f36:	68e5      	ldr	r5, [r4, #12]
 8003f38:	1aed      	subs	r5, r5, r3
 8003f3a:	43eb      	mvns	r3, r5
 8003f3c:	17db      	asrs	r3, r3, #31
 8003f3e:	401d      	ands	r5, r3
 8003f40:	68a3      	ldr	r3, [r4, #8]
 8003f42:	6922      	ldr	r2, [r4, #16]
 8003f44:	4293      	cmp	r3, r2
 8003f46:	dd01      	ble.n	8003f4c <_printf_common+0x80>
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	18ed      	adds	r5, r5, r3
 8003f4c:	2600      	movs	r6, #0
 8003f4e:	42b5      	cmp	r5, r6
 8003f50:	d120      	bne.n	8003f94 <_printf_common+0xc8>
 8003f52:	2000      	movs	r0, #0
 8003f54:	e010      	b.n	8003f78 <_printf_common+0xac>
 8003f56:	3501      	adds	r5, #1
 8003f58:	68e3      	ldr	r3, [r4, #12]
 8003f5a:	6832      	ldr	r2, [r6, #0]
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	42ab      	cmp	r3, r5
 8003f60:	ddd2      	ble.n	8003f08 <_printf_common+0x3c>
 8003f62:	0022      	movs	r2, r4
 8003f64:	2301      	movs	r3, #1
 8003f66:	9901      	ldr	r1, [sp, #4]
 8003f68:	9800      	ldr	r0, [sp, #0]
 8003f6a:	9f08      	ldr	r7, [sp, #32]
 8003f6c:	3219      	adds	r2, #25
 8003f6e:	47b8      	blx	r7
 8003f70:	3001      	adds	r0, #1
 8003f72:	d1f0      	bne.n	8003f56 <_printf_common+0x8a>
 8003f74:	2001      	movs	r0, #1
 8003f76:	4240      	negs	r0, r0
 8003f78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f7a:	2030      	movs	r0, #48	@ 0x30
 8003f7c:	18e1      	adds	r1, r4, r3
 8003f7e:	3143      	adds	r1, #67	@ 0x43
 8003f80:	7008      	strb	r0, [r1, #0]
 8003f82:	0021      	movs	r1, r4
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	3145      	adds	r1, #69	@ 0x45
 8003f88:	7809      	ldrb	r1, [r1, #0]
 8003f8a:	18a2      	adds	r2, r4, r2
 8003f8c:	3243      	adds	r2, #67	@ 0x43
 8003f8e:	3302      	adds	r3, #2
 8003f90:	7011      	strb	r1, [r2, #0]
 8003f92:	e7c1      	b.n	8003f18 <_printf_common+0x4c>
 8003f94:	0022      	movs	r2, r4
 8003f96:	2301      	movs	r3, #1
 8003f98:	9901      	ldr	r1, [sp, #4]
 8003f9a:	9800      	ldr	r0, [sp, #0]
 8003f9c:	9f08      	ldr	r7, [sp, #32]
 8003f9e:	321a      	adds	r2, #26
 8003fa0:	47b8      	blx	r7
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d0e6      	beq.n	8003f74 <_printf_common+0xa8>
 8003fa6:	3601      	adds	r6, #1
 8003fa8:	e7d1      	b.n	8003f4e <_printf_common+0x82>
	...

08003fac <_printf_i>:
 8003fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fae:	b08b      	sub	sp, #44	@ 0x2c
 8003fb0:	9206      	str	r2, [sp, #24]
 8003fb2:	000a      	movs	r2, r1
 8003fb4:	3243      	adds	r2, #67	@ 0x43
 8003fb6:	9307      	str	r3, [sp, #28]
 8003fb8:	9005      	str	r0, [sp, #20]
 8003fba:	9203      	str	r2, [sp, #12]
 8003fbc:	7e0a      	ldrb	r2, [r1, #24]
 8003fbe:	000c      	movs	r4, r1
 8003fc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003fc2:	2a78      	cmp	r2, #120	@ 0x78
 8003fc4:	d809      	bhi.n	8003fda <_printf_i+0x2e>
 8003fc6:	2a62      	cmp	r2, #98	@ 0x62
 8003fc8:	d80b      	bhi.n	8003fe2 <_printf_i+0x36>
 8003fca:	2a00      	cmp	r2, #0
 8003fcc:	d100      	bne.n	8003fd0 <_printf_i+0x24>
 8003fce:	e0bc      	b.n	800414a <_printf_i+0x19e>
 8003fd0:	497b      	ldr	r1, [pc, #492]	@ (80041c0 <_printf_i+0x214>)
 8003fd2:	9104      	str	r1, [sp, #16]
 8003fd4:	2a58      	cmp	r2, #88	@ 0x58
 8003fd6:	d100      	bne.n	8003fda <_printf_i+0x2e>
 8003fd8:	e090      	b.n	80040fc <_printf_i+0x150>
 8003fda:	0025      	movs	r5, r4
 8003fdc:	3542      	adds	r5, #66	@ 0x42
 8003fde:	702a      	strb	r2, [r5, #0]
 8003fe0:	e022      	b.n	8004028 <_printf_i+0x7c>
 8003fe2:	0010      	movs	r0, r2
 8003fe4:	3863      	subs	r0, #99	@ 0x63
 8003fe6:	2815      	cmp	r0, #21
 8003fe8:	d8f7      	bhi.n	8003fda <_printf_i+0x2e>
 8003fea:	f7fc f88d 	bl	8000108 <__gnu_thumb1_case_shi>
 8003fee:	0016      	.short	0x0016
 8003ff0:	fff6001f 	.word	0xfff6001f
 8003ff4:	fff6fff6 	.word	0xfff6fff6
 8003ff8:	001ffff6 	.word	0x001ffff6
 8003ffc:	fff6fff6 	.word	0xfff6fff6
 8004000:	fff6fff6 	.word	0xfff6fff6
 8004004:	003600a1 	.word	0x003600a1
 8004008:	fff60080 	.word	0xfff60080
 800400c:	00b2fff6 	.word	0x00b2fff6
 8004010:	0036fff6 	.word	0x0036fff6
 8004014:	fff6fff6 	.word	0xfff6fff6
 8004018:	0084      	.short	0x0084
 800401a:	0025      	movs	r5, r4
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	3542      	adds	r5, #66	@ 0x42
 8004020:	1d11      	adds	r1, r2, #4
 8004022:	6019      	str	r1, [r3, #0]
 8004024:	6813      	ldr	r3, [r2, #0]
 8004026:	702b      	strb	r3, [r5, #0]
 8004028:	2301      	movs	r3, #1
 800402a:	e0a0      	b.n	800416e <_printf_i+0x1c2>
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	6809      	ldr	r1, [r1, #0]
 8004030:	1d02      	adds	r2, r0, #4
 8004032:	060d      	lsls	r5, r1, #24
 8004034:	d50b      	bpl.n	800404e <_printf_i+0xa2>
 8004036:	6806      	ldr	r6, [r0, #0]
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	2e00      	cmp	r6, #0
 800403c:	da03      	bge.n	8004046 <_printf_i+0x9a>
 800403e:	232d      	movs	r3, #45	@ 0x2d
 8004040:	9a03      	ldr	r2, [sp, #12]
 8004042:	4276      	negs	r6, r6
 8004044:	7013      	strb	r3, [r2, #0]
 8004046:	4b5e      	ldr	r3, [pc, #376]	@ (80041c0 <_printf_i+0x214>)
 8004048:	270a      	movs	r7, #10
 800404a:	9304      	str	r3, [sp, #16]
 800404c:	e018      	b.n	8004080 <_printf_i+0xd4>
 800404e:	6806      	ldr	r6, [r0, #0]
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	0649      	lsls	r1, r1, #25
 8004054:	d5f1      	bpl.n	800403a <_printf_i+0x8e>
 8004056:	b236      	sxth	r6, r6
 8004058:	e7ef      	b.n	800403a <_printf_i+0x8e>
 800405a:	6808      	ldr	r0, [r1, #0]
 800405c:	6819      	ldr	r1, [r3, #0]
 800405e:	c940      	ldmia	r1!, {r6}
 8004060:	0605      	lsls	r5, r0, #24
 8004062:	d402      	bmi.n	800406a <_printf_i+0xbe>
 8004064:	0640      	lsls	r0, r0, #25
 8004066:	d500      	bpl.n	800406a <_printf_i+0xbe>
 8004068:	b2b6      	uxth	r6, r6
 800406a:	6019      	str	r1, [r3, #0]
 800406c:	4b54      	ldr	r3, [pc, #336]	@ (80041c0 <_printf_i+0x214>)
 800406e:	270a      	movs	r7, #10
 8004070:	9304      	str	r3, [sp, #16]
 8004072:	2a6f      	cmp	r2, #111	@ 0x6f
 8004074:	d100      	bne.n	8004078 <_printf_i+0xcc>
 8004076:	3f02      	subs	r7, #2
 8004078:	0023      	movs	r3, r4
 800407a:	2200      	movs	r2, #0
 800407c:	3343      	adds	r3, #67	@ 0x43
 800407e:	701a      	strb	r2, [r3, #0]
 8004080:	6863      	ldr	r3, [r4, #4]
 8004082:	60a3      	str	r3, [r4, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	db03      	blt.n	8004090 <_printf_i+0xe4>
 8004088:	2104      	movs	r1, #4
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	438a      	bics	r2, r1
 800408e:	6022      	str	r2, [r4, #0]
 8004090:	2e00      	cmp	r6, #0
 8004092:	d102      	bne.n	800409a <_printf_i+0xee>
 8004094:	9d03      	ldr	r5, [sp, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00c      	beq.n	80040b4 <_printf_i+0x108>
 800409a:	9d03      	ldr	r5, [sp, #12]
 800409c:	0030      	movs	r0, r6
 800409e:	0039      	movs	r1, r7
 80040a0:	f7fc f8c2 	bl	8000228 <__aeabi_uidivmod>
 80040a4:	9b04      	ldr	r3, [sp, #16]
 80040a6:	3d01      	subs	r5, #1
 80040a8:	5c5b      	ldrb	r3, [r3, r1]
 80040aa:	702b      	strb	r3, [r5, #0]
 80040ac:	0033      	movs	r3, r6
 80040ae:	0006      	movs	r6, r0
 80040b0:	429f      	cmp	r7, r3
 80040b2:	d9f3      	bls.n	800409c <_printf_i+0xf0>
 80040b4:	2f08      	cmp	r7, #8
 80040b6:	d109      	bne.n	80040cc <_printf_i+0x120>
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	07db      	lsls	r3, r3, #31
 80040bc:	d506      	bpl.n	80040cc <_printf_i+0x120>
 80040be:	6862      	ldr	r2, [r4, #4]
 80040c0:	6923      	ldr	r3, [r4, #16]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	dc02      	bgt.n	80040cc <_printf_i+0x120>
 80040c6:	2330      	movs	r3, #48	@ 0x30
 80040c8:	3d01      	subs	r5, #1
 80040ca:	702b      	strb	r3, [r5, #0]
 80040cc:	9b03      	ldr	r3, [sp, #12]
 80040ce:	1b5b      	subs	r3, r3, r5
 80040d0:	6123      	str	r3, [r4, #16]
 80040d2:	9b07      	ldr	r3, [sp, #28]
 80040d4:	0021      	movs	r1, r4
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	9805      	ldr	r0, [sp, #20]
 80040da:	9b06      	ldr	r3, [sp, #24]
 80040dc:	aa09      	add	r2, sp, #36	@ 0x24
 80040de:	f7ff fef5 	bl	8003ecc <_printf_common>
 80040e2:	3001      	adds	r0, #1
 80040e4:	d148      	bne.n	8004178 <_printf_i+0x1cc>
 80040e6:	2001      	movs	r0, #1
 80040e8:	4240      	negs	r0, r0
 80040ea:	b00b      	add	sp, #44	@ 0x2c
 80040ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ee:	2220      	movs	r2, #32
 80040f0:	6809      	ldr	r1, [r1, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	6022      	str	r2, [r4, #0]
 80040f6:	2278      	movs	r2, #120	@ 0x78
 80040f8:	4932      	ldr	r1, [pc, #200]	@ (80041c4 <_printf_i+0x218>)
 80040fa:	9104      	str	r1, [sp, #16]
 80040fc:	0021      	movs	r1, r4
 80040fe:	3145      	adds	r1, #69	@ 0x45
 8004100:	700a      	strb	r2, [r1, #0]
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	6822      	ldr	r2, [r4, #0]
 8004106:	c940      	ldmia	r1!, {r6}
 8004108:	0610      	lsls	r0, r2, #24
 800410a:	d402      	bmi.n	8004112 <_printf_i+0x166>
 800410c:	0650      	lsls	r0, r2, #25
 800410e:	d500      	bpl.n	8004112 <_printf_i+0x166>
 8004110:	b2b6      	uxth	r6, r6
 8004112:	6019      	str	r1, [r3, #0]
 8004114:	07d3      	lsls	r3, r2, #31
 8004116:	d502      	bpl.n	800411e <_printf_i+0x172>
 8004118:	2320      	movs	r3, #32
 800411a:	4313      	orrs	r3, r2
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	2e00      	cmp	r6, #0
 8004120:	d001      	beq.n	8004126 <_printf_i+0x17a>
 8004122:	2710      	movs	r7, #16
 8004124:	e7a8      	b.n	8004078 <_printf_i+0xcc>
 8004126:	2220      	movs	r2, #32
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	4393      	bics	r3, r2
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	e7f8      	b.n	8004122 <_printf_i+0x176>
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	680d      	ldr	r5, [r1, #0]
 8004134:	1d10      	adds	r0, r2, #4
 8004136:	6949      	ldr	r1, [r1, #20]
 8004138:	6018      	str	r0, [r3, #0]
 800413a:	6813      	ldr	r3, [r2, #0]
 800413c:	062e      	lsls	r6, r5, #24
 800413e:	d501      	bpl.n	8004144 <_printf_i+0x198>
 8004140:	6019      	str	r1, [r3, #0]
 8004142:	e002      	b.n	800414a <_printf_i+0x19e>
 8004144:	066d      	lsls	r5, r5, #25
 8004146:	d5fb      	bpl.n	8004140 <_printf_i+0x194>
 8004148:	8019      	strh	r1, [r3, #0]
 800414a:	2300      	movs	r3, #0
 800414c:	9d03      	ldr	r5, [sp, #12]
 800414e:	6123      	str	r3, [r4, #16]
 8004150:	e7bf      	b.n	80040d2 <_printf_i+0x126>
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	1d11      	adds	r1, r2, #4
 8004156:	6019      	str	r1, [r3, #0]
 8004158:	6815      	ldr	r5, [r2, #0]
 800415a:	2100      	movs	r1, #0
 800415c:	0028      	movs	r0, r5
 800415e:	6862      	ldr	r2, [r4, #4]
 8004160:	f000 f986 	bl	8004470 <memchr>
 8004164:	2800      	cmp	r0, #0
 8004166:	d001      	beq.n	800416c <_printf_i+0x1c0>
 8004168:	1b40      	subs	r0, r0, r5
 800416a:	6060      	str	r0, [r4, #4]
 800416c:	6863      	ldr	r3, [r4, #4]
 800416e:	6123      	str	r3, [r4, #16]
 8004170:	2300      	movs	r3, #0
 8004172:	9a03      	ldr	r2, [sp, #12]
 8004174:	7013      	strb	r3, [r2, #0]
 8004176:	e7ac      	b.n	80040d2 <_printf_i+0x126>
 8004178:	002a      	movs	r2, r5
 800417a:	6923      	ldr	r3, [r4, #16]
 800417c:	9906      	ldr	r1, [sp, #24]
 800417e:	9805      	ldr	r0, [sp, #20]
 8004180:	9d07      	ldr	r5, [sp, #28]
 8004182:	47a8      	blx	r5
 8004184:	3001      	adds	r0, #1
 8004186:	d0ae      	beq.n	80040e6 <_printf_i+0x13a>
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	079b      	lsls	r3, r3, #30
 800418c:	d415      	bmi.n	80041ba <_printf_i+0x20e>
 800418e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004190:	68e0      	ldr	r0, [r4, #12]
 8004192:	4298      	cmp	r0, r3
 8004194:	daa9      	bge.n	80040ea <_printf_i+0x13e>
 8004196:	0018      	movs	r0, r3
 8004198:	e7a7      	b.n	80040ea <_printf_i+0x13e>
 800419a:	0022      	movs	r2, r4
 800419c:	2301      	movs	r3, #1
 800419e:	9906      	ldr	r1, [sp, #24]
 80041a0:	9805      	ldr	r0, [sp, #20]
 80041a2:	9e07      	ldr	r6, [sp, #28]
 80041a4:	3219      	adds	r2, #25
 80041a6:	47b0      	blx	r6
 80041a8:	3001      	adds	r0, #1
 80041aa:	d09c      	beq.n	80040e6 <_printf_i+0x13a>
 80041ac:	3501      	adds	r5, #1
 80041ae:	68e3      	ldr	r3, [r4, #12]
 80041b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	42ab      	cmp	r3, r5
 80041b6:	dcf0      	bgt.n	800419a <_printf_i+0x1ee>
 80041b8:	e7e9      	b.n	800418e <_printf_i+0x1e2>
 80041ba:	2500      	movs	r5, #0
 80041bc:	e7f7      	b.n	80041ae <_printf_i+0x202>
 80041be:	46c0      	nop			@ (mov r8, r8)
 80041c0:	08004651 	.word	0x08004651
 80041c4:	08004662 	.word	0x08004662

080041c8 <__sflush_r>:
 80041c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041ca:	220c      	movs	r2, #12
 80041cc:	5e8b      	ldrsh	r3, [r1, r2]
 80041ce:	0005      	movs	r5, r0
 80041d0:	000c      	movs	r4, r1
 80041d2:	071a      	lsls	r2, r3, #28
 80041d4:	d456      	bmi.n	8004284 <__sflush_r+0xbc>
 80041d6:	684a      	ldr	r2, [r1, #4]
 80041d8:	2a00      	cmp	r2, #0
 80041da:	dc02      	bgt.n	80041e2 <__sflush_r+0x1a>
 80041dc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80041de:	2a00      	cmp	r2, #0
 80041e0:	dd4e      	ble.n	8004280 <__sflush_r+0xb8>
 80041e2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80041e4:	2f00      	cmp	r7, #0
 80041e6:	d04b      	beq.n	8004280 <__sflush_r+0xb8>
 80041e8:	2200      	movs	r2, #0
 80041ea:	2080      	movs	r0, #128	@ 0x80
 80041ec:	682e      	ldr	r6, [r5, #0]
 80041ee:	602a      	str	r2, [r5, #0]
 80041f0:	001a      	movs	r2, r3
 80041f2:	0140      	lsls	r0, r0, #5
 80041f4:	6a21      	ldr	r1, [r4, #32]
 80041f6:	4002      	ands	r2, r0
 80041f8:	4203      	tst	r3, r0
 80041fa:	d033      	beq.n	8004264 <__sflush_r+0x9c>
 80041fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80041fe:	89a3      	ldrh	r3, [r4, #12]
 8004200:	075b      	lsls	r3, r3, #29
 8004202:	d506      	bpl.n	8004212 <__sflush_r+0x4a>
 8004204:	6863      	ldr	r3, [r4, #4]
 8004206:	1ad2      	subs	r2, r2, r3
 8004208:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <__sflush_r+0x4a>
 800420e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004210:	1ad2      	subs	r2, r2, r3
 8004212:	2300      	movs	r3, #0
 8004214:	0028      	movs	r0, r5
 8004216:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004218:	6a21      	ldr	r1, [r4, #32]
 800421a:	47b8      	blx	r7
 800421c:	89a2      	ldrh	r2, [r4, #12]
 800421e:	1c43      	adds	r3, r0, #1
 8004220:	d106      	bne.n	8004230 <__sflush_r+0x68>
 8004222:	6829      	ldr	r1, [r5, #0]
 8004224:	291d      	cmp	r1, #29
 8004226:	d846      	bhi.n	80042b6 <__sflush_r+0xee>
 8004228:	4b29      	ldr	r3, [pc, #164]	@ (80042d0 <__sflush_r+0x108>)
 800422a:	410b      	asrs	r3, r1
 800422c:	07db      	lsls	r3, r3, #31
 800422e:	d442      	bmi.n	80042b6 <__sflush_r+0xee>
 8004230:	2300      	movs	r3, #0
 8004232:	6063      	str	r3, [r4, #4]
 8004234:	6923      	ldr	r3, [r4, #16]
 8004236:	6023      	str	r3, [r4, #0]
 8004238:	04d2      	lsls	r2, r2, #19
 800423a:	d505      	bpl.n	8004248 <__sflush_r+0x80>
 800423c:	1c43      	adds	r3, r0, #1
 800423e:	d102      	bne.n	8004246 <__sflush_r+0x7e>
 8004240:	682b      	ldr	r3, [r5, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d100      	bne.n	8004248 <__sflush_r+0x80>
 8004246:	6560      	str	r0, [r4, #84]	@ 0x54
 8004248:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800424a:	602e      	str	r6, [r5, #0]
 800424c:	2900      	cmp	r1, #0
 800424e:	d017      	beq.n	8004280 <__sflush_r+0xb8>
 8004250:	0023      	movs	r3, r4
 8004252:	3344      	adds	r3, #68	@ 0x44
 8004254:	4299      	cmp	r1, r3
 8004256:	d002      	beq.n	800425e <__sflush_r+0x96>
 8004258:	0028      	movs	r0, r5
 800425a:	f7ff fbf7 	bl	8003a4c <_free_r>
 800425e:	2300      	movs	r3, #0
 8004260:	6363      	str	r3, [r4, #52]	@ 0x34
 8004262:	e00d      	b.n	8004280 <__sflush_r+0xb8>
 8004264:	2301      	movs	r3, #1
 8004266:	0028      	movs	r0, r5
 8004268:	47b8      	blx	r7
 800426a:	0002      	movs	r2, r0
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	d1c6      	bne.n	80041fe <__sflush_r+0x36>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0c3      	beq.n	80041fe <__sflush_r+0x36>
 8004276:	2b1d      	cmp	r3, #29
 8004278:	d001      	beq.n	800427e <__sflush_r+0xb6>
 800427a:	2b16      	cmp	r3, #22
 800427c:	d11a      	bne.n	80042b4 <__sflush_r+0xec>
 800427e:	602e      	str	r6, [r5, #0]
 8004280:	2000      	movs	r0, #0
 8004282:	e01e      	b.n	80042c2 <__sflush_r+0xfa>
 8004284:	690e      	ldr	r6, [r1, #16]
 8004286:	2e00      	cmp	r6, #0
 8004288:	d0fa      	beq.n	8004280 <__sflush_r+0xb8>
 800428a:	680f      	ldr	r7, [r1, #0]
 800428c:	600e      	str	r6, [r1, #0]
 800428e:	1bba      	subs	r2, r7, r6
 8004290:	9201      	str	r2, [sp, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	079b      	lsls	r3, r3, #30
 8004296:	d100      	bne.n	800429a <__sflush_r+0xd2>
 8004298:	694a      	ldr	r2, [r1, #20]
 800429a:	60a2      	str	r2, [r4, #8]
 800429c:	9b01      	ldr	r3, [sp, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	ddee      	ble.n	8004280 <__sflush_r+0xb8>
 80042a2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80042a4:	0032      	movs	r2, r6
 80042a6:	001f      	movs	r7, r3
 80042a8:	0028      	movs	r0, r5
 80042aa:	9b01      	ldr	r3, [sp, #4]
 80042ac:	6a21      	ldr	r1, [r4, #32]
 80042ae:	47b8      	blx	r7
 80042b0:	2800      	cmp	r0, #0
 80042b2:	dc07      	bgt.n	80042c4 <__sflush_r+0xfc>
 80042b4:	89a2      	ldrh	r2, [r4, #12]
 80042b6:	2340      	movs	r3, #64	@ 0x40
 80042b8:	2001      	movs	r0, #1
 80042ba:	4313      	orrs	r3, r2
 80042bc:	b21b      	sxth	r3, r3
 80042be:	81a3      	strh	r3, [r4, #12]
 80042c0:	4240      	negs	r0, r0
 80042c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042c4:	9b01      	ldr	r3, [sp, #4]
 80042c6:	1836      	adds	r6, r6, r0
 80042c8:	1a1b      	subs	r3, r3, r0
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	e7e6      	b.n	800429c <__sflush_r+0xd4>
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	dfbffffe 	.word	0xdfbffffe

080042d4 <_fflush_r>:
 80042d4:	690b      	ldr	r3, [r1, #16]
 80042d6:	b570      	push	{r4, r5, r6, lr}
 80042d8:	0005      	movs	r5, r0
 80042da:	000c      	movs	r4, r1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <_fflush_r+0x12>
 80042e0:	2500      	movs	r5, #0
 80042e2:	0028      	movs	r0, r5
 80042e4:	bd70      	pop	{r4, r5, r6, pc}
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d004      	beq.n	80042f4 <_fflush_r+0x20>
 80042ea:	6a03      	ldr	r3, [r0, #32]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <_fflush_r+0x20>
 80042f0:	f7ff f998 	bl	8003624 <__sinit>
 80042f4:	220c      	movs	r2, #12
 80042f6:	5ea3      	ldrsh	r3, [r4, r2]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0f1      	beq.n	80042e0 <_fflush_r+0xc>
 80042fc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80042fe:	07d2      	lsls	r2, r2, #31
 8004300:	d404      	bmi.n	800430c <_fflush_r+0x38>
 8004302:	059b      	lsls	r3, r3, #22
 8004304:	d402      	bmi.n	800430c <_fflush_r+0x38>
 8004306:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004308:	f7ff fb9d 	bl	8003a46 <__retarget_lock_acquire_recursive>
 800430c:	0028      	movs	r0, r5
 800430e:	0021      	movs	r1, r4
 8004310:	f7ff ff5a 	bl	80041c8 <__sflush_r>
 8004314:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004316:	0005      	movs	r5, r0
 8004318:	07db      	lsls	r3, r3, #31
 800431a:	d4e2      	bmi.n	80042e2 <_fflush_r+0xe>
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	059b      	lsls	r3, r3, #22
 8004320:	d4df      	bmi.n	80042e2 <_fflush_r+0xe>
 8004322:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004324:	f7ff fb90 	bl	8003a48 <__retarget_lock_release_recursive>
 8004328:	e7db      	b.n	80042e2 <_fflush_r+0xe>
	...

0800432c <__swhatbuf_r>:
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	000e      	movs	r6, r1
 8004330:	001d      	movs	r5, r3
 8004332:	230e      	movs	r3, #14
 8004334:	5ec9      	ldrsh	r1, [r1, r3]
 8004336:	0014      	movs	r4, r2
 8004338:	b096      	sub	sp, #88	@ 0x58
 800433a:	2900      	cmp	r1, #0
 800433c:	da0c      	bge.n	8004358 <__swhatbuf_r+0x2c>
 800433e:	89b2      	ldrh	r2, [r6, #12]
 8004340:	2380      	movs	r3, #128	@ 0x80
 8004342:	0011      	movs	r1, r2
 8004344:	4019      	ands	r1, r3
 8004346:	421a      	tst	r2, r3
 8004348:	d114      	bne.n	8004374 <__swhatbuf_r+0x48>
 800434a:	2380      	movs	r3, #128	@ 0x80
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	2000      	movs	r0, #0
 8004350:	6029      	str	r1, [r5, #0]
 8004352:	6023      	str	r3, [r4, #0]
 8004354:	b016      	add	sp, #88	@ 0x58
 8004356:	bd70      	pop	{r4, r5, r6, pc}
 8004358:	466a      	mov	r2, sp
 800435a:	f000 f853 	bl	8004404 <_fstat_r>
 800435e:	2800      	cmp	r0, #0
 8004360:	dbed      	blt.n	800433e <__swhatbuf_r+0x12>
 8004362:	23f0      	movs	r3, #240	@ 0xf0
 8004364:	9901      	ldr	r1, [sp, #4]
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	4019      	ands	r1, r3
 800436a:	4b04      	ldr	r3, [pc, #16]	@ (800437c <__swhatbuf_r+0x50>)
 800436c:	18c9      	adds	r1, r1, r3
 800436e:	424b      	negs	r3, r1
 8004370:	4159      	adcs	r1, r3
 8004372:	e7ea      	b.n	800434a <__swhatbuf_r+0x1e>
 8004374:	2100      	movs	r1, #0
 8004376:	2340      	movs	r3, #64	@ 0x40
 8004378:	e7e9      	b.n	800434e <__swhatbuf_r+0x22>
 800437a:	46c0      	nop			@ (mov r8, r8)
 800437c:	ffffe000 	.word	0xffffe000

08004380 <__smakebuf_r>:
 8004380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004382:	2602      	movs	r6, #2
 8004384:	898b      	ldrh	r3, [r1, #12]
 8004386:	0005      	movs	r5, r0
 8004388:	000c      	movs	r4, r1
 800438a:	b085      	sub	sp, #20
 800438c:	4233      	tst	r3, r6
 800438e:	d007      	beq.n	80043a0 <__smakebuf_r+0x20>
 8004390:	0023      	movs	r3, r4
 8004392:	3347      	adds	r3, #71	@ 0x47
 8004394:	6023      	str	r3, [r4, #0]
 8004396:	6123      	str	r3, [r4, #16]
 8004398:	2301      	movs	r3, #1
 800439a:	6163      	str	r3, [r4, #20]
 800439c:	b005      	add	sp, #20
 800439e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a0:	ab03      	add	r3, sp, #12
 80043a2:	aa02      	add	r2, sp, #8
 80043a4:	f7ff ffc2 	bl	800432c <__swhatbuf_r>
 80043a8:	9f02      	ldr	r7, [sp, #8]
 80043aa:	9001      	str	r0, [sp, #4]
 80043ac:	0039      	movs	r1, r7
 80043ae:	0028      	movs	r0, r5
 80043b0:	f7ff fbb8 	bl	8003b24 <_malloc_r>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d108      	bne.n	80043ca <__smakebuf_r+0x4a>
 80043b8:	220c      	movs	r2, #12
 80043ba:	5ea3      	ldrsh	r3, [r4, r2]
 80043bc:	059a      	lsls	r2, r3, #22
 80043be:	d4ed      	bmi.n	800439c <__smakebuf_r+0x1c>
 80043c0:	2203      	movs	r2, #3
 80043c2:	4393      	bics	r3, r2
 80043c4:	431e      	orrs	r6, r3
 80043c6:	81a6      	strh	r6, [r4, #12]
 80043c8:	e7e2      	b.n	8004390 <__smakebuf_r+0x10>
 80043ca:	2380      	movs	r3, #128	@ 0x80
 80043cc:	89a2      	ldrh	r2, [r4, #12]
 80043ce:	6020      	str	r0, [r4, #0]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	81a3      	strh	r3, [r4, #12]
 80043d4:	9b03      	ldr	r3, [sp, #12]
 80043d6:	6120      	str	r0, [r4, #16]
 80043d8:	6167      	str	r7, [r4, #20]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00c      	beq.n	80043f8 <__smakebuf_r+0x78>
 80043de:	0028      	movs	r0, r5
 80043e0:	230e      	movs	r3, #14
 80043e2:	5ee1      	ldrsh	r1, [r4, r3]
 80043e4:	f000 f820 	bl	8004428 <_isatty_r>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	d005      	beq.n	80043f8 <__smakebuf_r+0x78>
 80043ec:	2303      	movs	r3, #3
 80043ee:	89a2      	ldrh	r2, [r4, #12]
 80043f0:	439a      	bics	r2, r3
 80043f2:	3b02      	subs	r3, #2
 80043f4:	4313      	orrs	r3, r2
 80043f6:	81a3      	strh	r3, [r4, #12]
 80043f8:	89a3      	ldrh	r3, [r4, #12]
 80043fa:	9a01      	ldr	r2, [sp, #4]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	81a3      	strh	r3, [r4, #12]
 8004400:	e7cc      	b.n	800439c <__smakebuf_r+0x1c>
	...

08004404 <_fstat_r>:
 8004404:	2300      	movs	r3, #0
 8004406:	b570      	push	{r4, r5, r6, lr}
 8004408:	4d06      	ldr	r5, [pc, #24]	@ (8004424 <_fstat_r+0x20>)
 800440a:	0004      	movs	r4, r0
 800440c:	0008      	movs	r0, r1
 800440e:	0011      	movs	r1, r2
 8004410:	602b      	str	r3, [r5, #0]
 8004412:	f7fc ff1e 	bl	8001252 <_fstat>
 8004416:	1c43      	adds	r3, r0, #1
 8004418:	d103      	bne.n	8004422 <_fstat_r+0x1e>
 800441a:	682b      	ldr	r3, [r5, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d000      	beq.n	8004422 <_fstat_r+0x1e>
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	bd70      	pop	{r4, r5, r6, pc}
 8004424:	20000310 	.word	0x20000310

08004428 <_isatty_r>:
 8004428:	2300      	movs	r3, #0
 800442a:	b570      	push	{r4, r5, r6, lr}
 800442c:	4d06      	ldr	r5, [pc, #24]	@ (8004448 <_isatty_r+0x20>)
 800442e:	0004      	movs	r4, r0
 8004430:	0008      	movs	r0, r1
 8004432:	602b      	str	r3, [r5, #0]
 8004434:	f7fc ff1b 	bl	800126e <_isatty>
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d103      	bne.n	8004444 <_isatty_r+0x1c>
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d000      	beq.n	8004444 <_isatty_r+0x1c>
 8004442:	6023      	str	r3, [r4, #0]
 8004444:	bd70      	pop	{r4, r5, r6, pc}
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	20000310 	.word	0x20000310

0800444c <_sbrk_r>:
 800444c:	2300      	movs	r3, #0
 800444e:	b570      	push	{r4, r5, r6, lr}
 8004450:	4d06      	ldr	r5, [pc, #24]	@ (800446c <_sbrk_r+0x20>)
 8004452:	0004      	movs	r4, r0
 8004454:	0008      	movs	r0, r1
 8004456:	602b      	str	r3, [r5, #0]
 8004458:	f7fc ff1e 	bl	8001298 <_sbrk>
 800445c:	1c43      	adds	r3, r0, #1
 800445e:	d103      	bne.n	8004468 <_sbrk_r+0x1c>
 8004460:	682b      	ldr	r3, [r5, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d000      	beq.n	8004468 <_sbrk_r+0x1c>
 8004466:	6023      	str	r3, [r4, #0]
 8004468:	bd70      	pop	{r4, r5, r6, pc}
 800446a:	46c0      	nop			@ (mov r8, r8)
 800446c:	20000310 	.word	0x20000310

08004470 <memchr>:
 8004470:	b2c9      	uxtb	r1, r1
 8004472:	1882      	adds	r2, r0, r2
 8004474:	4290      	cmp	r0, r2
 8004476:	d101      	bne.n	800447c <memchr+0xc>
 8004478:	2000      	movs	r0, #0
 800447a:	4770      	bx	lr
 800447c:	7803      	ldrb	r3, [r0, #0]
 800447e:	428b      	cmp	r3, r1
 8004480:	d0fb      	beq.n	800447a <memchr+0xa>
 8004482:	3001      	adds	r0, #1
 8004484:	e7f6      	b.n	8004474 <memchr+0x4>
	...

08004488 <_init>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448e:	bc08      	pop	{r3}
 8004490:	469e      	mov	lr, r3
 8004492:	4770      	bx	lr

08004494 <_fini>:
 8004494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004496:	46c0      	nop			@ (mov r8, r8)
 8004498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449a:	bc08      	pop	{r3}
 800449c:	469e      	mov	lr, r3
 800449e:	4770      	bx	lr
